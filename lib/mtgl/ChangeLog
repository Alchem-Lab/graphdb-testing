2012-03-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/badrank.hpp, mtgl/mtgl_test.hpp, mtgl/pagerank.hpp,
	  mtgl/random.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/vertex_betweenness.hpp, mtgl/visit_adj.hpp:
	  
	  Gets rid of a bunch of compiler warnings.

	* ChangeLog:
	  
	  Updating ChangeLog.

	* NEWS:
	  
	  Updating NEWS.

2012-03-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/algorithm.hpp:
	  
	  Fixes a memory leak in the Qthreads and OpenMP versions of sort()
	  (#4111).

2012-03-02  Greg Mackey <gemacke@sandia.gov>

	* config/mtgl_check_qthreads.m4:
	  
	  Adding OpenMP support to configure broke configure on the XMT.
	  This update fixes that.

	* ChangeLog:
	  
	  Update the change log.

	* NEWS, config/mtgl_check_qthreads.m4, configure.ac, doc/Doxyfile,
	  mtgl/mtgl_test.hpp:
	  
	  Addresses several issues:
	  - Adds an option to configure using OpenMP (#4110).
	  - Further addresses #4083 by completing support of OpenMP in test
	  harness.
	  - Updates NEWS and rebrands code to 1.1.1.

	* ChangeLog, NEWS:
	  
	  Update NEWS and ChangeLog.

2012-03-01  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_dimacs.hpp:
	  
	  Fixes an issue where one of the loops in read_dimacs() isn't
	  parallelized by the compiler (#4109).

2012-02-29  Greg Mackey <gemacke@sandia.gov>

	* ChangeLog, NEWS:
	  
	  Update news and changelog.

	* mtgl/pagerank.hpp:
	  
	  Make pagerank compile again. Something weird is going on with the
	  XMT compiler that requires a fence statement for compilation.

2012-02-25  Greg Mackey <gemacke@sandia.gov>

	* configure.ac, mtgl/types.hpp:
	  
	  Fixes a bug where SIZEOF_ macros sometimes get defined twice
	  (#4108).

2012-02-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/badrank.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/independent_set.hpp, mtgl/pagerank.hpp,
	  mtgl/partitioning.hpp:
	  
	  Adds accumulate_out_degree() and accumulate_in_degree() (#4104).
	  Modifies existing code to use them whenever possible.

	* mtgl/hash_defs.hpp, mtgl/partitioning.hpp:
	  
	  Fixes a couple of small items:
	  - Puts the functions in partitioning.hpp into the mtgl namespace.
	  - Gets rid of a stray semicolon in hash_defs.hpp.

2012-02-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp:
	  
	  Fixing a bug in has_eulerian_circuit() (#4103).

	* ChangeLog:
	  
	  Updating ChangeLog.

	* NEWS, experimental/mtgl/read_rdf.hpp,
	  experimental/test/strings2ints.cpp,
	  experimental/test/test_goodman_cc.cpp, mtgl/hachar.hpp,
	  mtgl/hash_defs.hpp, mtgl/xmt_hash_set.hpp,
	  mtgl/xmt_hash_table.hpp, test/test_xmt_hash_table.cpp:
	  
	  Renames range_iterator to thread_iterator in hash structures
	  (#4102).

	* config/mtgl_check_atomics.m4, configure.ac,
	  experimental/test/test_omp_atomics.cpp, mtgl/util.hpp:
	  
	  Addresses a couple of items:
	  - Add versions of mt_incr() for OpenMP that don't depend on
	  Qthreads (#4101).
	  - Reduces number of comparisons for triple::operator<().

2012-02-14  Greg Mackey <gemacke@sandia.gov>

	* doc/Doxyfile:
	  
	  Update MTGL version number.

2012-02-14  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/fill.hpp, experimental/mtgl/max_min.hpp,
	  experimental/test/test_fill.cpp,
	  experimental/test/test_max_min.cpp:
	  
	  Working for openmp and qthreads

2012-02-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/algorithm.hpp:
	  
	  Fix a header guard name.

2012-02-14  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/fill.hpp, experimental/mtgl/max_min.hpp,
	  experimental/test/test_fill.cpp,
	  experimental/test/test_max_min.cpp:
	  
	  Fixed up includes.

	* experimental/mtgl/fill.hpp, experimental/mtgl/max_min.hpp,
	  experimental/test/test_fill.cpp,
	  experimental/test/test_max_min.cpp:
	  
	  Some candidates for algorithm.hpp

2012-02-14  Greg Mackey <gemacke@sandia.gov>

	* ChangeLog:
	  
	  Updating ChangeLog.

	* test/test_xmt_hash_table.cpp:
	  
	  Setting test back to XMT size.

2012-02-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_erdos_renyi_graph.hpp:
	  
	  Makes generate_erdos_renyi_graph() run in parallel on the XMT
	  (#4100).

	* AUTHORS:
	  
	  Update to correct format to work with svn2cl.

	* NEWS:
	  
	  Adding NEWS file to document major changes between versions.

2012-02-13  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/hashing_integers_co_u.cpp,
	  experimental/test/hashing_integers_hh_u.cpp:
	  
	  The mt_incr calls weren't compiling. The api must have changed
	  since
	  last compile. Made them scalers instead of references.

2012-02-10  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/multimap.hpp:
	  
	  Updated documentation.

2012-02-09  Greg Mackey <gemacke@sandia.gov>

	* test/test_edmonds_karp.cpp:
	  
	  Update comments.

	* mtgl/independent_set.hpp:
	  
	  Slight updates to independent set.

	* mtgl/independent_set.hpp:
	  
	  Improve a couple of things.

	* mtgl/algorithm.hpp, mtgl/triangles.hpp,
	  test/test_pseudo_diameter.cpp:
	  
	  Fix a couple of compile bugs when compiling with Qthreads.

2012-02-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/Makefile.am, test/custom2file.cpp, test/graph2file.cpp,
	  test/rmat2file.cpp, test/switch_endianness.cpp,
	  test/test_dynamic_array.cpp, test/test_mmap.cpp,
	  test/test_mtgl_strtok.cpp, test/test_shared_ptr.cpp,
	  test/test_sort.cpp, test/test_triangles.cpp,
	  test/test_write_graph.cpp, test/test_xmt_hash_table.cpp:
	  
	  Fix valgrind errors when running in serial.

	* mtgl/mtgl_io.hpp:
	  
	  Needed to include a header file for compile on XMT.

2012-02-08  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/visit_adjacencies.hpp,
	  experimental/test/test_louvain.cpp:
	  
	  Many changes for correctness. Louvain actually works now on
	  fairly
	  large test data and with good utilization. The exceptions are
	  that
	  visit_adjacencies seems to serialize on the construction of
	  vertex_iterator
	  (and runs at 1% utilization), and that there is still a segfault
	  waiting
	  that is hard to reproduce. I almost never see it, but it
	  is possible that the issue is forced by compiling with
	  -profile.

	* mtgl/independent_set.hpp:
	  
	  Extended interface to start with an active_v set, and changed the
	  winner rule to prefer low-degree vertices, in hopes of larger
	  independent sets.

2012-02-07  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/visit_adjacencies.hpp:
	  
	  Newer version of the old visit_adj().

	* experimental/test/test_louvain.cpp:
	  
	  works for moderate input in serial (similating parallel with
	  NAC_CHUNK.

2012-02-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Fix another compiler warning with -Wall.

	* mtgl/breadth_first_search.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edmonds_karp_max_flow.hpp, mtgl/neighborhoods.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/wcnm.hpp,
	  test/test_xmt_hash_table.cpp:
	  
	  Fix more warnings when compiling with -Wall.

	* mtgl/badrank.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/edmonds_karp_max_flow.hpp, mtgl/generate_rmat_graph.hpp,
	  mtgl/independent_set.hpp, mtgl/maxheap.h, mtgl/metrics.hpp,
	  mtgl/mmap_traits.hpp, mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/read_binary.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/subiso_5cycles.hpp,
	  mtgl/subiso_triangles.hpp, mtgl/triangles.hpp, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_set.hpp, test/custom2file.cpp,
	  test/generate_euler_tour.cpp, test/persist_graph.cpp,
	  test/subiso_5cycles.cpp, test/subiso_triangles.cpp,
	  test/test_adjacency_iteration.cpp, test/test_badrank.cpp,
	  test/test_duplicate.cpp, test/test_expand_one_edge.cpp,
	  test/test_filtering.cpp, test/test_partitioning_schemes.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_subgraph.cpp,
	  test/test_triangles.cpp, test/test_wcnm.cpp,
	  test/test_xmt_hash_set.cpp, test/test_xmt_hash_table.cpp:
	  
	  Updates to get rid of compiler warnings when compiling with
	  -Wall.

2012-02-07  Jon Berry <jberry@sandia.gov>

	* experimental/test/test_louvain.cpp:
	  
	  An attempt to parallelize Louvain. Parallelism is based on
	  independent sets.
	  Something is wrong; the same set is used again and again in
	  serial, and I would
	  expect quick stoppage. On tiny input, the first phase works. On
	  larger
	  input, it appears to loop forever.

2012-02-06  Greg Mackey <gemacke@sandia.gov>

	* INSTALL, Makefile.am, test, test/Makefile.am:
	  
	  Update text in INSTALL. Rename tests for test_bfs and test_cc.
	  They become test_breadth_first_search and
	  test_connected_components. The short names were nice, but they
	  were confusing because you had to know them or look in the
	  makefile to find them. Now, all the test names are the prefix of
	  the filename.

	* config, test:
	  
	  Update svn:ignore.

	* experimental/test/test_isomorphism_ullman.cpp,
	  experimental/test/test_neighborhoods.cpp,
	  experimental/test/test_vf2_isomorphism.cpp, mtgl/Makefile.am,
	  mtgl/dneighborhoods.hpp, mtgl/generate_random_subgraph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/neighborhoods.hpp,
	  mtgl/wcnm.hpp, test/test_subgraph_isomorphism.cpp:
	  
	  Renaming mtgl/generate_subgraph.hpp to
	  mtgl/generate_random_subgraph.hpp. Renaming
	  mtgl/dneighborhoods.hpp to mtgl/neighborhoods.hpp.

	* mtgl/snap_util.h:
	  
	  The include of mtgl/types.hpp is necessary for Windows.

2012-02-06  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/sort_map.hpp,
	  experimental/test/test_process_neighbor_categories.cpp:
	  
	  XMT performance tuning, fix to dumb bug in sort_map.

2012-02-05  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/sort_map.hpp,
	  experimental/test/test_process_neighbor_categories.cpp,
	  mtgl/util.hpp:
	  
	  more generic interface. Changing NAC_CHUNK to 256 gets decent
	  performance
	  on the XMT, but that isn't in this commit.

2012-02-04  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp:
	  
	  bug fix: too much global activity

2012-02-03  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/sort_map.hpp,
	  experimental/test/test_process_neighbor_categories.cpp:
	  
	  Now uses dynamic_array.unsafe_push_back and gets decent
	  performance on the
	  XMT.

2012-02-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp, test/generate_euler_tour.cpp:
	  
	  Fixed a bug in duplicate_euler_tour() where the start vertex was
	  always assumed to be 0 when a duplicate graph had to be used.
	  Also, modified generate_euler_tour.cpp to take the starting
	  vertex as a command-line parameter.

2012-02-02  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/sort_map.hpp, mtgl/util.hpp, mtgl/wcnm.hpp:
	  
	  process_neighbor_categories w/global consolidation of split
	  vertices clears
	  valgrind on linux. There is still a bottleneck for high-degree
	  vertices.

2012-02-02  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local_stage2_2.hpp,
	  experimental/test/test_bfs_local_stage2_2.cpp:
	  
	  Another iteration.

2012-02-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp, mtgl/subiso_5cycles.hpp,
	  mtgl/subiso_triangles.hpp, test/subiso_5cycles.cpp,
	  test/subiso_triangles.cpp:
	  
	  Reformat files to fit standard MTGL file format.

2012-02-01  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/mtgl/sort_map.hpp,
	  experimental/test/test_process_neighbor_categories.cpp:
	  
	  toward global correctness

2012-02-01  Greg Mackey <gemacke@sandia.gov>

	* Makefile.am, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp,
	  test/test_mtgl_strtok.cpp, test/test_mutable_graph.cpp,
	  test/test_partitioning_schemes.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Fixes a few minor things:
	  - Updates test_subgraph_isomorphism.cpp to work with the new
	  version of subgraph isomorphism. This vastly simplifies the code.
	  - Update the default make target message.
	  - Rename subgraph_isomorphism_wrapper() to
	  subgraph_isomorphism().
	  - Fix some compile errors with a few of the tests. All tests now
	  build.

	* Makefile.am, test/Makefile.am:
	  
	  Addresses a couple of items:
	  - Adds makefile targets for building the tests and all files
	  (#4048).
	  - Adds a message to the default make target (#4049).

	* experimental/test/test_isomorphism_ullman.cpp,
	  experimental/test/test_newmanbenchmark.cpp,
	  experimental/test/test_vf2_isomorphism.cpp,
	  mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/random_walk.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/Makefile.am, test/generate_euler_tour.cpp,
	  test/subiso_5cycles.cpp, test/subiso_triangles.cpp,
	  test/test_duplicate.cpp, test/test_subgraph.cpp:
	  
	  Addresses several tickets:
	  - Standardizes the interface for subgraph adapter and duplicate
	  adapter (#4094).
	  - Standardizes the interface for euler tour and random walk
	  (#4095).
	  - Makes edge descriptors for CSR and adjacency list graphs be
	  hashable (#4096).

2012-02-01  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/test/test_process_neighbor_categories.cpp:
	  
	  some cleaning

	* experimental/mtgl/neighbor_attribute_counts.hpp,
	  experimental/mtgl/process_neighbor_categories.hpp,
	  experimental/test/test_process_neighbor_categories.cpp:
	  
	  renaming.

	* experimental/mtgl/neighbor_attribute_counts.hpp,
	  experimental/mtgl/sort_map.hpp:
	  
	  Basic test works.

	* experimental/mtgl/neighbor_attribute_counts.hpp:
	  
	  The beginnings of a neighbor attribute counter appropriate for
	  parllel Louvain.

	* experimental/mtgl/sort_map.hpp,
	  experimental/test/test_sort_map.cpp:
	  
	  lightweight map class for processing neighbors of low degree
	  vertices

2012-01-28  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/find_best_neighbor.hpp,
	  experimental/test/test_find_best_neighbor.cpp,
	  experimental/test/test_variation_of_information.cpp:
	  
	  The "find_best_neighbor" code is the beginning of a generic,
	  thread_iterator-based neighbor search code to replace the old
	  "visit_adj."

2012-01-27  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local_stage2.hpp,
	  experimental/test/test_bfs_local_stage2.cpp:
	  
	  Added cutoff for which vertices are looked at in local parent
	  array

2012-01-26  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local_stage2.hpp,
	  experimental/test/test_bfs_local_stage2.cpp:
	  
	  Stage 2

2012-01-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/algorithm.hpp,
	  mtgl/compressed_sparse_row_graph.hpp, test/Makefile.am:
	  
	  Fix a few minor bugs.

2012-01-25  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local_stage1.hpp:
	  
	  Sorted the graph by degrees

2012-01-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/algorithm.hpp, mtgl/merge_sort.hpp, mtgl/util.hpp,
	  test/test_sort.cpp:
	  
	  Fixed a compile bug on the UV that was added with the previous
	  checkin.
	  
	  Gmail is stupid!!!!!! I sent these files from home via Gmail's
	  web interface, and it added a random unprintable character to the
	  beginning of the files. Guess Gmail can't understand plain text
	  files.
	  
	  Argggggghhhhhhhhh!!!!!!! That was an hour of my life I will never
	  get back!

	* experimental/mtgl/contraction_adapter.hpp,
	  experimental/mtgl/depth_first_search.hpp,
	  experimental/mtgl/disjoint_paths_max_flow.hpp,
	  experimental/mtgl/mtaqsort.hpp,
	  experimental/mtgl/rewire_switching.hpp,
	  experimental/mtgl/triangles_phases.hpp,
	  experimental/test/dna_sorting.cpp,
	  experimental/test/hashing_integers.cpp,
	  experimental/test/hashing_integers_hh_k.cpp,
	  experimental/test/hashing_integers_hh_u.cpp,
	  experimental/test/strings2ints.cpp,
	  experimental/test/test_bfs_dsp.cpp,
	  experimental/test/test_hotel_hash_set_charstar.cpp,
	  experimental/test/test_pagerank_bidir.cpp, mtgl/algorithm.hpp,
	  mtgl/connected_components.hpp, mtgl/merge_sort.hpp,
	  mtgl/psearch.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/util.hpp, mtgl/wcnm.hpp,
	  test/Makefile.am, test/test_badrank.cpp,
	  test/test_merge_sort.cpp, test/test_pagerank.cpp,
	  test/test_sort.cpp:
	  
	  Addresses a bunch of issues:
	  - Adds a qthreads sort (#4085).
	  - Adds an OpenMP sort (#4087).
	  - Moves insertion sort to algorithm.hpp and standardizes (#4090).
	  - Moves binary search to algorithm.hpp (#4091).
	  - Moves counting sort and bucket sort to algorithm.hpp (#4092).
	  - Adds sort() to algorithm.hpp to be the main parallel sort
	  function (#4093).

2012-01-23  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  Using rectangles in WCNM is now a #define option

2012-01-21  Jon Berry <jberry@sandia.gov>

	* experimental/test/test_variation_of_information.cpp:
	  
	  Meila measure to compare vertex partitionings.

2012-01-19  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local_stage1.hpp,
	  experimental/test/test_bfs_local_stage1.cpp:
	  
	  Trying an MPI-type approach.

2012-01-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/badrank.hpp:
	  
	  Add needed include file.

	* mtgl/numeric.hpp:
	  
	  Get rid of unused include.

2012-01-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hash_defs.hpp, mtgl/random_walk.hpp:
	  
	  Few formatting and name changes. Nothing that affects the
	  interface.

	* mtgl/badrank.hpp, mtgl/pagerank.hpp:
	  
	  Addresses a couple of things:
	  - Adds a qthreads version of badrank (#4084).
	  - Fixes a bug where memory wasn't deallocated in pagerank.

2012-01-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/mtgl_test.hpp,
	  mtgl/util.hpp:
	  
	  Addresses several items:
	  - Adds OpenMP support for
	  compressed_sparse_row_graph::deep_copy() (#4082).
	  - Adds OpenMP support for test harness (#4083).
	  - Fixed a bug caused by a missing include file that affecting
	  using mt_incr() with OpenMP.

	* mtgl/compressed_sparse_row_graph.hpp,
	  test/test_graph_parallel.cpp:
	  
	  Adds qthreads version of compressed_sparse_row::deep_copy()
	  (#4078).

2012-01-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/connected_components.hpp,
	  test/test_connected_components.cpp:
	  
	  Updates helper functions for connected components to use thread
	  iterators (#4081).

2012-01-09  Greg Mackey <gemacke@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/subgraph_isomorphism.hpp:
	  
	  Fix a couple of compile errors on the XMT.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Subgraph isomorphism was depending on the include of cmath in
	  another file. That other file no longer includes cmath, so
	  subgraph isomorphism needs to include the file itself.

2012-01-06  Greg Mackey <gemacke@sandia.gov>

	* test/test_badrank.cpp, test/test_pagerank.cpp,
	  test/test_pseudo_diameter.cpp, test/test_vertex_betweenness.cpp:
	  
	  Add code to test badrank, pseudo_diameter, and vertex_betweenness
	  using STINGER.

2012-01-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Removes pointer version of mt_* family of functions. I had added
	  them for convenience and to add an interface similar to what the
	  XMT uses. There was a problem, however, that Eric Goodman pointed
	  out. When wanting to use the mt_* functions on an actual pointer,
	  the wrong template was chosen. These should just be removed.

2011-12-26  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_local.hpp:
	  
	  Another bfs

2011-12-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am:
	  
	  Forgot to remove mtgl/read_matrix_market_qt.hpp from the makefile
	  after removing the file. Removing the makefile entry now to fix
	  the build.

2011-12-22  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/primes.hpp:
	  
	  Fixed pragma

2011-12-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/read_matrix_market_qt.hpp:
	  
	  Paritially addressed two tickets:
	  - Adds qthreads versions of compressed_sparse_row_graph::init()
	  (#4078).
	  - Gets rid of mtgl/read_matrix_market_qt.hpp and incorporates
	  code into normal file. Adds support for the general complex case
	  for Qthreads. (#4080)

2011-12-21  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels4.hpp:
	  
	  Added load-balancing by chunks.

2011-12-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Removes dependence on USING_QTHREADS when compiling for OpenMP
	  (#4079).

2011-12-19  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_bfs_levels4.cpp:
	  
	  Added space for local copies of some data structures.

2011-12-19  Greg Mackey <gemacke@sandia.gov>

	* tutorial/Makefile.am, tutorial/input_output.cpp:
	  
	  Update tutorial/input_output.cpp to work again and add it to the
	  tutorial
	  make target.

2011-12-19  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels4.hpp:
	  
	  Made local copies of level_starts, default_degrees, and
	  bin_counts

2011-12-16  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_bfs_dsp.cpp:
	  
	  Added support for serial version in check.

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  icpc doesn't like stack arrays in parallel regions. Changed to
	  malloc.

	* experimental/mtgl/bfs_levels4.hpp:
	  
	  Fixed some bugs.

2011-12-14  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  Removed openmp pragmas around linear recurrsion loop.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Fixed serial issue.

2011-12-13  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/numeric.hpp:
	  
	  Added ifndef _OPENMP

2011-12-12  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_bfs_levels4.cpp:
	  
	  Fixed problems with serial case.

2011-12-02  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels5.hpp,
	  experimental/test/test_bfs_levels5.cpp:
	  
	  Using partitioning.hpp for main loop.

2011-12-02  Greg Mackey <gemacke@sandia.gov>

	* test, tutorial:
	  
	  Update svn:ignore.

	* test/Makefile.am, tutorial/Makefile.am:
	  
	  Modify makefile so that 'make <test>' works on XMT and non-XMT
	  for all tests (#4000).

2011-12-01  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Added missing include.

	* experimental/mtgl/bfs_levels4.hpp:
	  
	  Added more timing info.

	* experimental/test/test_primes.cpp:
	  
	  Added more functionality.

	* experimental/mtgl/primes.hpp:
	  
	  Added some more precomputed primes.

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Fixed some datatypes that should have been template parameters.

2011-12-01  Greg Mackey <gemacke@sandia.gov>

	* Makefile.am, configure.ac, tutorial, tutorial/Makefile.am,
	  tutorial/triangles.cpp, tutorial/triangles1.cpp:
	  
	  Add a makefile for the tutorial directory (#3989).

2011-12-01  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels4.hpp,
	  experimental/test/test_bfs_levels4.cpp:
	  
	  Added buffers to prevent false sharing and fixed bug.

2011-12-01  Greg Mackey <gemacke@sandia.gov>

	* configure.ac:
	  
	  Fix autoconf issue with silent-rules since the build systems
	  don't have a new enough version of automake to handle it. We now
	  do it in a backward compatible way.

	* test:
	  
	  Update svn:ignore property.

	* COPYING, FIRST_TUTORIAL, INSTALL, LICENSE, Makefile.am,
	  configure.ac, mtgl/Makefile.am, test/Makefile.am,
	  test/switch_endianess.cpp, test/switch_endianness.cpp,
	  test/test_cc.cpp, test/test_connected_components.cpp,
	  test/test_tri.cpp, test/test_triangles.cpp, win32_example/Debug,
	  win32_example/mtgl_subiso_triangles2/Debug:
	  
	  Addresses several items:
	  - Changes makefile so that 'make dist' creates the distribution
	  version (#4076).
	  - Improves the installation process and updates documentation
	  (4077).

2011-11-30  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels4.hpp:
	  
	  Removed bug.

	* experimental/mtgl/bfs_levels.hpp:
	  
	  Added debug delimiters.

2011-11-30  Greg Mackey <gemacke@sandia.gov>

	* mtgl/pseudo_diameter.hpp:
	  
	  Added a workaround to get pseudo_diameter.hpp to compile on the
	  XMT that was necessary because the XMT compiler is retarded.

	* experimental/mtgl/contraction_adapter.hpp,
	  experimental/mtgl/depth_first_search.hpp,
	  experimental/mtgl/undirected_triads.hpp,
	  experimental/test/test_community3.cpp,
	  experimental/test/test_pagerank_bidir.cpp, mtgl/psearch.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/util.hpp:
	  
	  Addresses several issues:
	  - Got rid of unused code in util.hpp.
	  - Moved things that didn't belong in util.hpp out.
	  - Renamed countingSort() to counting_sort() to match naming
	  convention.

	* configure.ac, mtgl/Makefile.am, test/Makefile.am,
	  test/test_independent_set.cpp, test/test_indset.cpp:
	  
	  Rename test_indset.cpp to test_independent_set.cpp. Update the
	  makefiles and config script.

	* experimental/test/test_allvisit.cpp,
	  experimental/test/test_independent_set.cpp,
	  mtgl/generate_erdos_renyi_graph.hpp, mtgl/independent_set.hpp,
	  mtgl/pagerank.hpp, test/test_indset.cpp:
	  
	  Refactors the independent set code (#4075).

2011-11-29  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels4.hpp,
	  experimental/test/test_bfs_levels4.cpp:
	  
	  Scaling well

2011-11-28  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels2.hpp,
	  experimental/test/test_bfs_levels2.cpp:
	  
	  local hash table approach working

2011-11-28  Greg Mackey <gemacke@sandia.gov>

	* mtgl/numeric.hpp, test/test_numeric.cpp:
	  
	  Updates to accumulate() to work with qthreads.

	* experimental/mtgl/numeric.hpp,
	  experimental/test/test_numeric.cpp, mtgl/numeric.hpp,
	  test/test_numeric.cpp:
	  
	  Add's STL's numeric::accumulate() (#4074).

	* mtgl/ufl.h, mtgl/util.hpp:
	  
	  Get rid of unused code in util.hpp.

2011-11-25  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels2.hpp,
	  experimental/test/test_bfs_levels2.cpp:
	  
	  compiles

	* experimental/mtgl/bfs_levels2.hpp,
	  experimental/test/test_bfs_levels2.cpp:
	  
	  Another version

2011-11-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/badrank.hpp, mtgl/pagerank.hpp, mtgl/util.hpp,
	  test/test_badrank.cpp, test/test_pagerank.cpp:
	  
	  Addresses several items:
	  - Adds the badrank algorithm to the library (#4068).
	  - Small improvements to pagerank.
	  - Fix a small bug in mt_incr().

2011-11-23  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/depth_first_search.hpp,
	  experimental/test/test_independent_set.cpp,
	  experimental/test/test_strongly_connected_components.cpp,
	  experimental/test/test_strongly_connected_components_dfs.cpp,
	  mtgl/independent_set.hpp, mtgl/util.hpp:
	  
	  Several updates:
	  - Make sure there are versions of all the mt_* functions that
	  operate on both a reference and a pointer.
	  - Get rid of old, unused functions in util.hpp.
	  - Move functions from util.hpp that are used in only one place to
	  the files
	  that need them.

2011-11-21  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/triangles_phases.hpp,
	  mtgl/breadth_first_search.hpp, mtgl/connected_components.hpp,
	  mtgl/pagerank.hpp, mtgl/pseudo_diameter.hpp, mtgl/snap_util.h,
	  mtgl/sssp_deltastepping.hpp, mtgl/triangles.hpp, mtgl/types.hpp,
	  mtgl/util.hpp, mtgl/vertex_betweenness.hpp,
	  test/test_vertex_betweenness.cpp:
	  
	  Addresses several issues:
	  - Moved internal functions and classes into the detail namespace
	  (#3961).
	  - The better pagerank algorithm for bidirectional graphs now gets
	  called for all bidirectional graphs and not just
	  compressed_sparse_row_graph.
	  - Changed pseudo_diameter and vertex_betweenness to not depend on
	  ids (#4069, #4070).
	  - Changed pseudo_diameter and vertex_betweenness to use thread
	  itertators (#4071, #4072).

2011-11-17  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/primes.hpp, experimental/test/test_primes.cpp:
	  
	  Working up to 500 primes.

	* experimental/mtgl/primes.hpp, experimental/test/test_primes.cpp:
	  
	  Working with prime numbers.

2011-11-14  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels.hpp:
	  
	  Made local copies of default_degrees and level_starts in main
	  loop.

2011-11-13  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Missing call for openmp

	* experimental/mtgl/bfs_levels.hpp,
	  experimental/test/test_bfs_levels.cpp:
	  
	  Fixed bug. Seems to work now.

2011-11-11  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/numeric.hpp,
	  experimental/test/test_numeric.cpp:
	  
	  Fixed error.

2011-11-10  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/numeric.hpp,
	  experimental/test/test_numeric.cpp:
	  
	  Added accumulate function.

2011-11-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/pagerank.hpp, test/test_pagerank.cpp:
	  
	  Addresses several tickets related to updating the pagerank
	  algorithm:
	  - Modifies pagerank to not depend on ids (#4065).
	  - Modifies pagerank to use thread iterators (#4066).
	  - Improves the pagerank interface (#4067).

2011-11-09  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_test.hpp:
	  
	  Fixed a bug when checking for the right number of arguments when
	  reading a mmap file.

	* experimental/test/find_bipartite.cpp,
	  experimental/test/find_chordless_5-cycle.cpp,
	  experimental/test/find_chordless_5-cycle2.cpp,
	  experimental/test/test_allvisit.cpp,
	  experimental/test/test_assortativity.cpp,
	  experimental/test/test_cluster_coefficient.cpp,
	  experimental/test/test_community.cpp,
	  experimental/test/test_community2.cpp,
	  experimental/test/test_community3.cpp,
	  experimental/test/test_connection_subgraphs.cpp,
	  experimental/test/test_degree_degree_correlation.cpp,
	  experimental/test/test_dpmf.cpp,
	  experimental/test/test_encount.cpp,
	  experimental/test/test_find_degree_distribution.cpp,
	  experimental/test/test_find_triangles.cpp,
	  experimental/test/test_independent_set.cpp,
	  experimental/test/test_jaccard.cpp,
	  experimental/test/test_knn.cpp,
	  experimental/test/test_modularity.cpp,
	  experimental/test/test_neighborhoods.cpp,
	  experimental/test/test_pagerank_bidir.cpp,
	  experimental/test/test_rectangles.cpp,
	  experimental/test/test_snl_community3.cpp,
	  experimental/test/test_st_connectivity.cpp,
	  experimental/test/test_st_search.cpp,
	  experimental/test/test_strongly_connected_components.cpp,
	  experimental/test/test_strongly_connected_components_dfs.cpp,
	  experimental/test/test_subiso.cpp,
	  experimental/test/test_undirected_triads.cpp, mtgl/mtgl_test.hpp,
	  test/generate_euler_tour.cpp, test/graph2file.cpp,
	  test/subiso_5cycles.cpp, test/subiso_triangles.cpp,
	  test/test_adjacency_iteration.cpp, test/test_badrank.cpp,
	  test/test_breadth_first_search.cpp, test/test_cc.cpp,
	  test/test_edmonds_karp.cpp, test/test_expand_one_edge.cpp,
	  test/test_filtering.cpp, test/test_graph_parallel.cpp,
	  test/test_indset.cpp, test/test_pagerank.cpp,
	  test/test_partitioning_schemes.cpp,
	  test/test_pseudo_diameter.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_tri.cpp, test/test_vertex_betweenness.cpp,
	  test/test_wcnm.cpp:
	  
	  Added the ability to specify the number of qthreads to the test
	  harness (#4041).

2011-11-09  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/strings2integers.cpp,
	  experimental/test/strings2ints.cpp:
	  
	  Changed name

	* experimental/test/strings2integers.cpp:
	  
	  Adding more

	* experimental/test/strings2integers.cpp:
	  
	  Utility for converting a file of strings into integers.

2011-11-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_mmap.hpp:
	  
	  Don't want to create a file on read if it doesn't already exist.

2011-10-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/stinger_graph.hpp:
	  
	  Improves stinger creation performance (#4064).

2011-10-26  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  Some debugging statements, removing of an obsolete condition

2011-10-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_binary.hpp:
	  
	  Fix a small error in debug output.

	* mtgl/stinger_graph.hpp:
	  
	  Oops. I had left the edge block size on stinger way too low after
	  some debugging. Fixing it here.

2011-10-24  Greg Mackey <gemacke@sandia.gov>

	* test/graph2file.cpp, test/test_breadth_first_search.cpp:
	  
	  Adds code to read in or generate a graph and write it out in a
	  specified format.

2011-10-24  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/multimap.hpp,
	  experimental/mtgl/stream_counter.hpp:
	  
	  Added more timing info to multimap and added error message to
	  stream counter

	* experimental/mtgl/power_law.hpp:
	  
	  Still a work in progress.

	* experimental/test/gen_zipfs.cpp:
	  
	  Removed old usage definition.

2011-10-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/stinger_graph.hpp,
	  test/test_graph_parallel.cpp, test/test_partitioning_schemes.cpp:
	  
	  Modify test_partitioning_schemes to work better with stinger.
	  Improve
	  parallelization of mmapping stinger on XMT.

	* test/test_mmap.cpp:
	  
	  Slight updates to test_mmap().

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/mmap_traits.hpp,
	  mtgl/read_mmap.hpp, mtgl/stinger_graph.hpp,
	  mtgl/stinger_graph_adapter.hpp, mtgl/write_mmap.hpp,
	  mtgl/xmt_hash_table.hpp, test/persist_graph.cpp,
	  test/test_mmap.cpp, test/test_persist_xht.cpp:
	  
	  Addresses several tickets:
	  - Add the ability to mmap stinger_graph_adapter (#4060).
	  - Modify the header information stored in an mmapped object
	  (#4061).
	  - Change get_mmap_size() to be a member function (#4062).

2011-10-20  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/power_law.hpp:
	  
	  Adding a timer.

	* experimental/test/gen_zipfs.cpp:
	  
	  Added a print statement for then number of ints.

	* experimental/mtgl/power_law.hpp, experimental/test/gen_zipfs.cpp:
	  
	  Made things a little nicer.

2011-10-20  Jon Berry <jberry@sandia.gov>

	* mtgl/duplicate_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/hash_defs.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp,
	  mtgl/triangles.hpp, test/subiso_triangles.cpp:
	  
	  Subgraph isomorphism now has a new calling wrapper that
	  automatically
	  finds an Euler tour and a set of level pairs, then calls the base
	  algorithm. subiso_triangles is fixed to report reasonable results
	  for
	  rmat graphs (based on edge id rather than vertex id).
	  
	  subiso_triangles stores its results in an STL set and is
	  therefore
	  not theadsafe. xmt_hash_table isn't an option since we expect
	  many copies
	  of the same triangle (i.e., hashing the address of each result
	  object
	  doesn't work since many copies of the same object will have
	  different
	  addresses, but will represent the same triangle). Fooled around
	  with some
	  ways to hash the whole byte string, but hashpjw won't work.
	  Eventually,
	  we may simply have to stream the results out without checking
	  them in
	  the same process.
	  
	  subgraph_isomorphism's main loop is qthread-ized, but running
	  multithreaded
	  on my workstation incurs a major slowdown -- haven't diagnosed.

2011-10-18  Jon Berry <jberry@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp,
	  test/generate_euler_tour.cpp, test/test_tri.cpp:
	  
	  fixing trac ticket #4058, and removing id's from the input to
	  subgraph_isomorphism.

	* mtgl/subiso_triangles.hpp:
	  
	  commenting out superfluous test of multiple level_pairs.

2011-10-17  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/stats.hpp:
	  
	  Fixed bug in percentiles for small arrays.

2011-10-14  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_levels.hpp:
	  
	  Added some more comments.

	* experimental/mtgl/bfs_levels.hpp:
	  
	  Added comments.

2011-10-13  Greg Mackey <gemacke@sandia.gov>

	* test/test_partitioning_schemes.cpp:
	  
	  Update to take advantage of the fact that the test harness works
	  with stinger now.

2011-10-13  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp,
	  experimental/mtgl/partial_bin_sort.hpp:
	  
	  Fixed malloc call for global_bin_counts

2011-10-13  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  -Wall compilation without warnings

	* mtgl/subgraph_isomorphism.hpp:
	  
	  fixed conflict with recent connected components API changes.

	* mtgl/subgraph_isomorphism.hpp, mtgl/subiso_5cycles.hpp,
	  mtgl/subiso_triangles.hpp, test/subiso_5cycles.cpp,
	  test/subiso_triangles.cpp:
	  
	  The subgraph holding the next connected component of
	  colored_graph/colored_graph_rev was being initialized with
	  init_vertices.
	  These are actually two different graphs rather than a
	  bidirectional
	  graph, and we depend on the edges of like subgraphs having the
	  same id.
	  init_vertices won't guarantee this, so my previous tests must
	  have had
	  only one connected component in the colored_graph.
	  
	  This version uses init_edges with an array of edge descriptors.
	  Note
	  that this code is not threadsafe yet. We would probably need to
	  switch
	  to a single bidirectional graph for that. The separate calls to
	  init_edges,
	  which call a multithreaded unique id assigner would lose
	  synchronization.
	  
	  Note that the file test_subgraph_isomorphism is far deprecated.
	  That
	  should be moved to experimental or discarded. Once we have a
	  methodology
	  for accepting a pattern graph (only) and processing it ourselves
	  to find
	  walk, level_pairs, etc., we should make a new test and update the
	  tutorial.

2011-10-12  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/connected_components_kahan.hpp,
	  experimental/test/test_community2.cpp,
	  experimental/test/test_community3.cpp,
	  experimental/test/test_contraction.cpp,
	  experimental/test/test_newmanbenchmark.cpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/connected_components.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/shiloach_vishkin.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/triangles.hpp, test/test_cc.cpp:
	  
	  Addresses issues related to improving the connected components
	  algorithms:
	  - Change connected_components_gcc_sv to a function (#4052).
	  - Rename connected_components_gcc_sv to connected_components
	  (#4053).
	  - Modify connected_components() and shiloach_vishkin() to not
	  depend on ids (#4054).
	  - Modify connected_components() and shiloach_vishkin() to use
	  thread iterators (#4055).
	  - Standardize the interface for connected components algorithms
	  (#4056).
	  - Add thread iterators to edge_array_adapter (#4057).

2011-10-12  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp:
	  
	  Commented out two init loops that seemed to hurt more than help.

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Added omp.h include

2011-10-11  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp:
	  
	  Added workspace.

	* experimental/mtgl/bfs_levels.hpp:
	  
	  Got rid of rmap.

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Changed global bin counts to be malloc'ed.

	* experimental/test/test_bfs_dsp.cpp:
	  
	  Added workspace.

	* experimental/test/test_bfs_levels.cpp:
	  
	  Removed rmap. TODO on source selection.

	* mtgl/stats.hpp:
	  
	  Added harmonic variants of mean and std_dev. Also added
	  percentile
	  function.

	* experimental/mtgl/stats.hpp, experimental/mtgl/stats2.hpp:
	  
	  Renamed again to remove conflict with existing file.

2011-10-11  Greg Mackey <gemacke@sandia.gov>

	* test/test_cc.cpp:
	  
	  Getting rid of code to call connected_components_kahan in
	  test_cc.cpp.

	* experimental/mtgl/connected_components_kahan.hpp,
	  mtgl/connected_components.hpp:
	  
	  Moves the Kahan connected components algorithm to the
	  experimental directory (#4051).

2011-10-11  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/max_min.hpp, experimental/mtgl/stats.hpp:
	  
	  Moved max min to more generic category of stats

	* experimental/mtgl/bfs_levels.hpp,
	  experimental/test/test_bfs_levels.cpp:
	  
	  Fixed one bug.

2011-10-10  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp:
	  
	  Changed buffer to be something smaller.

	* experimental/mtgl/max_min.hpp:
	  
	  Fixed error with initial setting of max.

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Changed to timing level 2.

	* experimental/mtgl/bfs_dsp9.hpp, experimental/mtgl/bfs_levels.hpp,
	  experimental/test/test_bfs_dsp9.cpp,
	  experimental/test/test_bfs_levels.cpp:
	  
	  Performing well. Renamed to bfs_levels.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Added new method for partitioning by blocks; don't know if I like
	  it
	  yet. Changed some timing info to be level 2 instead of 1.

2011-10-07  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp9.hpp:
	  
	  Almost there

	* experimental/test/test_bfs_dsp.cpp:
	  
	  Added average TEPS

2011-10-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/stinger_graph_adapter.hpp,
	  test/test_breadth_first_search.cpp:
	  
	  Makes breadth_first_search() not depend on vertex ids (#4050).
	  Also, fix an issue with stinger_graph_adapter::null_vertex() and
	  stinger_graph_adapter()::null_edge().

2011-10-06  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp9.hpp,
	  experimental/test/test_bfs_dsp9.cpp:
	  
	  Making progress.

2011-10-06  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/rewire_switching.hpp,
	  experimental/mtgl/undirected_triads.hpp,
	  experimental/test/test_rectangles.cpp, mtgl/SMVkernel.h,
	  mtgl/breadth_first_search.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/dynamic_array.hpp, mtgl/generate_rmat_graph.hpp,
	  mtgl/independent_set.hpp, mtgl/mtgl_string.hpp,
	  mtgl/mtgl_test.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/stinger_graph.hpp, mtgl/triangles.hpp, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_set.hpp, tutorial/triangles1.cpp:
	  
	  Adds undef statements for macros where reasonable (#3988).
	  Also a few other formatting fixes.

2011-10-06  Jon Berry <jberry@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/random_walk.hpp, mtgl/shiloach_vishkin.hpp,
	  mtgl/subgraph_isomorphism.hpp:
	  
	  -Wall compilation (removing warnings)

2011-10-06  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Name changes

	* experimental/mtgl/max_min.hpp:
	  
	  Some max and min utility functions.

	* experimental/test/test_bfs_dsp9.cpp:
	  
	  progress

	* experimental/mtgl/bfs_dsp9.hpp:
	  
	  progress

2011-10-06  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/breadth_first_search_old.hpp,
	  experimental/mtgl/connection_subgraphs.hpp,
	  experimental/mtgl/contraction_adapter.hpp,
	  experimental/mtgl/disjoint_paths_max_flow.hpp,
	  experimental/mtgl/isomorphism_ullman.hpp,
	  experimental/mtgl/maximum_density_subgraph.hpp,
	  experimental/mtgl/mtgl_search_edgetime.hpp,
	  experimental/mtgl/recursive_dcsc.hpp,
	  experimental/mtgl/snl_community.hpp,
	  experimental/mtgl/snl_community2.hpp,
	  experimental/mtgl/snl_community3.hpp,
	  experimental/mtgl/st_search.hpp,
	  experimental/mtgl/st_subgraph_search.hpp,
	  experimental/mtgl/strongly_connected_components.hpp,
	  experimental/mtgl/vf2_state.hpp,
	  experimental/mtgl/vf_isomorphism_base.hpp,
	  experimental/test/test_bfs_complicated.cpp,
	  experimental/test/test_bfs_complicated2.cpp,
	  experimental/test/test_bfs_complicated3.cpp,
	  experimental/test/test_bfs_complicated4.cpp,
	  experimental/test/test_bfs_hashing_rand.cpp,
	  experimental/test/test_bfs_simple.cpp,
	  experimental/test/test_dpmf.cpp,
	  experimental/test/test_dpmf_small.cpp,
	  experimental/test/test_stinger_graph.cpp,
	  mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/filter_adapter.hpp, mtgl/independent_set.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/visit_adj.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/generate_euler_tour.cpp, test/subiso_triangles.cpp,
	  test/test_cc.cpp, test/test_edmonds_karp.cpp,
	  test/test_edmonds_karp_small.cpp, test/test_mutable_graph.cpp,
	  test/test_sssp_deltastepping.cpp,
	  test/test_subgraph_isomorphism.cpp,
	  tutorial/subgraph_isomorphism3.cpp,
	  tutorial/subgraph_isomorphism4.cpp:
	  
	  Gets rid of get_vertex() and get_edge() (#4047).

2011-10-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/connected_components.hpp, mtgl/independent_set.hpp,
	  mtgl/pagerank.hpp, test/test_indset.cpp, test/test_pagerank.cpp:
	  
	  Gets rid of compressed_sparse_row_graph::operator[] and repairs
	  the fallout (#4048).

2011-10-05  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp9.hpp,
	  experimental/test/test_bfs_dsp9.cpp:
	  
	  New attempt

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Fixed errors

	* experimental/mtgl/partial_bin_sort.hpp:
	  
	  Adding a bin sort

2011-10-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/filter_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/stinger_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/test_graph.cpp, test/test_graph_parallel.cpp:
	  
	  Addresses several issues:
	  - Adds bidirectional thread iterators to
	  compressed_sparse_row_graph (#4036).
	  - Adds thread iterators to adjacency_list (#4045).
	  - Gets rid of template parameters to iterators for
	  compressed_sparse_row_graph (#3875).

2011-09-30  Greg Mackey <gemacke@sandia.gov>

	* test/test_breadth_first_search.cpp:
	  
	  Few updates.

	* mtgl/write_dimacs.hpp, test/test_cc.cpp, test/test_tri.cpp:
	  
	  Fix a couple of compile errors.

2011-09-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/generate_erdos_renyi_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_plod_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/read_binary.hpp,
	  mtgl/read_dimacs.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/stinger_graph.hpp, mtgl/stinger_graph_adapter.hpp,
	  mtgl/write_dimacs.hpp, mtgl/write_graphlets.hpp,
	  mtgl/write_matrix_market.hpp, test/test_breadth_first_search.cpp,
	  test/test_cc.cpp, test/test_read_graph.cpp,
	  test/test_write_graph.cpp:
	  
	  Addressed several issues:
	  - Graph init() now calls clear() (#4043).
	  - Stinger now works with the test harness ($4044).
	  - All read_* write_* functions now return bool (#3981).
	  - write_dimacs() is now parallelized (#3980).
	  - Improved the speed of write_matrix_market() on the XMT.

2011-09-29  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp:
	  
	  Works pretty well. Committing current version before making
	  changes.

2011-09-27  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_multimap.cpp:
	  
	  fixed some problems

2011-09-26  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_multimap.cpp,
	  experimental/test/test_static_multimap.cpp:
	  
	  Renamed test_static_multimap to test_multimap. Also added a help
	  string.

2011-09-23  mnlemas

	* experimental/mtgl/bfs_dsp_idx.hpp,
	  experimental/test/test_bfs_dsp_idx.cpp:
	  
	  Added version of bfs_dsp that stores vertices in the local buffer
	  instead of edge indices.

2011-09-14  Greg Mackey <gemacke@sandia.gov>

	* test/test_breadth_first_search.cpp:
	  
	  Make testing bfs on stinger not the default.

	* mtgl/stinger_graph_adapter.hpp,
	  test/test_breadth_first_search.cpp:
	  
	  Fix compile error for stinger_graph_adapter on UV. Add code to
	  run bfs
	  on stinger.

	* mtgl/mtgl_io.hpp, test/switch_endianess.cpp:
	  
	  Fixed problems with array version of byte_swap. Added code to
	  read in an
	  array of unsigned longs, byte swap the array entries, and write
	  the array
	  back out.

	* mtgl/mtgl_io.hpp:
	  
	  Add a version of byte_swap() that works for arrays.

2011-09-11  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp:
	  
	  The local buffers are now more local.

2011-09-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp:
	  
	  Slight update to bfs for qthreads.

2011-09-08  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_dsp.hpp,
	  experimental/test/test_bfs_dsp.cpp:
	  
	  Going with barebones data structures.

2011-09-08  mnlemas

	* experimental/test/test_bfs_complicated5_ver.cpp:
	  
	  Now possible to turn off new verification step.

	* experimental/test/test_bfs_complicated5_ver.cpp:
	  
	  Bug fix to TEPS count in verification step.

2011-09-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/triangles.hpp, test/test_tri.cpp:
	  
	  Fixes bad scaling on UV when doing something with found
	  triangles,
	  such as counting (#4042).

2011-09-08  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_complicated4.hpp:
	  
	  Got rid of commented out lines

2011-09-08  mnlemas

	* experimental/test/test_bfs_complicated5_ver.cpp:
	  
	  Changed BFS verification to be similar to that in Graph500
	  reference
	  code. This still needs to be tested.

2011-09-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/breadth_first_search_qt.hpp,
	  test/test_breadth_first_search.cpp:
	  
	  Updates the qthreads version of the bfs code (#4017). I got rid
	  of
	  the separate file for the qthreads version and just implemented
	  the
	  qthreads version in the same file.

2011-09-07  mnlemas

	* experimental/mtgl/bfs_complicated5.hpp,
	  experimental/test/test_bfs_complicated5.cpp:
	  
	  Added the n=5 evolution of bfs_complicated.

2011-09-07  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_complicated4.hpp,
	  experimental/test/test_bfs_complicated4.cpp:
	  
	  Got rid of out_degree() calls.

2011-09-06  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_complicated4.hpp,
	  experimental/test/test_bfs_complicated4.cpp:
	  
	  Another iteration

	* experimental/mtgl/bfs_complicated3.hpp,
	  experimental/test/test_bfs_complicated3.cpp:
	  
	  Another approach

	* experimental/mtgl/bfs_complicated2.hpp:
	  
	  Corrected error. line delete by mistake I believe

	* experimental/mtgl/bfs_complicated2.hpp:
	  
	  Added parent back in

	* experimental/mtgl/bfs_complicated2.hpp,
	  experimental/test/test_bfs_complicated2.cpp:
	  
	  Another iteration.

2011-09-05  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_complicated.hpp,
	  experimental/test/test_bfs_complicated.cpp:
	  
	  Added the ability to spcify number of bins.

	* experimental/mtgl/bfs_complicated.hpp,
	  experimental/test/test_bfs_complicated.cpp:
	  
	  Rearranging the edge inserts.

	* experimental/mtgl/bfs_simple.hpp:
	  
	  Modified print statement.

2011-09-04  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_bfs_complicated.cpp:
	  
	  Added some more output.

	* experimental/mtgl/bfs_complicated.hpp:
	  
	  Added rearranging.

	* experimental/mtgl/bfs_complicated.hpp:
	  
	  Removed some commented lines.

2011-09-03  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_complicated.hpp,
	  experimental/test/test_bfs_complicated.cpp:
	  
	  Test ground for other approaches.

	* experimental/test/test_bfs_simple.cpp:
	  
	  Cleaned up some comments to reflect the file, not where it came
	  from
	  after copy and paste.

2011-09-02  mnlemas

	* experimental/test/test_bfs_hashing_rand.cpp,
	  experimental/test/test_bfs_simple.cpp:
	  
	  Added option to sample random vertices to test_bfs_simple.cc.
	  Note that only the final sample will be verified.

	* experimental/mtgl/sssp_simple.hpp,
	  experimental/test/test_sssp_simple.cpp,
	  experimental/test/test_sssp_simple_dbl.cpp:
	  
	  Added a version of sssp_simple that uses doubles.

	* experimental/mtgl/random_samples.hpp,
	  experimental/test/test_bfs_hashing_rand.cpp,
	  experimental/test/test_random_samples.cpp:
	  
	  Separated function to generate random samples into
	  random_samples.hpp.
	  Created a test test_random_samples.cpp for it. Changed
	  test_bfs_hashing_rand.cpp over to using this code.

2011-09-02  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  More pragmas

2011-09-02  mnlemas

	* experimental/test/test_bfs_hashing_rand.cpp:
	  
	  Forgot to free allocated memory.

2011-09-02  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/test_sssp_simple.cpp:
	  
	  Tests sssp_simple.

	* experimental/test/test_bfs_hashing.cpp:
	  
	  Fixed output.

	* experimental/mtgl/bfs_hashing.hpp:
	  
	  Cleaning up comments and added frees at end.

	* experimental/mtgl/bfs_simple.hpp:
	  
	  Fixed text of printfs

	* experimental/mtgl/sssp_simple.hpp:
	  
	  Fixed things from hashing to simple in text of printfs

	* experimental/mtgl/sssp_hashing.hpp,
	  experimental/test/test_sssp_hashing.cpp:
	  
	  Modifications for better performance.

	* experimental/mtgl/sssp_simple.hpp:
	  
	  Simple method for sssp.

2011-09-02  mnlemas

	* experimental/test/test_bfs_hashing_rand.cpp:
	  
	  Made a version of test_bfs_hashing that does each run with a
	  different
	  randomly sampled vertex as the BFS root.

	* experimental/mtgl/sssp_hashing.hpp,
	  experimental/test/test_sssp_hashing_dbl.cpp:
	  
	  Updated sssp_hashing.hpp to handle both integers and doubles.
	  Added
	  a qthread_cas_wrapper() function to allow qthread_cas() to be
	  used
	  with doubles. This could be added to util.hpp instead with some
	  modification. Also created test_sssp_hashing_dbl.cpp to test the
	  doubles case.

2011-09-01  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_hashing.hpp:
	  
	  Small changes, no code changes.

	* experimental/mtgl/bfs_combined.hpp,
	  experimental/mtgl/bfs_hashing.hpp,
	  experimental/mtgl/bfs_simple.hpp,
	  experimental/test/test_bfs_combined.cpp,
	  experimental/test/test_bfs_hashing.cpp,
	  experimental/test/test_bfs_simple.cpp:
	  
	  Adding more aproaches to bfs.

2011-08-31  Greg Mackey <gemacke@sandia.gov>

	* COPYRIGHT:
	  
	  Removing Copyright file as the copyright is stated in the LICENSE
	  file.

2011-08-31  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_hashing.hpp:
	  
	  Fixed issue with the pointers not be pass by reference so
	  iterative
	  calls weren't seeing a performance gain.

2011-08-29  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Changed calloc call to malloc. It shouldn't make a difference
	  since it
	  gets filled anyway by snap_restore. Also, calloc isn't advised on
	  UV.

2011-08-26  Jon Berry <jberry@sandia.gov>

	* experimental/mtgl/breadth_first_search_old.hpp:
	  
	  enabling compilation of connection subgraphs

2011-08-26  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  Added some openmp pragmas

	* experimental/test/test_bfs_hashing.cpp:
	  
	  Removed unused #define

2011-08-23  Eric Goodman <elgoodm@sandia.gov>

	* experimental/test/hashing_integers_hh_u.cpp:
	  
	  Changed print to have unsigned long instead of long.

2011-08-22  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/bfs_hashing.hpp:
	  
	  Added the ability to reuse data structures.

	* experimental/test/test_bfs_hashing.cpp:
	  
	  Added the ability to have multiple runs.

2011-08-18  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/read_rdf.hpp:
	  
	  Added some debug statements.

	* experimental/mtgl/sssp_hashing.hpp,
	  experimental/test/test_sssp_hashing_t1.cpp:
	  
	  Cleaned up unused lines.

	* experimental/mtgl/bfs_hashing.hpp,
	  experimental/test/test_bfs_hashing.cpp,
	  experimental/test/test_bfs_hashing_t1.cpp:
	  
	  Adding capability for bfs using hashing scheme.

	* experimental/mtgl/bfs_hashing.hpp:
	  
	  First attempt at breadth first search.

2011-08-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  Slight improvements to thread_adjacency_iterator and
	  thread_out_edge_iterator.

	* experimental/mtgl/maximum_density_subgraph.hpp, mtgl/Makefile.am,
	  mtgl/maximum_density_subgraph.hpp:
	  
	  Moves maximum_density_subgraph.hpp to experimental/ (#4039).

2011-08-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am:
	  
	  Fixes makefile so build doesn't fail.

2011-08-11  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Hopefully fixed issue with numerical instability.

2011-08-11  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/breadth_first_search_mtgl.hpp,
	  experimental/mtgl/disjoint_paths_max_flow.hpp,
	  experimental/test/test_dpmf.cpp,
	  experimental/test/test_dpmf_small.cpp, mtgl/Makefile.am,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, test/test_dpmf.cpp,
	  test/test_dpmf_small.cpp:
	  
	  Addresses the following:
	  - Moves disjoint_paths_max_flow.hpp to experimental/ (#4037).
	  - Moves breadth_first_search_mtgl.hpp to experimental/ (#4038).

2011-08-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp,
	  mtgl/compressed_sparse_row_graph.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp:
	  
	  Addresses the following:
	  - Updates bfs to use thread iterators (#4034).
	  - Updates the wrapper adapters to include thread iterator
	  functions (#4035).

	* mtgl/edmonds_karp_max_flow.hpp:
	  
	  Update the Edmonds-Karp maximum flow algorithm to use a
	  bidirectional
	  BFS (basically an st search) to find the path. This can
	  drastically
	  reduce the amount of work done for certain types of graphs.

	* test/test_edmonds_karp.cpp, test/test_edmonds_karp_small.cpp:
	  
	  Small update to debug printing.

2011-08-09  Greg Mackey <gemacke@sandia.gov>

	* mtgl/edmonds_karp_max_flow.hpp, test/test_edmonds_karp.cpp,
	  test/test_edmonds_karp_small.cpp:
	  
	  Updates to debug output.

	* experimental/mtgl/connectivity_visitor.hpp,
	  experimental/mtgl/st_connectivity.hpp:
	  
	  Moving the visitor for st_connectivity into the main file and
	  getting rid of the visitor file.

	* mtgl/edmonds_karp_max_flow.hpp:
	  
	  Get rid of variable used only for debugging.

2011-08-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/edmonds_karp_max_flow.hpp:
	  
	  Adding debug output.

2011-08-04  Greg Mackey <gemacke@sandia.gov>

	* mtgl/edmonds_karp_max_flow.hpp:
	  
	  Write custom version of bfs to stop the search when the sink is
	  reached.

	* mtgl/edmonds_karp_max_flow.hpp:
	  
	  A couple of small improvements.

	* mtgl/edmonds_karp_max_flow.hpp, test/test_dpmf.cpp,
	  test/test_edmonds_karp.cpp:
	  
	  Get rid of a memory leak in the test and slight performance
	  improvement
	  in edmonds karp by declaring memory once outside of a loop.

2011-08-04  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/sssp_hashing.hpp:
	  
	  Changed to thread nomenclatures instead of stream

2011-08-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/edmonds_karp_max_flow.hpp,
	  mtgl/pseudo_diameter.hpp, test/test_dpmf.cpp,
	  test/test_edmonds_karp.cpp, test/test_edmonds_karp_small.cpp:
	  
	  Adds a version of Edmonds-Karp max flow algorithm (#4033).
	  Changes usages of #pragma noalias to #pragma mta noalias to be a
	  bit
	  more specific.

2011-08-03  cralph

	* experimental/test/test_phase2g.cpp:
	  
	  Version for alenex.

2011-08-02  cralph

	* experimental/test/test_phase2a.cpp,
	  experimental/test/test_phase2b.cpp:
	  
	  phase 2 tests for alenex

	* experimental/test/test_phase2e.cpp:
	  
	  Ullmann

	* experimental/test/test_phase2d.cpp:
	  
	  Simplified Ullmann

2011-07-29  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/sssp_hashing.hpp:
	  
	  Organized timing info better.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Change pragmas for mtgl_timing to mtgl_timing1

	* experimental/test/test_sssp_hashing.cpp:
	  
	  Added more timing info on tests.

	* experimental/test/test_sssp_hashing.cpp:
	  
	  Changed error message.

	* experimental/mtgl/sssp_hashing.hpp:
	  
	  Whitespace changes.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Fixed one-off error on edge comparison.

2011-07-28  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/sssp_hashing.hpp:
	  
	  Added support for parents.

	* experimental/test/test_sssp_hashing_t1.cpp:
	  
	  Added check of parents.

	* experimental/test/test_sssp_hashing.cpp:
	  
	  Added check of parents

	* experimental/mtgl/sssp_hashing.hpp:
	  
	  Removed unused line.

	* experimental/test/test_sssp_hashing.cpp:
	  
	  Was missing thread local declaration of variables.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Modified timing pragmas to make them less important.

	* experimental/test/test_sssp_hashing.cpp:
	  
	  Allows you to load a file and check results against
	  deltastepping.

2011-07-27  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/sssp_hashing.hpp,
	  experimental/test/test_sssp_hashing_t1.cpp:
	  
	  Fixed error in creation of edge weights.

	* experimental/mtgl/sssp_hashing.hpp,
	  experimental/test/test_sssp_hashing_t1.cpp:
	  
	  Working pretty well.

2011-07-26  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/contraction_adapter.hpp,
	  experimental/mtgl/depth_first_search_visitor.hpp,
	  experimental/mtgl/induced_subgraph.hpp,
	  experimental/mtgl/snl_community.hpp,
	  experimental/mtgl/st_search.hpp,
	  experimental/mtgl/stinger_graph.hpp,
	  experimental/mtgl/stinger_graph_adapter.hpp,
	  experimental/mtgl/strongly_connected_components_dfs.hpp,
	  experimental/mtgl/topsort.hpp, mtgl/adjacency_list.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/connected_components.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_adapter.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/metrics.hpp, mtgl/psearch.hpp,
	  mtgl/stinger_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/visit_adj.hpp, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Gets rid of the other() function (#4032).

2011-07-25  Greg Mackey <gemacke@sandia.gov>

	* test/test_partitioning_schemes.cpp:
	  
	  Performance updates to using thread iterators.
	  - Use dynamic scheduling.
	  - Instead of getting a begin and an end iterator, just get a
	  single
	  iterator. Getting a thread iterator is expensive, and comparing
	  two
	  thread iterators is more expensive than comparing two integers.

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/filter_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/stinger_graph.hpp, mtgl/stinger_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_table_adapter.hpp,
	  test/test_partitioning_schemes.cpp:
	  
	  Adds thread iteration (#4030).
	  Adds an implementation of stinger (#4031).

2011-07-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/connected_components.hpp,
	  mtgl/subgraph_isomorphism.hpp, test/test_expand_one_edge.cpp:
	  
	  Adds visit_test() to new bfs (#4028).
	  Updates subgraph_isomorphism() to use new bfs (#4029).
	  Changes all vertex_descriptor and edge_descriptor paramters to
	  all bfs
	  visitor functions to be pass by reference.

2011-07-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp, mtgl/vertex_betweenness.hpp,
	  test/test_breadth_first_search.cpp,
	  test/test_vertex_betweenness.cpp:
	  
	  Adds a version of bfs that takes the buffer and degree
	  accumulation array
	  as parameters to reduce memory allocations and deallocations
	  (#4027).

2011-07-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Slight updates to vertex betweenness algorithm.

	* mtgl/breadth_first_search.hpp, mtgl/vertex_betweenness.hpp,
	  test/test_breadth_first_search.cpp:
	  
	  The user now has access to the Q in bfs (#4026). I also updated
	  vertex_betweenness.hpp to use breadth_first_search.hpp instead of
	  breadth_first_search_mtgl.hpp.

	* experimental/mtgl/pseudo_diameter.hpp,
	  experimental/test/test_pseudo_diameter.cpp,
	  mtgl/breadth_first_search.hpp, mtgl/pseudo_diameter.hpp,
	  test/test_breadth_first_search.cpp,
	  test/test_pseudo_diameter.cpp:
	  
	  - Added user access to the color map in bfs (#4020).
	  - Fixed pseudo-diameter algorithm and added it back into the main
	  library (#4024).

	* mtgl/vertex_betweenness.hpp, test/test_vertex_betweenness.cpp:
	  
	  Improves the memory usage of the vertex betweenness algorithm
	  (#4025).

2011-07-19  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/multimap.hpp:
	  
	  Still in transition.

2011-07-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_adapter.hpp, test/test_property_map.cpp:
	  
	  Fixes compile error when using vertex_property_map or
	  edge_property_map
	  with wrapper adapters (#4023).

2011-07-18  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/breadth_first_search.hpp,
	  experimental/mtgl/breadth_first_search_old.hpp,
	  experimental/mtgl/connectivity_visitor.hpp,
	  experimental/mtgl/k_distance_neighborhood.hpp,
	  experimental/mtgl/st_connectivity.hpp,
	  experimental/mtgl/st_search.hpp,
	  experimental/test/test_allvisit.cpp,
	  mtgl/breadth_first_search.hpp, mtgl/connected_components.hpp,
	  test/test_expand_one_edge.cpp:
	  
	  Fix compile bugs introduced in previous checkin. Also move
	  experimental/mtgl/breadth_first_search.hpp to
	  breadth_first_search_old.hpp
	  to avoid any confusion with mtgl/breadth_first_search.hpp.

	* mtgl/breadth_first_search.hpp,
	  test/test_breadth_first_search.cpp:
	  
	  Provides a couple of improvements to bfs.
	  - Switches to using out edge iteration in bfs (#4021).
	  - Enhances the bfs visitor with additional hooks (#4022).

2011-07-14  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/recursive_dcsc.hpp,
	  experimental/test/test_encount.cpp,
	  experimental/test/test_pagerank_bidir.cpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/pagerank.hpp:
	  
	  Several files included breadth_first_search_mtgl.hpp but didn't
	  use
	  anything from the header file. Get rid of the include where it
	  isn't
	  necessary. Also fixed a memory leak in disjoint_paths_max_flow.

	* mtgl/dynamic_array.hpp, test/test_dynamic_array.cpp:
	  
	  Fixes error where iostream needed to be included when compiling
	  with
	  '-D CHECK_BOUNDS' (#2853).

	* mtgl/dynamic_array.hpp:
	  
	  Fixes an issue where the bounds are checked incorrectly when
	  bounds
	  checking is turned on (#2852).

	* experimental/mtgl/strongly_connected_components_dfs.hpp,
	  experimental/test/test_allvisit.cpp,
	  experimental/test/test_isomorphism_ullman.cpp,
	  experimental/test/test_snl_community3.cpp,
	  experimental/test/test_vf2_isomorphism.cpp, mtgl/Makefile.am,
	  mtgl/bfs.hpp, mtgl/bfs_lb.hpp, mtgl/bfs_lb_qt.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/breadth_first_search_qt.hpp, mtgl/components_visitor.hpp,
	  mtgl/connected_components.hpp, test/test_bfs.cpp,
	  test/test_breadth_first_search.cpp, test/test_cc.cpp,
	  test/test_expand_one_edge.cpp:
	  
	  Addresses a couple of tickets related to bfs:
	  - Get rid of bfs.hpp and replace with functions from bfs_lb.hpp
	  (#4018).
	  - Move bfs_lb.hpp to breadth_first_search.hpp (#4019).

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Addresses several issues:
	  - Update bfs functions in bfs_lb.hpp to use new partitioning
	  scheme (#4014).
	  - Refactor breadth_first_search() in terms of expand_one_edge()
	  (#4015).
	  - Calculate the parent array for bfs in the visitor instead of
	  directly in the code ($4016).

2011-07-08  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  qthreads support

2011-07-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp:
	  
	  Makes all graph iterators' operator[] be const (#4013).

2011-07-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/maxheap.h, mtgl/subgraph_adapter.hpp, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Further addresses #4011.

	* mtgl/subgraph_adapter.hpp:
	  
	  Moves critical code out of asserts (#4009).

	* experimental/mtgl/find_bipartite.hpp,
	  experimental/mtgl/rewire_switching.hpp,
	  experimental/mtgl/ullman.hpp, experimental/mtgl/vf2.hpp,
	  experimental/test/test_vf2.cpp:
	  
	  Fixes #4010 in the experimental directory.

	* mtgl/maxheap.h, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp, mtgl/ufl.h,
	  mtgl/vektor.h, mtgl/vertex_betweenness.hpp, mtgl/wcnm.hpp,
	  test/test_vertex_betweenness.cpp, test/ufl.cpp:
	  
	  Gets rid of all 'using namespace' statements in library files
	  (#4010).

	* mtgl/dynamic_array.hpp, mtgl/subgraph_isomorphism.hpp:
	  
	  Fixes memory leaks in subgraph_isomorphism.hpp and
	  dynamic_array.hpp (#4012).

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/dynamic_array.hpp, mtgl/random_walk.hpp, mtgl/wcnm.hpp:
	  
	  Fixes signed vs. unsigned compiler warnings when compiling in
	  Visual C++ (#4011).

2011-07-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Fixes parallelization of memory allocation in vertex_betweeness()
	  (#4008).

2011-06-29  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Changed to debug statements.

2011-06-28  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Debugging.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Fixed error.

2011-06-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/wcnm.hpp:
	  
	  I recently change a paramter to wcnm to be pass-by-reference. I
	  forgot to
	  delete the default value. This fixes that.

2011-06-24  Eric Goodman <elgoodm@sandia.gov>

	* experimental/mtgl/stream_counter.hpp:
	  
	  Fixed duplicate declaration problem.

	* experimental/mtgl/stream_counter.hpp:
	  
	  Changed one more determine_beg_end

	* experimental/mtgl/stream_counter.hpp:
	  
	  Fixed determine_beg_end

	* experimental/mtgl/stream_counter.hpp:
	  
	  Added in_edge load balancer.

2011-06-24  Greg Mackey <gemacke@sandia.gov>

	* test/test_partitioning_schemes.cpp:
	  
	  Adding a test of the partitioning schemes.

2011-06-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  Backing out the change for #4006. Turns out without this array, a
	  compiler
	  bug happens that skews the results.

	* mtgl/partitioning.hpp, mtgl/triangles.hpp:
	  
	  Address the following:
	  - Adds manhattan partitioning functions (#4004).
	  - Updates triangles.hpp to use the manhattan partitioning
	  functions (#4005).
	  - Gets rid of an unneeded extra array in the triangles algorithm
	  (#4006).
	  - Fixes a bug where the load balancing triangle algorithm doesn't
	  work
	  if the number of vertices is less than 1024 (#4007).

	* experimental/mtgl/multimap.hpp, experimental/mtgl/read_rdf.hpp,
	  experimental/mtgl/stream_counter.hpp,
	  experimental/test/dna_sorting.cpp,
	  experimental/test/gen_zipfs.cpp,
	  experimental/test/hashing_integers.cpp,
	  experimental/test/hashing_integers_ca_k.cpp,
	  experimental/test/hashing_integers_ca_u.cpp,
	  experimental/test/hashing_integers_co_k.cpp,
	  experimental/test/hashing_integers_co_u.cpp,
	  experimental/test/hashing_integers_hh_k.cpp,
	  experimental/test/hashing_integers_hh_u.cpp,
	  experimental/test/test_goodman_bfs.cpp,
	  experimental/test/test_goodman_bfs_first_hash.cpp,
	  experimental/test/test_goodman_bfs_mod.cpp,
	  experimental/test/test_goodman_cc.cpp,
	  experimental/test/test_linear_recurrence.cpp,
	  experimental/test/test_load_balance_edges.cpp,
	  experimental/test/test_static_multimap.cpp, mtgl/hachar.hpp,
	  mtgl/mtgl_string.hpp, mtgl/partitioning.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/triangles.hpp, mtgl/util.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Refactors the partitioning functions (#4003). Also, reformats
	  triangles.hpp.

2011-06-22  Greg Mackey <gemacke@sandia.gov>

	* ChangeLog:
	  
	  Fix wrong date. It's 2011, not 2001. :)

	* ChangeLog:
	  
	  Rebranding from 1.1 to 1.0.

	* doc/Doxyfile:
	  
	  Rebranding from 1.1 to 1.0.

	* mtgl/util.hpp:
	  
	  Rename library math.h to cmath. Get rid of include of omp.h as it
	  isn't
	  needed in this file anymore.

2011-06-22  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  load balancing, Greg style. This manual code should be replaced
	  by a thread_iterator once that makes it into the trunk.

2011-06-21  Greg Mackey <gemacke@sandia.gov>

	* ChangeLog:
	  
	  Add the changelog to the repository.

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixes an incorrect value returned by
	  xmt_hash_table::get_mmap_size()
	  (#4002).

	* test/Makefile.am:
	  
	  Take test_indset out of the makefile as it has a runtime error
	  on the XMT.

2011-06-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/independent_set.hpp, test/test_expand_one_edge.cpp,
	  test/test_indset.cpp:
	  
	  Clean up independent_set.hpp and test_indset.cpp.

2011-06-16  Greg Mackey <gemacke@sandia.gov>

	* Makefile.am, configure.ac:
	  
	  The configure script now deletes the file a.out.pl that it
	  generates
	  on the XMT.

	* AUTHORS, COPYRIGHT, FIRST_TUTORIAL, INSTALL, LICENSE, README,
	  doc/Doxyfile, doc/Doxyfile_wiki, mtgl/connected_components.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/independent_set.hpp,
	  mtgl/maxheap.h, mtgl/mtgl_adapter.hpp, mtgl/vektor.h,
	  mtgl/wcnm.hpp, test, test/test_adjacency_iteration.cpp,
	  test/test_indset.cpp, test/test_wcnm.cpp:
	  
	  Addresses several issues:
	  - Fixes a bug in wcnm that happens if the user requests fewer
	  communities
	  than the minimum number of communities possible for the graph.
	  - Fixes numerous memory leaks in the main tests.
	  - Improves the doxyfile for producing stand-alone documentation.
	  - Adds a new doxyfile (Doxyfile_wiki) for generating
	  documentation for
	  the wiki.
	  - Updates the README, etc. files to be current.

2011-06-06  cralph

	* experimental/test/test_phase1d.cpp,
	  experimental/test/test_phase1e.cpp,
	  experimental/test/test_phase1f.cpp:
	  
	  additive phase 1

2011-06-06  kddevin

	* mtgl/mtgl_io.hpp:
	  
	  Minor change; Jon saw odd behavior on bombadill.

2011-06-05  cralph

	* experimental/test/test_phase1.cpp,
	  experimental/test/test_phase1b.cpp,
	  experimental/test/test_phase1c.cpp,
	  experimental/test/test_phase1d.cpp,
	  experimental/test/test_phase1e.cpp,
	  experimental/test/test_phase1f.cpp:
	  
	  phase1 test cases

2011-06-05  Jon Berry <jberry@sandia.gov>

	* experimental/test/test_subiso.cpp:
	  
	  the beginnings of a generic test

2011-06-01  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_triangles.hpp:
	  
	  fully recursive walk-level constraints in subgraph isomorphism.

2011-06-01  cralph

	* experimental/test/test_ullman.cpp:
	  
	  phase1 update

2011-06-01  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp:
	  
	  making subgraph_isomorphism fully recursive via an array of
	  level-based constraints. With multiple constraints,
	  subiso_triangles
	  works for some small examples, but faults on er 12 .027.
	  Reproduce
	  this by extending the walk to one more vertex and using the array
	  {(0,3), (1,4)}.

2011-05-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp, test/test_xmt_hash_table.cpp:
	  
	  Fix bug with xmt_hash_table::resize() that was introduced with a
	  recent update.

2011-05-27  Greg Mackey <gemacke@sandia.gov>

	* experimental/mtgl/breadth_first_search.hpp,
	  experimental/mtgl/connection_subgraphs.hpp,
	  experimental/mtgl/connectivity_visitor.hpp,
	  experimental/mtgl/contraction_adapter.hpp,
	  experimental/mtgl/depth_first_search.hpp,
	  experimental/mtgl/depth_first_search_visitor.hpp,
	  experimental/mtgl/find_bipartite.hpp,
	  experimental/mtgl/induced_subgraph.hpp,
	  experimental/mtgl/isomorphism_ullman.hpp,
	  experimental/mtgl/jaccard.hpp,
	  experimental/mtgl/k_distance_neighborhood.hpp,
	  experimental/mtgl/mtaqsort.hpp,
	  experimental/mtgl/mtgl_search_edgetime.hpp,
	  experimental/mtgl/neighborhoods.hpp,
	  experimental/mtgl/pseudo_diameter.hpp,
	  experimental/mtgl/quicksort.hpp, experimental/mtgl/read_rdf.hpp,
	  experimental/mtgl/recursive_dcsc.hpp,
	  experimental/mtgl/rewire_switching.hpp,
	  experimental/mtgl/scc_visitor.hpp,
	  experimental/mtgl/serqsort.hpp,
	  experimental/mtgl/snl_community.hpp,
	  experimental/mtgl/snl_community2.hpp,
	  experimental/mtgl/snl_community3.hpp,
	  experimental/mtgl/st_connectivity.hpp,
	  experimental/mtgl/st_search.hpp,
	  experimental/mtgl/st_subgraph_search.hpp,
	  experimental/mtgl/stinger_graph.hpp,
	  experimental/mtgl/stinger_graph_adapter.hpp,
	  experimental/mtgl/strongly_connected_components.hpp,
	  experimental/mtgl/strongly_connected_components_dfs.hpp,
	  experimental/mtgl/topsort.hpp, experimental/mtgl/treap.hpp,
	  experimental/mtgl/triangles_phases.hpp,
	  experimental/mtgl/ull_state.hpp, experimental/mtgl/ullman.hpp,
	  experimental/mtgl/undirected_triads.hpp,
	  experimental/mtgl/vf2.hpp, experimental/mtgl/vf2_isomorphism.hpp,
	  experimental/mtgl/vf2_state.hpp,
	  experimental/mtgl/vf_isomorphism_base.hpp,
	  experimental/test/find_bipartite.cpp,
	  experimental/test/find_chordless_5-cycle.cpp,
	  experimental/test/find_chordless_5-cycle2.cpp,
	  experimental/test/gen_rand.cpp, experimental/test/gen_zipfs.cpp,
	  experimental/test/test_allvisit.cpp,
	  experimental/test/test_assortativity.cpp,
	  experimental/test/test_cluster_coefficient.cpp,
	  experimental/test/test_community.cpp,
	  experimental/test/test_community2.cpp,
	  experimental/test/test_community3.cpp,
	  experimental/test/test_connection_subgraphs.cpp,
	  experimental/test/test_contraction.cpp,
	  experimental/test/test_degree_degree_correlation.cpp,
	  experimental/test/test_encount.cpp,
	  experimental/test/test_find_degree_distribution.cpp,
	  experimental/test/test_find_triangles.cpp,
	  experimental/test/test_independent_set.cpp,
	  experimental/test/test_isomorphism_ullman.cpp,
	  experimental/test/test_jaccard.cpp,
	  experimental/test/test_knn.cpp,
	  experimental/test/test_modularity.cpp,
	  experimental/test/test_neighborhoods.cpp,
	  experimental/test/test_newmanbenchmark.cpp,
	  experimental/test/test_pagerank_bidir.cpp,
	  experimental/test/test_pseudo_diameter.cpp,
	  experimental/test/test_rectangles.cpp,
	  experimental/test/test_snl_community3.cpp,
	  experimental/test/test_st_connectivity.cpp,
	  experimental/test/test_st_search.cpp,
	  experimental/test/test_stinger_graph.cpp,
	  experimental/test/test_strongly_connected_components.cpp,
	  experimental/test/test_strongly_connected_components_dfs.cpp,
	  experimental/test/test_treap.cpp,
	  experimental/test/test_ullman.cpp,
	  experimental/test/test_undirected_triads.cpp,
	  experimental/test/test_vf2.cpp,
	  experimental/test/test_vf2_isomorphism.cpp, mtgl/Makefile.am,
	  mtgl/breadth_first_search.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/connectivity_visitor.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/depth_first_search.hpp, mtgl/depth_first_search_visitor.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/find_bipartite.hpp,
	  mtgl/induced_subgraph.hpp, mtgl/isomorphism_ullman.hpp,
	  mtgl/jaccard.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/mtaqsort.hpp, mtgl/mtgl_io.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/mtgl_test.hpp,
	  mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/quicksort.hpp, mtgl/read_rdf.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/rewire_switching.hpp,
	  mtgl/scc_visitor.hpp, mtgl/serqsort.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/st_connectivity.hpp, mtgl/st_search.hpp,
	  mtgl/st_subgraph_search.hpp, mtgl/stinger_graph.hpp,
	  mtgl/stinger_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp, mtgl/topsort.hpp,
	  mtgl/treap.hpp, mtgl/triangles.hpp, mtgl/triangles_phases.hpp,
	  mtgl/ufl.h, mtgl/ull_state.hpp, mtgl/ullman.hpp,
	  mtgl/undirected_triads.hpp, mtgl/vf2.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, test/find_bipartite.cpp,
	  test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp, test/gen_rand.cpp,
	  test/gen_zipfs.cpp, test/persist_graph.cpp,
	  test/test_allvisit.cpp, test/test_assortativity.cpp,
	  test/test_badrank.cpp, test/test_cluster_coefficient.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connection_subgraphs.cpp,
	  test/test_contraction.cpp,
	  test/test_degree_degree_correlation.cpp, test/test_encount.cpp,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_triangles.cpp, test/test_independent_set.cpp,
	  test/test_indset.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_jaccard.cpp, test/test_knn.cpp,
	  test/test_modularity.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_pseudo_diameter.cpp,
	  test/test_read_graph.cpp, test/test_rectangles.cpp,
	  test/test_snl_community3.cpp, test/test_st_connectivity.cpp,
	  test/test_st_search.cpp, test/test_stinger_graph.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_treap.cpp, test/test_ullman.cpp,
	  test/test_undirected_triads.cpp, test/test_vf2.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Moves a bunch of code to the experimental directory (#3998), and
	  repairs the fallout.

	* mtgl/shared_ptr.hpp, test/test_shared_ptr.cpp:
	  
	  Add explicit cast from a shared_ptr to a bool. This allows one to
	  test a shared_ptr like a normal one as in if(shared_ptr).

	* mtgl/dneighborhoods.hpp, mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  Change wcnm to take the number of communities you want vs. the
	  number
	  of merges. Fix some compiler warnings in dneighborhoods.hpp when
	  compiled
	  with DEBUG.

2011-05-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/triangles.hpp, mtgl/vektor.h, mtgl/wcnm.hpp,
	  test/Makefile.am:
	  
	  Fix an error in vektor.h, and fix some compiler warnings on the
	  XMT.

	* doc/uncrustify.cfg:
	  
	  Small update to uncrustify config file.

	* test/test_persist_xht.cpp:
	  
	  Small update to output.

	* mtgl/read_mmap.hpp, test/persist_graph.cpp,
	  test/test_persist_xht.cpp:
	  
	  The XMT required another library to be included for the mmapping
	  stuff.

	* test/Makefile.am:
	  
	  Adding persist_graph.cpp to the makefile.

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/graph_traits.hpp, mtgl/mmap_traits.hpp, mtgl/mtgl_test.hpp,
	  mtgl/read_mmap.hpp, mtgl/xmt_hash_table.hpp,
	  test/persist_graph.cpp, test/test_mmap.cpp,
	  test/test_persist_xht.cpp:
	  
	  This commit addresses several issues:
	  - Add the ability to mmap an xmt_hash_table. (#3999)
	  - Fixes a bug where initialized_by_mmap wasn't initialized in
	  compressed_sparse_row_graph in the copy constructor.
	  - Rename MMAP_NOT_ALLOWED to MMAP_TYPE_NOT_DEFINED.
	  - Set the default value of mmap_traits:type to be
	  MMAP_TYPE_NOT_DEFINED.
	  - Change graph direction_type to be a static const unsigned
	  long instead of an enum.
	  - Change graph mmap_traits::type to be a static const unsigned
	  long instead of an enum.
	  - Arrays should now use mmap_traits<T>::type instead of
	  mmap_traits<T*>::type.

2011-05-24  Greg Mackey <gemacke@sandia.gov>

	* experimental, experimental/mtgl,
	  experimental/mtgl/allocation_pool.hpp,
	  experimental/mtgl/diffraction_array.hpp,
	  experimental/mtgl/hotel_hash_set.hpp,
	  experimental/mtgl/lp_hash_set.hpp,
	  experimental/mtgl/multimap.hpp,
	  experimental/mtgl/multimap_old.hpp,
	  experimental/mtgl/random_number_generator.hpp,
	  experimental/mtgl/rdf_quad.hpp,
	  experimental/mtgl/simple_dynamic_array.hpp,
	  experimental/mtgl/stream_counter.hpp, experimental/test,
	  experimental/test/dna_sorting.cpp,
	  experimental/test/hashing_integers.cpp,
	  experimental/test/hashing_integers_ca_k.cpp,
	  experimental/test/hashing_integers_ca_u.cpp,
	  experimental/test/hashing_integers_co_k.cpp,
	  experimental/test/hashing_integers_co_u.cpp,
	  experimental/test/hashing_integers_hh_k.cpp,
	  experimental/test/hashing_integers_hh_u.cpp,
	  experimental/test/hashing_integers_mod.cpp,
	  experimental/test/hashing_strings.cpp,
	  experimental/test/test_goodman_bfs.cpp,
	  experimental/test/test_goodman_bfs_first_hash.cpp,
	  experimental/test/test_goodman_bfs_mod.cpp,
	  experimental/test/test_goodman_cc.cpp,
	  experimental/test/test_hachar_eric.cpp,
	  experimental/test/test_hotel_hash_set.cpp,
	  experimental/test/test_hotel_hash_set_charstar.cpp,
	  experimental/test/test_linear_recurrence.cpp,
	  experimental/test/test_load_balance_edges.cpp,
	  experimental/test/test_lp_hash_set.cpp,
	  experimental/test/test_lp_hash_set_charstar.cpp,
	  experimental/test/test_random_number_generator.cpp,
	  experimental/test/test_static_multimap.cpp,
	  experimental/test/test_xmt_hash_table_eric.cpp,
	  experimental/test/test_xmt_hash_table_eric_charstar.cpp,
	  mtgl/Makefile.am, mtgl/allocation_pool.hpp, mtgl/closure.hpp,
	  mtgl/diffraction_array.hpp, mtgl/hotel_hash_set.hpp,
	  mtgl/lp_hash_set.hpp, mtgl/multimap.hpp, mtgl/multimap_old.hpp,
	  mtgl/random_number_generator.hpp, mtgl/rdf_quad.hpp,
	  mtgl/simple_dynamic_array.hpp, mtgl/stream_counter.hpp,
	  test/dna_sorting.cpp, test/hashing_integers.cpp,
	  test/hashing_integers_ca_k.cpp, test/hashing_integers_ca_u.cpp,
	  test/hashing_integers_co_k.cpp, test/hashing_integers_co_u.cpp,
	  test/hashing_integers_hh_k.cpp, test/hashing_integers_hh_u.cpp,
	  test/hashing_integers_mod.cpp, test/hashing_strings.cpp,
	  test/test_goodman_bfs.cpp, test/test_goodman_bfs_first_hash.cpp,
	  test/test_goodman_bfs_mod.cpp, test/test_goodman_cc.cpp,
	  test/test_hachar_eric.cpp, test/test_hotel_hash_set.cpp,
	  test/test_hotel_hash_set_charstar.cpp,
	  test/test_linear_recurrence.cpp,
	  test/test_load_balance_edges.cpp, test/test_lp_hash_set.cpp,
	  test/test_lp_hash_set_charstar.cpp,
	  test/test_random_number_generator.cpp,
	  test/test_static_multimap.cpp, test/test_xmt_hash_table_eric.cpp,
	  test/test_xmt_hash_table_eric_charstar.cpp:
	  
	  Moves code into experimental directory. (#3998)
	  Deletes closure.hpp since it isn't used by anything.

2011-05-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/maxheap.h,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_connectivity.hpp,
	  mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  Fix errors with compilation due to #if used when #ifdef should
	  have
	  been used.

2011-05-19  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/stream_counter.hpp:
	  
	  Fixed misorder of where determine_beg_end is called.

2011-05-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  Adds the ability to stop wcnm after n merges. (#3997)

	* mtgl/bfs.hpp, mtgl/disjoint_paths_max_flow.hpp, mtgl/maxheap.h,
	  mtgl/multimap.hpp, mtgl/vektor.h, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fix some errors that cause compile problems on Windows. Reformat
	  wcnm.hpp, maxheap.h, and vektor.h.

2011-05-13  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/stream_counter.hpp:
	  
	  Some fixes.

2011-05-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/stream_counter.hpp, mtgl/util.hpp:
	  
	  Move linear_recurrence() and load_balance_out_edges() from
	  util.hpp
	  to stream_counter.hpp as they depend on function defined there.

	* mtgl/util.hpp:
	  
	  Getting rid of including stream_counter.hpp in util.hpp as it is
	  causing linking errors for everyone.

2011-05-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/triangles.hpp, mtgl/wcnm.hpp,
	  test/test_wcnm.cpp:
	  
	  Format wcnm to be readable. Get rid of unused code. Make prints
	  only
	  happen in include files if DEBUG is defined.

2011-05-12  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/subiso_5cycles.cpp:
	  
	  titan compilation.

2011-05-11  Greg Mackey <gemacke@sandia.gov>

	* configure.ac:
	  
	  No longer pass '-g' as a compiler option (#3996).

	* mtgl/bfs_lb.hpp:
	  
	  Update expand_one_edge to use the exact algorithm used by
	  breadth_first_search. It was slightly behind.

	* doc/uncrustify.cfg:
	  
	  Small change to uncrustify config file.

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Get rid of an unneeded array in breadth_first_search() and
	  expand_one_edge().

2011-05-10  William McLendon <wcmclen@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  BUG: removed extra #include<qthread.h> that was outside the
	  #ifdef USING_QTHREADS guard.

2011-05-09  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.hpp:
	  
	  Added some documentation.

	* test/test_load_balance_edges.cpp:
	  
	  Checks total load now.

	* mtgl/util.hpp:
	  
	  Fixed error with setting edge start.

	* test/test_load_balance_edges.cpp:
	  
	  Does a more complicated test now, too.

	* test/test_load_balance_edges.cpp:
	  
	  Added a check.

	* mtgl/util.hpp:
	  
	  Removed omp barrier.

	* test/test_load_balance_edges.cpp:
	  
	  Tests balance out edges.

	* mtgl/util.hpp:
	  
	  Added a method to load balance the out edges from a list of
	  vertices.

2011-05-06  Jon Berry <jberry@sandia.gov>

	* mtgl/shiloach_vishkin.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/subiso_triangles.cpp:
	  
	  Qthreading of subgraph isomorphism subproblems

2011-05-05  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.hpp:
	  
	  Added stream_counter include.

	* test/test_xmt_hash_table.cpp:
	  
	  Added some more tests with random integers instead of contiguous
	  ranges.

	* test/test_linear_recurrence.cpp:
	  
	  Added xmt-specific test.

	* test/test_linear_recurrence.cpp:
	  
	  Tests manual linear recurrence.

	* mtgl/util.hpp:
	  
	  Adding manual linear recurrence.

	* mtgl/multimap.hpp:
	  
	  Fixed omp error.

2011-05-03  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/subgraph_isomorphism.hpp:
	  
	  The new vertex_partition_iterator can retrieve the input for
	  constructing
	  a subgraph adapter for each partition of a vertex partitioning
	  such as
	  connected components. This is now being used in subgraph
	  isomorphism to
	  avoid O(n^2) computation in the case where where are O(n)
	  components.

2011-05-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp, test/test_xmt_hash_table.cpp:
	  
	  Adding num_deleted_entries() and clear_deleted_entries() function
	  to
	  the hash table. This allows the user to empty the deleted entries
	  to
	  improve performance when there get to be too many in the table.

	* mtgl/xmt_hash_table.hpp, test/test_xmt_hash_table.cpp:
	  
	  Modified fix to insert_reuse() to be a bit better. Fixed a couple
	  of bugs
	  in the version of insert_reuse() that takes a visitor. Added the
	  fix to
	  the version of insert_reuse() that takes a visitor. Improved the
	  formatting.
	  Changed to using define constants everywhere for the status of
	  the
	  occupied vector. Undeffed the constants at the end of the file.

2011-04-29  Eric Goodman <elgoodm@sandia.gov>

	* test/gen_rand.cpp:
	  
	  Added some timing info.

	* mtgl/multimap.hpp:
	  
	  Commented out get_max_count because it didn't seemed to be used.
	  Fixed other errors.

2011-04-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/components_visitor.hpp, mtgl/connected_components.hpp,
	  mtgl/shiloach_vishkin.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/test_cc.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_contraction.cpp, test/test_newmanbenchmark.cpp:
	  
	  Several changes related to connected_components.
	  - Got rid of old shiloach vishkin algorithm and moved newer,
	  working
	  algorithm from connected_components.hpp to shiloach_vishkin.hpp
	  and
	  renamed it to shiloach_vishkin().
	  - Got rid of a couple of unused connected components algorithms
	  in
	  connected_components.hpp.

2011-04-29  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs_lb_qt.hpp, mtgl/connected_components.hpp,
	  mtgl/random_walk.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/subiso_triangles.cpp, test/test_wcnm.cpp:
	  
	  Bug fix in subgraph isomorphism, bug identified in
	  connected_components_sv.

2011-04-29  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Made constants more file specific.

2011-04-28  Greg Mackey <gemacke@sandia.gov>

	* doc/uncrustify.cfg:
	  
	  Adding a configure file for uncrustify. This is used to make code
	  look pretty.

2011-04-28  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Has a kind of fix for the insert_reuse function, though it isn't
	  perfect.

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fixed error with update_reuse. Needed to reset the insert_pos to
	  max if the current position doesn't work, else an infinite loop
	  occurs.

2011-04-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/merge_sort.hpp:
	  
	  Remove unneeded, commented-out lines of code.

	* mtgl/merge_sort.hpp, mtgl/rewire_switching.hpp,
	  test/dna_sorting.cpp, test/hashing_integers.cpp,
	  test/hashing_integers_ca_k.cpp, test/hashing_integers_ca_u.cpp,
	  test/hashing_integers_co_k.cpp, test/hashing_integers_co_u.cpp,
	  test/hashing_integers_hh_k.cpp, test/hashing_integers_hh_u.cpp,
	  test/test_goodman_bfs.cpp, test/test_goodman_bfs_first_hash.cpp,
	  test/test_goodman_bfs_mod.cpp, test/test_goodman_cc.cpp,
	  test/test_hotel_hash_set_charstar.cpp, test/test_merge_sort.cpp:
	  
	  - Changes merge_sort() to use a comparator (#3995), and repairs
	  the fallout.
	  - Got rid of some unnecessary header file includes.
	  - Changed #include<qthread/qthread.h> to #include<qthread.h>.
	  That
	  works and is the preferred method for including qthreads.

2011-04-27  Eric Goodman <elgoodm@sandia.gov>

	* test/test_xmt_hash_table.cpp:
	  
	  Added some more checks.

2011-04-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp:
	  
	  Fixes #3994.

2011-04-27  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/stream_counter.hpp:
	  
	  Added function.

	* mtgl/stream_counter1.hpp:
	  
	  

	* mtgl/stream_counter1.hpp:
	  
	  Trying to fix version issue

2011-04-27  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/find_bipartite.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_boost_property.hpp, mtgl/random_walk.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_5cycles.hpp, mtgl/subiso_triangles.hpp,
	  mtgl/wcnm.hpp, test/Makefile.am, test/subiso_5cycles.cpp,
	  test/subiso_triangles.cpp, test/test_bfs.cpp, test/test_cc.cpp,
	  test/test_pagerank.cpp:
	  
	  Major changes to subgraph_isomorphism:
	  * partitioning by connected components reintroduced (but
	  current implementation inefficient)
	  * walk-level constraint allowed: "vertex at level i of the walk
	  must be the same as vertex at level j of the walk.
	  * don't care conditions allowed: can provide a comparator that
	  handles edge and vertex matching in a custom way by level
	  (allowing: e.g.
	  "the type of the source vertex of the edge at level i doesn't
	  matter).
	  
	  Some changes to connected components:
	  * sv can talk an edge property map instead of the old functor
	  * but this brings up in trac ticket #3992.

2011-04-27  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/stream_counter.hpp:
	  
	  Thought this was already added, but I guess not.

2011-04-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/wcnm.hpp:
	  
	  Fix a compiler warning on the XMT.

	* test/mtgl_diff_test:
	  
	  Getting rid of a file that isn't used.

	* test/CPPGraph.h, test/Graph.h, test/buildmaps.c,
	  test/buildtest.cpp, test/loadmaps.c, test/loadtest.cpp,
	  test/qalloc.c, test/qalloc.h:
	  
	  Getting rid of some old files that aren't used anymore.

	* mtgl/util.hpp:
	  
	  Got rid of unused mtgl_qthread_init().

	* mtgl/metrics.hpp, mtgl/snl_community.hpp,
	  test/test_assortativity.cpp, test/test_cluster_coefficient.cpp,
	  test/test_degree_degree_correlation.cpp,
	  test/test_find_assortativity.cpp,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp,
	  test/test_find_vertex_betweenness.cpp, test/test_modularity.cpp,
	  test/test_pseudo_diameter.cpp, test/test_vertex_betweenness.cpp:
	  
	  Rename a lot of the find_* files and algorithms to not start with
	  find_. In most cases this is unneeded as part of the name and
	  adds
	  clutter to the interface.

2011-04-26  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  small fixes.
	  4-This line, and those below, will be ignored--
	  
	  M multimap.hpp

	* mtgl/multimap.hpp:
	  
	  Fixed error on V data type.

2011-04-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/connected_components.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/generate_erdos_renyi_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/isomorphism_ullman.hpp,
	  mtgl/jaccard.hpp, mtgl/metrics.hpp, mtgl/mmap_traits.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_test.hpp,
	  mtgl/neighborhoods.hpp, mtgl/pagerank.hpp, mtgl/psearch.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/st_connectivity.hpp,
	  mtgl/triangles.hpp, mtgl/triangles_phases.hpp,
	  mtgl/undirected_triads.hpp, mtgl/util.hpp,
	  mtgl/vertex_betweenness.hpp, test/find_bipartite.cpp,
	  test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp, test/generate_euler_tour.cpp,
	  test/mtgl_test.hpp, test/rmat2file.cpp, test/subiso_5cycles.cpp,
	  test/subiso_triangles.cpp, test/test_adjacency_iteration.cpp,
	  test/test_allvisit.cpp, test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_breadth_first_search.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp, test/test_dpmf.cpp,
	  test/test_dpmf_double.cpp, test/test_dpmf_small.cpp,
	  test/test_encount.cpp, test/test_expand_one_edge.cpp,
	  test/test_filtering.cpp, test/test_find_assortativity.cpp,
	  test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_independent_set.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_jaccard.cpp,
	  test/test_knn.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_rectangles.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_st_connectivity.cpp, test/test_st_search.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_tri.cpp, test/test_undirected_triads.cpp,
	  test/test_wcnm.cpp:
	  
	  This commit addresses several issues:
	  - Adds a new test harness. (#3993)
	  - Changes a few of the algorithms that are objects to be
	  functions.
	  - Get rid of unnecessary includes in some tests.
	  - Fixes many compile bugs.
	  - Fix several bugs indicated by valgrind, mainly omitting freeing
	  memory.

2011-04-26  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp, test/test_static_multimap.cpp:
	  
	  Changed the way sets of keys and values are inserted. It is done
	  in batch.

2011-04-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/ufl.h:
	  
	  Fix namespace problems. Some classes needed to be prefixed by
	  std::.

2011-04-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_string.h, mtgl/mtgl_string.hpp,
	  test/test_mtgl_strtok.cpp:
	  
	  Get rid of mtgl_string.h since it was moved to mtgl_string.hpp.

2011-04-18  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mtgl_string.hpp:
	  
	  Was missing the first word in the tokenizing methods.

	* mtgl/mtgl_string.hpp:
	  
	  Changed name to hpp

2011-04-17  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  breaking out functions

2011-04-15  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  starting to break out functions for more flexible code
	  (forgetting xmt
	  performance for now).

	* mtgl/subiso_triangles.hpp, test/subiso_triangles.cpp:
	  
	  restoring tri-colored triangles experiment to match the paper.

2011-04-14  Jon Berry <jberry@sandia.gov>

	* mtgl/write_graphlets.hpp:
	  
	  David Gleich's "graphlets" format

2011-04-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/snl_community.hpp, mtgl/triangles.hpp,
	  mtgl/triangles_phases.hpp:
	  
	  Moved find_triangles_phases into its own file.

2011-04-13  Greg Mackey <gemacke@sandia.gov>

	* config/mtgl_check_qthreads.m4, test/Makefile.am:
	  
	  Fix a bug when configuring for qthreads and giving an install
	  directory.
	  Also, remove unnecessary inclusion of mtgl_test.hpp as a file to
	  compile
	  in the makefile.

	* INSTALL, mtgl/mtgl_config.h:
	  
	  - Removing mtgl/mtgl_config.h from the repository. Hopefully,
	  this
	  will be the last change to this file.
	  - Adding an install file.

	* test:
	  
	  Updating svn:ignore property of test/.

	* config/mtgl_check_qthreads.m4, configure.ac, mtgl/Makefile.am,
	  test/Makefile.am:
	  
	  Make the build work again. Get rid of unneeded stuff in the build
	  files and simplified them a bit.

	* mtgl/subiso_5cycles.hpp, test/mtgl_boost_test.cpp,
	  test/subiso_5cycles.cpp, test/test.cpp,
	  test/test_bidirectional_graph.cpp,
	  test/test_breadth_first_search.cpp, test/test_snapshot.cpp,
	  test/test_stinger_graph.cpp, test/test_stinger_graph1.cpp:
	  
	  - Changing the svn properties of a couple of files.
	  - Getting rid of some unneeded files.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Fix a couple of typing bugs found by Will McLendon. These were
	  due to having a big graph that has a size_type that is different
	  from the size_type of compressed_sparse_row_graph.

	* mtgl/Makefile.am, mtgl/array2d.hpp,
	  mtgl/connection_subgraphs.hpp:
	  
	  Get rid of array2d.hpp and repair the fallout.

	* mtgl/subiso_5cycles.hpp, test/subiso_5cycles.cpp:
	  
	  Fix a wrongly named header guard and a couple of compiler
	  warnings.

2011-04-13  Jon Berry <jberry@sandia.gov>

	* mtgl/subiso_5cycles.hpp, test/subiso_5cycles.cpp:
	  
	  A further example for the subgraph isomorphism paper. This
	  compares the
	  number of discovered 5-cycles with the expected number of
	  occurrences in
	  Erdos-Renyi graphs.

2011-04-12  Greg Mackey <gemacke@sandia.gov>

	* COPYRIGHT, config/mtgl_check_qthreads.m4, mtgl/Makefile.am,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/components_visitor.hpp,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/copier.hpp, mtgl/debug_utils.hpp,
	  mtgl/depth_first_search.hpp, mtgl/depth_first_search_visitor.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/generate_mesh_graph.hpp,
	  mtgl/mask_search.hpp, mtgl/mask_search_visitor.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_search_edgetime.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/vertex_betweenness.hpp, mtgl/xmt_hash_table.hpp, test,
	  test/Makefile.am, test/test_adjacency_iteration.cpp,
	  test/test_csr_graph1.cpp, test/test_csr_graph2.cpp,
	  test/test_csr_graph3.cpp, test/test_csr_graph4.cpp,
	  test/test_csr_graph5.cpp, test/test_csr_graph6.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_knn.cpp,
	  test/test_mask_search.cpp, test/test_oc.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_connectivity.cpp,
	  test/test_stinger_graph1.cpp, test/test_vf2_isomorphism.cpp,
	  tutorial, win32_example/mtgl_subiso_triangles2.sln,
	  win32_example/mtgl_subiso_triangles2/ReadMe.txt,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.cpp,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj.filters,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj.user,
	  win32_example/mtgl_subiso_triangles2/stdafx.cpp,
	  win32_example/mtgl_subiso_triangles2/stdafx.h,
	  win32_example/mtgl_subiso_triangles2/targetver.h:
	  
	  This commit contains numerous updates:
	  - Gets rid of cprops support. (#3991)
	  - Remove old files that aren't used anymore.
	  - Move print_graph_vis() out of mtgl/debug_utils.hpp into
	  mtgl/mtgl_adapter.hpp.
	  - Rename test_csr_graph6.cpp to test_adjacency_iteration.cpp.
	  - Update makefiles to compile the correct tests.

	* mtgl/adjacency_list.hpp, mtgl/hash_defs.hpp,
	  mtgl/isomorphism_ullman.hpp, mtgl/types.hpp,
	  mtgl/write_matrix_market.hpp, test/generate_euler_tour.cpp,
	  test/mtgl_test.hpp, win32/stdint.h,
	  win32_example/mtgl_subiso_triangles2/my_stdint.h,
	  win32_example/mtgl_subiso_triangles2/stdint.h:
	  
	  Addresses #3990. Removes two instances of stdint.h that are no
	  longer necessary. Although stdint.h is provided with MS Visual
	  Studio 2010, inttypes.h is not. I fixed the code to take this
	  into account.

2011-04-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp:
	  
	  Fixed source() and target() calls

2011-04-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_rmat_graph.hpp:
	  
	  Update documentation for generate_rmat_graph().

2011-04-07  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_co_k.cpp, test/hashing_integers_co_u.cpp:
	  
	  Changed %u to %lu

2011-04-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/components_visitor.hpp, mtgl/connected_components.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/snap_util.h,
	  mtgl/triangles.hpp, mtgl/types.hpp, mtgl/undirected_triads.hpp,
	  win32, win32/inttypes.h, win32/stdint.h:
	  
	  The file mtgl/types.hpp now includes inttypes.h. Since MS Visual
	  Studio before 2010 doesn't include inttypes.h or stdint.h, I've
	  added the versions from the msinttypes project. I changed all
	  files that included stdint.h to instead include mtgl/types.hpp.
	  I also changed all uses of u_int64_t to uint64_t.

2011-04-06  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_k.cpp:
	  
	  Removed hashes array

2011-04-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Fix a bug related to Qthreads.

2011-04-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Fix error with mt_lock() when using qthreads.

	* mtgl/sssp_deltastepping.hpp, mtgl/util.hpp, test/Makefile.am,
	  test/test_sssp_deltastepping.cpp:
	  
	  Make sssp_deltastepping.hpp work with qthreads. This involved
	  changing the types for many of the integers in the program from
	  int to long. I also cleaned up the algorithm a fair bit and
	  fixed a few bugs in test_sssp_deltastepping.cpp.

	* test/Makefile.am:
	  
	  Don't compile test_sssp_deltastepping.cpp as it doesn't compile
	  correctly with qthreads. Will make changes and reenable later.

2011-04-05  kbwheel

	* mtgl/util.hpp:
	  
	  must have dropped an argument somehow

2011-04-05  Greg Mackey <gemacke@sandia.gov>

	* config/mtgl_check_qthreads.m4, config/mtgl_compiler_option.m4,
	  config/mtgl_compiler_options.m4, configure.ac,
	  test/rmat2file.cpp:
	  
	  Make --with-qthreads work again for configure. Clean up the
	  autoconf
	  files, and get rid of a compile warning when compiling with
	  qthreads.

2011-04-04  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_u.cpp:
	  
	  Removed unnecessary hashes array.

2011-04-04  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_config.h:
	  
	  Adding a placeholder version of mtgl_config.h that prints an
	  error if it
	  is included before running autorconf / configure. The file is
	  only
	  included now if the type sizes can't be detected based on
	  preprocessor
	  macros.

	* config/mtgl_check_qthreads.m4, mtgl/induced_subgraph.hpp,
	  mtgl/types.hpp, mtgl/util.hpp, test/qalloc.c, test/test_bfs.cpp,
	  test/test_breadth_first_search.cpp:
	  
	  Addresses #3987.

	* mtgl/bfs_lb_qt.hpp, mtgl/read_matrix_market_qt.hpp:
	  
	  Fix a few compile errors with qthreads.

2011-04-04  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_ca_u.cpp:
	  
	  Forgot one record_num_threads

	* test/hashing_integers_ca_k.cpp:
	  
	  Forgot about record_num_threads on one line.

2011-04-02  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_ca_u.cpp:
	  
	  Now it's working

	* test/hashing_integers_ca_u.cpp:
	  
	  Works on the XM

2011-04-01  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers.cpp, test/hashing_integers_ca_k.cpp,
	  test/hashing_integers_co_k.cpp, test/hashing_integers_co_u.cpp,
	  test/hashing_integers_hh_k.cpp, test/hashing_integers_hh_u.cpp:
	  
	  Shaping up. ca_k now works on XMT.

	* test/hashing_integers_hh_u.cpp:
	  
	  Added ability to print key values at end.

	* test/hashing_integers_hh_k.cpp:
	  
	  Added ability to print keys values

	* test/hashing_integers_hh_u.cpp:
	  
	  Cosmetic changes.

	* test/hashing_integers_hh_k.cpp:
	  
	  Trying to chase down bug, making it look like hh_u

2011-03-31  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_k.cpp:
	  
	  Cosmetic changes

	* test/hashing_integers_hh_u.cpp:
	  
	  Cosmetic changes

	* test/hashing_integers_hh_u.cpp:
	  
	  Getting rid of warnings.

	* test/hashing_integers_hh_k.cpp:
	  
	  Added some ifdefs to get rid of compiler warnings. Other cosmetic
	  changes.

	* test/hashing_integers_hh_u.cpp:
	  
	  Mostly cosmetic changes.

	* test/hashing_integers_co_u.cpp:
	  
	  Works for the XMT

	* test/hashing_integers_co_k.cpp:
	  
	  Fixed typo

	* test/hashing_integers_co_k.cpp:
	  
	  Seems to be working on the XMT.

	* test/hashing_integers.cpp:
	  
	  Adding the ability to print the top n keys

2011-03-30  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_co_k.cpp, test/hashing_integers_co_u.cpp:
	  
	  Files that use the cache-oblivious method.

	* test/hashing_integers_hh_u.cpp:
	  
	  Added a curly brace

	* test/hashing_integers_hh_k.cpp, test/hashing_integers_hh_u.cpp:
	  
	  Cleaning up some stuff.

	* test/hashing_integers_ca_kk.cpp:
	  
	  Changing names again.

	* test/hashing_integers_ca_k.cpp:
	  
	  Renaming things again.

	* test/hashing_integers_ca_kk.cpp:
	  
	  Removing unnecessary line.

2011-03-29  Eric Goodman <elgoodm@sandia.gov>

	* test/test_static_multimap.cpp:
	  
	  New api

2011-03-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_plod_graph.hpp, mtgl/random.hpp:
	  
	  Add generate() to random generators. This allows the user to
	  reuse
	  the memory declared by the generator to generate more random
	  numbers.
	  This functionality was needed by generate_plod_graph.hpp, and it
	  could definitely be useful in other situations.

2011-03-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Get rid of bad mta pragma that causes a warning.

	* mtgl/generate_dimacs_random_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_plod_graph.hpp,
	  mtgl/random.hpp, mtgl/random_walk.hpp,
	  mtgl/subgraph_isomorphism.hpp:
	  
	  Add *_generator classes to random.hpp. These provide vector
	  generation
	  of random numbers for the XMT, but provide one-at-a-time random
	  numbers
	  for other platforms. They are nice because you need vector
	  generation
	  for performance on the XMT, but on other machine the memory use
	  can
	  sometimes be prohibitive. The other machines usually gain no
	  performance
	  by creating all the random numbers up front vs. creating them one
	  at
	  a time anyway.

2011-03-22  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Added get_values back in.

	* mtgl/multimap.hpp, mtgl/multimap2.hpp, mtgl/multimap_old.hpp:
	  
	  Replacing the old multimap with the new one. The old one will
	  stay around until
	  final comparison studies are completed.

	* mtgl/multimap2.hpp:
	  
	  This will eventually replace multimap.hpp.

2011-03-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixes #3975. Changed from malloc / free to new / delete for
	  memory allocation of value_type array in hash table including
	  the par_newdelete pragma.. This theoretically could have
	  increased the intitialiation time of an xmt_hash_table, but
	  in testing it didn't really affect it that much.

2011-03-21  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_k.cpp:
	  
	  working for XMt

	* test/hashing_integers_hh_u.cpp:
	  
	  If step is < 1, set to 1.

	* test/hashing_integers_hh_k.cpp:
	  
	  Fixed step to be 1 if less than 1

	* test/hashing_integers_hh_kk.cpp:
	  
	  Renaming file.

	* test/hashing_integers_hh_k.cpp:
	  
	  Working on the UV.

	* test/hashing_integers_hh_u.cpp:
	  
	  Removed some old printf statments, moved the declaration of the
	  local
	  timer, and changed the signature of the mt_incr calls.

	* test/hashing_integers_hh_u.cpp:
	  
	  Moved the writeef call.

	* test/hashing_integers_hh_u.cpp:
	  
	  Made it work on the XMT.

2011-03-17  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_u.cpp:
	  
	  Cleaned things up.

2011-03-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/types.hpp:
	  
	  Make types.hpp work in more cases without needing mtgl_config.h.

2011-03-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/snap_util.h, mtgl/subgraph_isomorphism.hpp, mtgl/types.hpp,
	  test/generate_euler_tour.cpp:
	  
	  Fix a few small bugs and add a file to read in a graph from file,
	  generate an euler tour, and write the tour out to file.

2011-03-15  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_hh_u.cpp:
	  
	  This peforms the heavy-hitter removal algorith with unknown key
	  distributions.

	* test/gen_zipfs.cpp:
	  
	  Fixing the bad merge.

	* test/gen_rand.cpp:
	  
	  Fixing the bad merge.

	* test/hashing_integers_ca.cpp, test/hashing_integers_ca_kk.cpp,
	  test/hashing_integers_hh.cpp, test/hashing_integers_hh_kk.cpp:
	  
	  Renaming again.

	* test/hashing_integers_hh.cpp, test/hashing_integers_sample.cpp:
	  
	  Changing the name.

	* test/hashing_integers_batch.cpp, test/hashing_integers_ca.cpp:
	  
	  Changed the name.

	* test/gen_rand.cpp:
	  
	  Made some modifications to make this work on the uv.

	* test/gen_zipfs.cpp:
	  
	  Trying to make this work for xmt and uv. Right now the
	  multithreaded uv
	  one doesn't work because I use qthread_FEB without a qthread-type
	  loop.

2011-03-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/types.hpp:
	  
	  Removed some unneeded warnings.

	* mtgl/Makefile.am, mtgl/hash_defs.hpp, mtgl/mtgl_config.h,
	  mtgl/random.hpp, mtgl/types.hpp, test/test_random.cpp:
	  
	  Integer type sizes are now defined in mtgl/types.hpp. This
	  removes
	  the need to have a default version of mtgl/mtgl_config.h. The
	  only
	  other thing even used in mtgl_config.h now is USING_QTHREADS.

2011-03-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/euler_tour.hpp,
	  mtgl/generate_dimacs_random_graph.hpp,
	  mtgl/generate_girvan_newman_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_plod_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/hash_defs.hpp,
	  mtgl/jaccard.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/rand_fill.hpp, mtgl/random.h,
	  mtgl/random.hpp, mtgl/random_walk.hpp, mtgl/rewire_switching.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/ufl.h, test/dna_sorting.cpp, test/find_bipartite.cpp,
	  test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp, test/gen_rand.cpp,
	  test/gen_zipfs.cpp, test/mtgl_test.hpp, test/rmat2file.cpp,
	  test/test_bfs.cpp, test/test_cc.cpp,
	  test/test_connection_subgraphs.cpp, test/test_csr_graph2.cpp,
	  test/test_csr_graph4.cpp, test/test_csr_graph5.cpp,
	  test/test_csr_graph6.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_jaccard.cpp,
	  test/test_knn.cpp, test/test_neighborhoods.cpp, test/test_oc.cpp,
	  test/test_pagerank.cpp, test/test_random.cpp,
	  test/test_rectangles.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_connectivity.cpp,
	  test/test_st_search.cpp, test/test_treap.cpp, test/test_tri.cpp,
	  test/test_undirected_triads.cpp, test/test_vf2_isomorphism.cpp,
	  test/test_wcnm.cpp:
	  
	  Further addresses #3934. Changes all uses of the random number
	  generators in random.h and rand_fill.hpp to use the ones defined
	  in random.hpp. Got rid of the files random.h and rand_fill.hpp.

2011-03-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dynamic_array.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/test_hachar.cpp, test/test_property_map.cpp,
	  test/test_write_graph.cpp, test/test_xmt_hash_set.cpp,
	  test/test_xmt_hash_table.cpp:
	  
	  The dynamic_array constructor that takes a number as a parameter
	  now
	  resizes the array to the size instead of just allocating memory
	  of
	  that size. Note that the values are NOT initialized.

	* mtgl/read_dimacs.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/snap_util.h, mtgl/subgraph_isomorphism.hpp,
	  test/subiso_triangles.cpp, test/test_subgraph_isomorphism.cpp:
	  
	  Fix error where character arrays were read incorrectly on Windows
	  systems using read_array(). The error was due to reading the file
	  in text instead of binary format. One thing to note about reading
	  text files on Windows systems using read_array() is that the
	  text uses '\n\r' as the line ending character.

2011-03-10  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_sample.cpp:
	  
	  Checking in latest.

2011-03-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/hash_defs.hpp, mtgl/rand_fill.hpp,
	  mtgl/random.hpp, mtgl/read_mmap.hpp, mtgl/snap_util.h,
	  mtgl/snl_community.hpp, mtgl/ufl.h, mtgl/util.hpp,
	  mtgl/write_mmap.hpp, test/subiso_triangles.cpp, test/ufl.cpp:
	  
	  Fix WIN32 definition stuff. Use _WIN32 instead of WIN32.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Fix for bug where n log(n) of 1 is 0.

2011-03-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.hpp:
	  
	  Added utility function for printing timing information.

2011-03-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hash_defs.hpp, mtgl/mtgl_io.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/triangles.hpp,
	  test/subiso_triangles.cpp,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.cpp,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj.filters:
	  
	  Fix some compile errors and warnings in Windows.

2011-03-07  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_sample.cpp:
	  
	  Another hashing method.

2011-03-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp, mtgl/read_dimacs.hpp:
	  
	  Fix a few compile errors.

	* mtgl/random.hpp, mtgl/random_walk.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/subiso_triangles.hpp,
	  test/subiso_triangles.cpp, test/test_breadth_first_search.cpp,
	  test/test_random.cpp,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.cpp,
	  win32_example/mtgl_subiso_triangles2/subiso_triangles.cpp:
	  
	  Further addreses #3934. Improves random number generation for
	  subgraph
	  isomorphism. Fixes some bugs in subiso_triangles. Makes things
	  work
	  better under Windows.

2011-03-07  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_batch.cpp:
	  
	  Added a prime step.

2011-02-28  Greg Mackey <gemacke@sandia.gov>

	* configure.ac:
	  
	  Manually set type sizes on XMT since checking size of types in
	  configure fails on that platform.

2011-02-25  Greg Mackey <gemacke@sandia.gov>

	* configure.ac, mtgl/mtgl_config.h, mtgl/random.hpp,
	  test/test_random.cpp:
	  
	  Partly addresses #3934. Adds function mt_random() that returns a
	  random integer of the correct size and type. This should work
	  under
	  Unix, OS X, XMT, and Windows.

2011-02-25  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_batch.cpp:
	  
	  Added priming.

2011-02-24  Greg Mackey <gemacke@sandia.gov>

	* configure.ac, mtgl/read_mmap.hpp, test/persist_graph.cpp:
	  
	  Fix compile problems on Unix machines that aren't the XMT
	  or a mac.

2011-02-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_mmap.hpp, test/persist_graph.cpp, test/test_mmap.cpp:
	  
	  persist_graph now works on Linux machines using shm_open(), etc.

2011-02-22  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Starting to change things from unsigned long to size_type

2011-02-22  Greg Mackey <gemacke@sandia.gov>

	* test/persist_graph.cpp:
	  
	  Can now get data from RDF triple, RDF quad, DIMACS, and Matrix
	  Market
	  files.

2011-02-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mmap_traits.hpp:
	  
	  Oops! Forgot to add this file.

	* test/persist_graph.cpp:
	  
	  Update to include more types of vectors.

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/read_mmap.hpp,
	  test/persist_graph.cpp:
	  
	  Updated persist_graph to work with vectors.

2011-02-21  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Removed duplicate signature.

2011-02-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Adding a byte swapping function. This is useful if you have to
	  read
	  binary data created on a little-endian system (such as the XMT
	  login
	  nodes) into the XMT compute nodes (which are big-endian).

2011-02-17  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Added function defintion for unsigned longs. The existing set
	  matched
	  to something on the xmt, but didn't match when I tried to compile
	  on the
	  altix UV.

	* test/gen_rand.cpp:
	  
	  Simple utility for creating random arrays and writing them to
	  disk.

	* test/hashing_integers_batch.cpp:
	  
	  Seems to be working now.

2011-02-16  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_batch.cpp:
	  
	  Adding this for now. Not sure that this is the right home.

	* test/gen_zipfs.cpp:
	  
	  Changed things from ints to size_type.

	* mtgl/mtgl_io.hpp:
	  
	  Added a template parameter to write array so that the size type
	  specified for the array size can vary.

2011-02-15  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/snap_util.h:
	  
	  Forgot the end of the #ifndef

	* mtgl/snap_util.h:
	  
	  Added definition of SNAP_ANY_SW if it isn't defined already (in a
	  non XMT environment).

	* mtgl/mtgl_io.hpp:
	  
	  Correcting error when debug is defined.

	* mtgl/mtgl_io.hpp:
	  
	  Added support for new snapshot methodology.

2011-02-15  kbwheel

	* mtgl/bfs.hpp:
	  
	  another minor API change to qthreads

2011-02-15  cralph

	* test/test_ullman.cpp:
	  
	  more parallel

	* test/test_vf2.cpp:
	  
	  more parallel

2011-02-10  Eric Goodman <elgoodm@sandia.gov>

	* test/gen_zipfs.cpp:
	  
	  Made it current with api.

	* test/gen_zipfs.cpp:
	  
	  Utility for creating zipfian integers.

2011-02-10  Jon Berry <jberry@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp, mtgl/rand_fill.hpp,
	  mtgl/read_mmap.hpp, mtgl/snap_util.h,
	  mtgl/subgraph_isomorphism.hpp, mtgl/subiso_triangles.hpp,
	  mtgl/util.hpp, mtgl/write_mmap.hpp, test/subiso_triangles.cpp,
	  win32_example, win32_example/Debug,
	  win32_example/mtgl_subiso_triangles2,
	  win32_example/mtgl_subiso_triangles2.sln,
	  win32_example/mtgl_subiso_triangles2/Debug,
	  win32_example/mtgl_subiso_triangles2/ReadMe.txt,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.cpp,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj.filters,
	  win32_example/mtgl_subiso_triangles2/mtgl_subiso_triangles2.vcxproj.user,
	  win32_example/mtgl_subiso_triangles2/my_stdint.h,
	  win32_example/mtgl_subiso_triangles2/stdafx.cpp,
	  win32_example/mtgl_subiso_triangles2/stdafx.h,
	  win32_example/mtgl_subiso_triangles2/stdint.h,
	  win32_example/mtgl_subiso_triangles2/subiso_triangles.cpp,
	  win32_example/mtgl_subiso_triangles2/targetver.h:
	  
	  Got a subgraph isomorphism example compiled and running under
	  Visual C++. The mtgl_subiso_triangles2/*.sln file is the
	  project ("solution") file to double click on. This
	  exercise uncovered a nasty bug in breadth_first_search_mtgl.hpp.
	  It never should have cleared valgrind, but did somehow.
	  
	  The breadth_first_search_mtgl object had "visitor" declared
	  as a reference member. However, the constructor took its
	  formal parameter by value. When run, the copy constructor
	  of the visitor successfully created what ended up being a
	  temporary object (local to the constructor), and the member
	  referenced that. Somehow, this ran (getting lucky) on
	  Linux and even the XMT. The solution was to make the
	  member a true (non-reference) member.

2011-02-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Added method for creating random char* array.

	* mtgl/multimap.hpp:
	  
	  Made changes so that it can compile on linux. Also removed the
	  allocation pool.

2011-02-04  Jon Berry <jberry@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_triangles.hpp, mtgl/triangles.hpp,
	  test/subiso_triangles.cpp:
	  
	  Subgraph isomorphism working again on the XMT.
	  Also fixed memory leaks in triangles.

2011-02-03  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp, test/subiso_triangles.cpp:
	  
	  XMT updates

	* mtgl/triangles.hpp, test/test_tri.cpp:
	  
	  Triangles wasn't parallelizing on the XMT.
	  This is now fixed, though it can still be improved.
	  Also, the algorithm used to work incorrectly for
	  bidirectional and directed graphs. Now it works
	  correctly for bidirectional and flags an error
	  for directed (telling users to apply a transpose_adapter.

2011-02-01  kbwheel

	* mtgl/bfs.hpp, mtgl/bfs_lb_qt.hpp, mtgl/connected_components.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/independent_set.hpp,
	  mtgl/pagerank.hpp, mtgl/read_matrix_market_qt.hpp,
	  mtgl/stinger_graph.hpp, mtgl/util.hpp, mtgl/visit_adj.hpp,
	  test/rmat2file.cpp, test/test_indset.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_tri.cpp:
	  
	  updates to build against current qthread svn

2011-02-01  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/merge_sort.hpp, test/dna_sorting.cpp:
	  
	  Added a method signature for sorting char**.

2011-01-30  Jon Berry <jberry@sandia.gov>

	* mtgl/rand_fill.hpp, mtgl/random_walk.hpp,
	  test/subiso_triangles.cpp:
	  
	  tri-color triangles experiment working, albeit with the same 2-3%
	  discrepancy at small numbers of triangles.

2011-01-27  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp, mtgl/subiso_triangles.hpp,
	  test/subiso_triangles.cpp:
	  
	  update to triangles experiment. Strange random number anomaly
	  with lrand48():
	  walks that double back on themselves are slightly more likely
	  than they should be.

2011-01-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/load_balance.hpp,
	  mtgl/mtgl_adapter.hpp, test/test_thread_iterators.cpp:
	  
	  Undoing commit of thread iterator code as it broke things. I
	  moved it to
	  a branch instead.

2011-01-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/load_balance.hpp,
	  mtgl/mtgl_adapter.hpp, test/test_thread_iterators.cpp:
	  
	  Adding some research code for thread iterators. graph_traits.hpp
	  will
	  need to be modified to include thread iterators for this to work.

2011-01-24  Jon Berry <jberry@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  removed print statement committed by mistake.

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/random_walk.hpp,
	  mtgl/subgraph_isomorphism.hpp:
	  
	  Weighted random walks are now designed to accept precomputed,
	  cumulative weights. Each step does a binary search through
	  the adjacency list of the current vertex to find the next
	  random step.
	  
	  The change to compressed_sparse_row_graph.hpp is a mistake
	  that will be fixed momentarily.

2011-01-23  Jon Berry <jberry@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/subiso_triangles.cpp:
	  
	  converting weighted_random_walk to precomputation/binary search.
	  Not
	  correct yet.

2011-01-21  Jon Berry <jberry@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/find_chordless_5-cycle.cpp, test/subiso_triangles.cpp:
	  
	  Subgraph isomorphism heuristic works (in tests) for graphs with
	  sparse ids.

2011-01-19  Jon Berry <jberry@sandia.gov>

	* mtgl/subiso_triangles.hpp, test/subiso_triangles.cpp:
	  
	  experiment works: we find the correct number of typed triangles

2011-01-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/write_matrix_market.hpp:
	  
	  Now checks that the array type is legal (aka a built-in type).

2011-01-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/write_matrix_market.hpp, test/test_read_graph.cpp,
	  test/test_write_graph.cpp:
	  
	  Improvements to read_matrix_market() and write_matrix_market()
	  including
	  addressing #3981 for them.

2011-01-18  cralph

	* test/test_ullman.canal:
	  
	  delete my file

	* test/test_ullman.canal:
	  
	  canal report

2011-01-18  Jon Berry <jberry@sandia.gov>

	* mtgl/metrics.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/subiso_triangles.hpp, test/subiso_triangles.cpp,
	  test/test_expand_one_edge.cpp, test/test_tri.cpp:
	  
	  Simple triangles experiment with subgraph isomorphism.

	* test/test_tri.cpp:
	  
	  testing

2011-01-17  Jon Berry <jberry@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/bfs.hpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/ull_state.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp, mtgl/wcnm.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  MSVC compilation: That compiler has namespace problems with
	  numeric_limits::max

2011-01-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/write_matrix_market.hpp, test/test_write_graph.cpp:
	  
	  Improved interface to write_matrix_market().

2011-01-07  cralph

	* test/test_vf2.cpp:
	  
	  forruns

	* test/test_ullman.cpp:
	  
	  forruns

	* mtgl/vf2.hpp:
	  
	  forruns

	* mtgl/ullman.hpp:
	  
	  forruns

	* test/test_ullman.cpp:
	  
	  checkfix

	* mtgl/vf2.hpp:
	  
	  checkfix

	* mtgl/ullman.hpp:
	  
	  checkfix

2011-01-06  cralph

	* test/test_vf2.cpp:
	  
	  vf2 test code

	* mtgl/vf2.hpp:
	  
	  vf2 code

	* mtgl/ullman.hpp:
	  
	  memory frees

	* mtgl/ullman.hpp:
	  
	  with all pragmas

	* mtgl/ullman.hpp:
	  
	  faster and stable

2011-01-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_matrix_market.hpp, mtgl/write_matrix_market.hpp,
	  test/test_read_graph.cpp, test/test_write_graph.cpp:
	  
	  Addresses #3980 for write_matrix_market(). It should now work in
	  parallel. Also, adding a test of the write graph functions.

2011-01-05  cralph

	* test/test_ullman.cpp:
	  
	  parallel backtracking

	* mtgl/ullman.hpp:
	  
	  parallel backtracking

	* mtgl/ullman.hpp:
	  
	  stable

2011-01-04  cralph

	* mtgl/ullman.hpp:
	  
	  undo

	* mtgl/ullman.hpp:
	  
	  barebones

	* test/test_ullman.cpp:
	  
	  timer

	* mtgl/ullman.hpp:
	  
	  comment

2010-12-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/shared_ptr.hpp:
	  
	  Fix error where shared_ptr can't see members of shared_ptr object
	  with a different template parameter.

2010-12-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/shared_ptr.hpp:
	  
	  Added mtgl::dynamic_pointer_cast() for shared_ptr.

	* mtgl/shared_ptr.hpp:
	  
	  Added shared_ptr::reset(T* p) and shared_ptr::unique(). Fixed
	  error
	  where forgot to return *this in shared_ptr::operator=().

2010-12-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/shared_ptr.hpp, test/test_shared_ptr.cpp:
	  
	  Initial implementation of a reference counting pointer.

2010-12-02  kbwheel

	* mtgl/bfs_lb.hpp, mtgl/bfs_lb_qt.hpp:
	  
	  qthread version of bfs_lb

	* mtgl/read_matrix_market_qt.hpp:
	  
	  fix compiler warnings

2010-12-01  kbwheel

	* mtgl/read_matrix_market_qt.hpp:
	  
	  fix thinko

	* mtgl/read_matrix_market.hpp, mtgl/read_matrix_market_qt.hpp:
	  
	  qthreadized matrix_market parser (only parallelized the "general"
	  storage scheme, not the skew-symmetric)

	* test/test_breadth_first_search.cpp:
	  
	  qthreads and config header

	* test/test_bfs.cpp:
	  
	  use config header

	* mtgl/snap_util.h:
	  
	  fix error detection

2010-11-30  kbwheel

	* mtgl/read_matrix_market.hpp:
	  
	  remove extraneous debug printfs

	* mtgl/snap_util.h:
	  
	  better error checking: fail if fread gives you a short read

	* mtgl/read_matrix_market.hpp:
	  
	  do not assume that int is 64-bit safe (this fix allows reading
	  scale-25 MTX files)

2010-11-26  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Made some changes to unsigned longs

2010-11-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/read_binary.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp:
	  
	  Fixes #3950.

2010-11-23  Greg Mackey <gemacke@sandia.gov>

	* test/persist_graph.cpp:
	  
	  Can now add CSR graphs of all three directions in persist_graph.
	  Improved spacing in listing of graphs.

2010-11-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp:
	  
	  Naming updates.

	* mtgl/bfs_lb.hpp:
	  
	  Update debug output.

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Get rid of qthreads implementation from bfs_lb in preparation to
	  move
	  it into a separate file. Also, update to my latest versions.

	* mtgl/compressed_sparse_row_graph.hpp, mtgl/read_mmap.hpp,
	  mtgl/write_mmap.hpp, test/persist_graph.cpp:
	  
	  Change the function get_mmap_size() to be static.

2010-11-19  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_adapter.hpp:
	  
	  fixed mismatch in vertex_descriptor type in
	  init_vertices/internal_init_vertices.

2010-11-18  Jon Berry <jberry@sandia.gov>

	* mtgl/adjacency_list.hpp:
	  
	  hack to synchronize one edge_property_map with a remove_vertices
	  call.

	* mtgl/adjacency_list.hpp:
	  
	  fixed bug in removal of vertices/edges in undirected graph.

2010-11-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  Addresses #3977. Multiple calls to clear() no longer causes a
	  double free.

2010-11-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_matrix_market.hpp:
	  
	  Fix the off-by-one error more efficiently.

2010-11-16  kbwheel

	* mtgl/read_matrix_market.hpp:
	  
	  fix off-by-one error

2010-11-16  Greg Mackey <gemacke@sandia.gov>

	* test/persist_graph.cpp:
	  
	  Allow aliases to commands for persist_graph.

2010-11-16  kbwheel

	* mtgl/bfs_lb.hpp:
	  
	  block off the qthreads code better

	* mtgl/bfs_lb.hpp:
	  
	  qthreadized; requires svn qthreads

	* mtgl/util.hpp:
	  
	  qthreads takes care of affinity in a far more portable way, and
	  has for a long time

	* test/test_breadth_first_search.cpp:
	  
	  properly initialize qthreads

2010-11-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/graph_traits.hpp, mtgl/mtgl_io.hpp, mtgl/read_mmap.hpp,
	  mtgl/write_mmap.hpp, test/persist_graph.cpp, test/test_mmap.cpp:
	  
	  Updates to the {read,write}_mmap interface to better meet the
	  needs of
	  MEGRAPHS. Adds in Jon's fix of init() to the bidirectional
	  version.
	  Adds test/test_mmap.cpp as a simple test of the graph mmap
	  interface.

2010-11-11  cralph

	* mtgl/ullman.hpp:
	  
	  Bypass those thrown out in M0

2010-11-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp:
	  
	  Jon's fix to init() sometimes dying with a data_prot error.

2010-11-09  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_set.hpp:
	  
	  Fixed error in insert function. Was missing an else clause.

2010-11-08  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs_lb.hpp, mtgl/mtgl_adapter.hpp, test/Makefile.am,
	  test/rmat2file.cpp, test/test_breadth_first_search.cpp:
	  
	  THIS IS THE VERSION WE USE FOR GRAPH500. The Graph500 directory
	  itself
	  is not in this repository, and includes a pared-down version of
	  compressed_sparse_row_graph.hpp.

2010-11-05  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_adapter.hpp:
	  
	  removed "using namespace std"

2010-11-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, test/mtgl_test.hpp:
	  
	  A couple of formatting changes.

2010-11-02  Jon Berry <jberry@sandia.gov>

	* mtgl/jaccard.hpp, mtgl/maxheap.h, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_io.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/rewire_switching.hpp,
	  mtgl/vektor.h, mtgl/wcnm.hpp, test/mtgl_test.hpp,
	  test/test_jaccard.cpp, test/test_wcnm.cpp:
	  
	  Rework, simplify CNM.

2010-11-01  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, test/persist_graph.cpp,
	  test/test_breadth_first_search.cpp:
	  
	  Few small updates. Calling clear() on compressed_sparse_row_graph
	  wasn't correctly setting the number of edges and vertices to 0.
	  This
	  is now fixed.

2010-10-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp:
	  
	  Simplified some things. Slightly better times. Doesn't improve
	  scaling.

2010-10-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/read_binary.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/read_rdf.hpp,
	  mtgl/write_binary.hpp, mtgl/write_dimacs.hpp,
	  mtgl/write_matrix_market.hpp:
	  
	  Make all I/O functions use const char* for filenames.

2010-10-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Addresses #3974. The edge betweenness is now calculated correctly
	  in the
	  subgraph isomorphism algorithm. Also fixed a couple of compiler
	  warnings.

2010-10-22  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs_mod.cpp:
	  
	  Initial

2010-10-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Small formatting updates.

2010-10-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, test/persist_graph.cpp,
	  test/test_breadth_first_search.cpp:
	  
	  Addresses #3972. Can now persist compressed_sparse_row_graph in
	  memory using mmap. The file test/persist_graph.cpp will persist
	  a graph in memory. The file test/test_breadth_first_search.cpp
	  shows an example of reading an mmapped graph.

2010-10-18  cralph

	* mtgl/ullman.hpp:
	  
	  add matrix M checking

2010-10-17  cralph

	* mtgl/ullman.hpp:
	  
	  fix malloc for xmt problem

	* mtgl/ullman.hpp:
	  
	  enable checkmap option

2010-10-16  Greg Mackey <gemacke@sandia.gov>

	* tutorial/subgraph_isomorphism2.cpp,
	  tutorial/subgraph_isomorphism3.cpp,
	  tutorial/subgraph_isomorphism4.cpp:
	  
	  More updates to subgraph isomorphism tutorials.

	* tutorial/subgraph_isomorphism1.cpp,
	  tutorial/subgraph_isomorphism2.cpp,
	  tutorial/subgraph_isomorphism3.cpp:
	  
	  Updates to subgraph isomorphism tutorials.

2010-10-15  cralph

	* mtgl/ullman.hpp:
	  
	  Updates to use CSR graph

	* mtgl/ullman.hpp:
	  
	  Nested for loop

2010-10-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp,
	  tutorial/subgraph_isomorphism1.cpp:
	  
	  Update first subgraph isomorphism tutorial, and remove print
	  statements
	  from subgraph isomorphism code.

2010-10-08  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Fixing problem with infinite recursion in mtgl_io.

	* mtgl/adjacency_list.hpp, mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/connected_components.hpp, mtgl/find_bipartite.hpp,
	  mtgl/mtgl_adapter.hpp, test/Makefile.am:
	  
	  Some const issues arose when manipulating const wrapper_adapter
	  returned from subgraph_adapter->get_adapter().

2010-10-07  bwbarre

	* mtgl/stinger_graph_adapter.hpp:
	  
	  Make stinger_graph_adapter::vertex_descriptor be the logical
	  vertex id instead
	  of a reference to the actual vertex in the stinger graph
	  structure after
	  talking to Jon. This should be a bit more friendly to algorithms,
	  and
	  the lookup from logical vertex id to the vertex structure is a
	  constant time
	  lookup, so it shouldn't be too bad...

2010-10-07  Greg Mackey <gemacke@sandia.gov>

	* test/test_breadth_first_search.cpp:
	  
	  Adding test for empty graph. Exit if found.

2010-10-06  bwbarre

	* mtgl/stinger_graph.hpp, mtgl/stinger_graph_adapter.hpp,
	  test/Makefile.am, test/test_stinger_graph1.cpp:
	  
	  First take at stinger graph

	* configure.ac:
	  
	  Make it so that setting CFLAGS/CXXFLAGS works properly on non-MTA
	  again

2010-10-06  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_rdf.hpp:
	  
	  Fixing naming error.

	* mtgl/read_rdf.hpp:
	  
	  Removed line to fix undeclared variable error.

	* mtgl/read_rdf.hpp:
	  
	  Added ignore ability to read_rdf call that just uses the data and
	  not the file.

2010-10-04  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_rdf.hpp:
	  
	  Added the ability to include edges rather than exclude edges.

2010-10-01  Greg Mackey <gemacke@sandia.gov>

	* test/test_csr_graph6.cpp:
	  
	  Formatting updates.

	* mtgl/compressed_sparse_row_graph.hpp, test/test_csr_graph6.cpp,
	  tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp:
	  
	  Updates to tutorials and addresses #3971. Also, fixes a compile
	  bug
	  in test/test_csr_graph6.cpp.

2010-09-30  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_binary.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/write_binary.hpp,
	  mtgl/write_dimacs.hpp, mtgl/write_matrix_market.hpp,
	  tutorial/input_output.cpp:
	  
	  Changing template type name from graph_adapter to Graph.

2010-09-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/read_dimacs.hpp, test/custom2file.cpp,
	  test/find_bipartite.cpp, test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp, test/mtgl_test.hpp,
	  test/rmat2file.cpp, test/test_bfs.cpp,
	  test/test_breadth_first_search.cpp, test/test_cc.cpp,
	  test/test_csr_graph5.cpp, test/test_csr_graph6.cpp,
	  test/test_encount.cpp, test/test_expand_one_edge.cpp,
	  test/test_filtering.cpp, test/test_goodman_bfs.cpp,
	  test/test_goodman_bfs_first_hash.cpp, test/test_goodman_cc.cpp,
	  test/test_indset.cpp, test/test_neighborhoods.cpp,
	  test/test_pagerank.cpp, test/test_pagerank_bidir.cpp,
	  test/test_read_graph.cpp, test/test_rectangles.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_tri.cpp, test/test_undirected_triads.cpp,
	  test/test_wcnm.cpp, tutorial/exercise3.cpp:
	  
	  Addresses #3970.

	* test/test_bfs.cpp, test/test_read_graph.cpp:
	  
	  Remove usage of get_vertex() and get_edge().

	* tutorial/exercise1.cpp, tutorial/exercise2.cpp,
	  tutorial/exercise3.cpp, tutorial/exercise4.cpp,
	  tutorial/input_output.cpp, tutorial/subgraph_isomorphism1.cpp,
	  tutorial/subgraph_isomorphism2.cpp,
	  tutorial/subgraph_isomorphism3.cpp,
	  tutorial/subgraph_isomorphism4.cpp, tutorial/triangles1.cpp:
	  
	  Updates to make tutorial examples work again.

	* mtgl/adjacency_list.hpp, mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/filter_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  tutorial/filter_example.cpp:
	  
	  Adds new tutorial example: filter_example.cpp. Addresses #3969,
	  and
	  adds the appropriate null_vertex(), null_edge(), and is_valid()
	  functions for all the adapters.

2010-09-28  Greg Mackey <gemacke@sandia.gov>

	* tutorial/property_maps5.cpp:
	  
	  Adding new property map example.

	* test/test_breadth_first_search.cpp:
	  
	  Needed to update another file to work with new version of
	  read_rdf_triple().

2010-09-28  Eric Goodman <elgoodm@sandia.gov>

	* test/test_expand_one_edge.cpp:
	  
	  Updated read_rdf_triple signature.

	* test/test_mtgl_strtok.cpp:
	  
	  Modified read_array, so updating files that use it.

	* test/test_static_multimap.cpp:
	  
	  Modified read_array, so updating files that use it.

	* test/test_bfs.cpp:
	  
	  Modified read_rdf, so updating this file.

	* mtgl/read_rdf.hpp:
	  
	  Changing from ints to unsigned longs.

	* mtgl/mtgl_io.hpp:
	  
	  Changed read and write array to have uint64_t instead of int64_t
	  when checking file size.

	* test/test_read_graph.cpp:
	  
	  Making read_rdf assume unsigned long instead of int.

2010-09-28  Greg Mackey <gemacke@sandia.gov>

	* tutorial/property_maps4.cpp:
	  
	  Adding a new property map tutorial.

2010-09-27  Jon Berry <jberry@sandia.gov>

	* mtgl/find_bipartite.hpp, mtgl/generate_rmat_graph.hpp,
	  mtgl/subgraph_isomorphism.hpp, test/find_bipartite.cpp:
	  
	  Making the find_bipartite test more generic: let the user visit
	  the
	  ultimate matches. The find_bipartite.hpp module has its own
	  visitor
	  to vet candidate matches. Those that pass get sent to the user's
	  visitor.
	  
	  generate_rmat_graph.hpp somehow wasn't checking for self-loops. I
	  think that we were doing that in the past, and we definitely want
	  that
	  check.

2010-09-25  Jon Berry <jberry@sandia.gov>

	* mtgl/find_bipartite.hpp:
	  
	  forgot to add this.

2010-09-24  Jon Berry <jberry@sandia.gov>

	* mtgl/Makefile.am, mtgl/subgraph_isomorphism.hpp,
	  test/find_bipartite.cpp, test/test_breadth_first_search.cpp:
	  
	  experiments with subgraph isomorphism.

	* mtgl/vertex_betweenness.hpp:
	  
	  removed prints

2010-09-23  Greg Mackey <gemacke@sandia.gov>

	* test/test_property_map.cpp:
	  
	  Adding a test for the property map code.

2010-09-22  Greg Mackey <gemacke@sandia.gov>

	* tutorial/property_maps3.cpp:
	  
	  Updates to better reflect good property map usage.

	* tutorial/property_maps1.cpp, tutorial/property_maps2.cpp,
	  tutorial/property_maps3.cpp:
	  
	  Update property map tutorial code to work with
	  compressed_sparse_row_graph.

2010-09-22  Jon Berry <jberry@sandia.gov>

	* mtgl/undirected_triads.hpp, test/test_rectangles.cpp,
	  test/test_undirected_triads.cpp:
	  
	  undirected triads and rectangles

2010-09-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/compressed_sparse_row_graph.hpp, tutorial/example1.cpp,
	  tutorial/example2.cpp, tutorial/example3.cpp,
	  tutorial/example4.cpp:
	  
	  Update some of the tutorial files to work with new graphs.
	  Remove constructor definition from csr_vertex_descriptor. This
	  is require to make example3.cpp get the same instruction
	  counts as example2 and example1. Why? Who knows. Also,
	  make csr_edge_adapter not inherit from pair as that isn't
	  used anymore and was just increasing the size of the edge
	  adapters.

2010-09-20  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_rdf.hpp:
	  
	  Added the ability to ignore certain edges when read in.

	* test/test_goodman_cc.cpp:
	  
	  Added the ability to ignore certain edge type.

2010-09-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Moved the declaration of the color array inside the bfs algorithm
	  as this made it perform better.

2010-09-16  Greg Mackey <gemacke@sandia.gov>

	* configure.ac, mtgl/bfs_lb.hpp,
	  mtgl/compressed_sparse_row_graph.hpp, test/Makefile.am,
	  test/test_breadth_first_search.cpp,
	  test/test_expand_one_edge.cpp:
	  
	  Improved parallelization for expand_one_edge() and
	  breadth_first_search()
	  when using a map property map.
	  
	  Added test_breadth_first_search to the makefile. Got rid of the
	  -par
	  and -O3 flags passed to the MTA compiler during a make as the
	  compiler
	  ignored them and gave warnings.

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp,
	  test/test_expand_one_edge.cpp:
	  
	  Change bfs algorithms to use vertex descriptors instead of ids
	  for the
	  queue and buffers. Change test programs to accomodate, and modify
	  the test for expand one edge to test the bfs_lb algorithm. Also,
	  added
	  preprocessor defines to choose between array or map property
	  maps.

2010-09-16  Jon Berry <jberry@sandia.gov>

	* test/find_bipartite.cpp:
	  
	  

2010-09-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs_lb.hpp, test/test_breadth_first_search.cpp:
	  
	  Adding version of Greg's new BFS algorithm and version of
	  expand_one_edge()
	  using the new algorithm.

2010-09-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_binary.hpp:
	  
	  Added more output during debug mode.

2010-09-14  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs_first_hash.cpp:
	  
	  Latest update

2010-09-13  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs_first_hash.cpp:
	  
	  More generic implementation.

2010-09-13  Jon Berry <jberry@sandia.gov>

	* mtgl/maxheap.h:
	  
	  min( (c_i/c_j)^5, (c_j/c_i)^5 WC consolidation ratios.

2010-09-08  Greg Mackey <gemacke@sandia.gov>

	* configure.ac, mtgl/Makefile.am, mtgl/VolVolume.h,
	  mtgl/adjacency_list.hpp, mtgl/adjacency_list_adapter.hpp,
	  mtgl/bfs.hpp, mtgl/closure.hpp,
	  mtgl/compressed_sparse_row_graph.hpp,
	  mtgl/connected_components.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/copier.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/filter_adapter.hpp,
	  mtgl/filter_graph.hpp, mtgl/generate_girvan_newman_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_rmat_graph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/independent_set.hpp, mtgl/induced_subgraph.hpp,
	  mtgl/maximum_density_subgraph.hpp, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_property.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/psearch.hpp, mtgl/queue.hpp,
	  mtgl/rand_fill.hpp, mtgl/rdf_quad.hpp,
	  mtgl/read_cluster_graph.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/scc_visitor.hpp,
	  mtgl/simple_dynamic_array.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/treap.hpp, mtgl/triangles.hpp,
	  mtgl/ullman.hpp, mtgl/visit_adj.hpp, mtgl/wcnm.hpp,
	  mtgl/write_dimacs.hpp, mtgl/write_matrix_market.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/Makefile.am,
	  test/custom2file.cpp, test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp, test/mtgl_boost_test.cpp,
	  test/mtgl_test.hpp, test/rmat2file.cpp, test/test_allvisit.cpp,
	  test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp, test/test_contraction.cpp,
	  test/test_csr_graph1.cpp, test/test_csr_graph2.cpp,
	  test/test_csr_graph3.cpp, test/test_csr_graph4.cpp,
	  test/test_csr_graph5.cpp, test/test_csr_graph6.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_encount.cpp, test/test_expand_one_edge.cpp,
	  test/test_filtering.cpp, test/test_find_assortativity.cpp,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp, test/test_goodman_bfs.cpp,
	  test/test_goodman_cc.cpp, test/test_independent_set.cpp,
	  test/test_indset.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_knn.cpp, test/test_mask_search.cpp,
	  test/test_mutable_graph.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_pagerank.cpp, test/test_pagerank_bidir.cpp,
	  test/test_read_graph.cpp, test/test_snapshot.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_st_connectivity.cpp, test/test_st_search.cpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph4.cpp,
	  test/test_static_graph5.cpp, test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_subgraph_isomorphism.cpp, test/test_tri.cpp,
	  test/test_ullman.cpp, test/test_vf2_isomorphism.cpp,
	  test/test_wcnm.cpp:
	  
	  This is a biggee with some major updates. The two biggest gotchas
	  are these:
	  - Got rid of adjacnecy_list_adapter. All the functionality is now
	  in adjacency_list.
	  - Did the same for static_graph_adapter, but also renamed
	  static_graph
	  to compressed_sparse_row_graph.
	  
	  The following tickets were addressed:
	  - #3876
	  - #3956
	  - #3964
	  - #3966
	  - #3967
	  - #3968

2010-09-08  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Added tracking parents.

2010-09-07  Greg Mackey <gemacke@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Make work in serial.

2010-09-07  Jon Berry <jberry@sandia.gov>

	* mtgl/maxheap.h, mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  debugging silly things with reading/writing of weights

	* mtgl/dneighborhoods.hpp, mtgl/maxheap.h, mtgl/read_dimacs.hpp,
	  mtgl/vektor.h, mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  Fixed bug in Wakita/Tsurumi variation of CNM. We also use the
	  square of the consolidation ratio for stronger balancing.

2010-09-04  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/dynamic_array.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/maxheap.h,
	  mtgl/subgraph_isomorphism.hpp, mtgl/triangles.hpp, mtgl/util.hpp,
	  mtgl/vektor.h, mtgl/wcnm.hpp, test/find_chordless_5-cycle2.cpp,
	  test/test_cc.cpp:
	  
	  Wakita/Tsurumi variant of CNM, some other fixes

2010-09-03  Eric Goodman <elgoodm@sandia.gov>

	* test/test_eric_connected_components.cpp:
	  
	  Removed old connected components approach that scaled but was
	  slow.

2010-09-01  Jon Berry <jberry@sandia.gov>

	* mtgl/vertex_betweenness.hpp, mtgl/xmt_hash_table.hpp:
	  
	  removed compiler warnings

2010-08-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_binary.hpp:
	  
	  Need to include mtgl/mtgl_adapter.hpp. Not including it caused
	  problems sometimes.

2010-08-30  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_cc.cpp:
	  
	  Appears to be correct and performing well.

	* test/test_goodman_cc.cpp:
	  
	  File to test out connected components with new bfs.

2010-08-27  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp:
	  
	  cleaning up for bigger runs.

2010-08-26  cralph

	* mtgl/ullman.hpp:
	  
	  ullman code

	* test/test_ullman.cpp:
	  
	  test for ullman isomorphism

2010-08-26  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Removed fence

	* test/test_goodman_bfs.cpp:
	  
	  Removed dummy timing stuff.

2010-08-25  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Small tweak.

	* test/test_goodman_bfs.cpp:
	  
	  Buffers weren't big enough.

2010-08-23  Eric Goodman <elgoodm@sandia.gov>

	* test/test_bfs.cpp:
	  
	  Added the ability to read a translated rdf file.

2010-08-22  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Best numbers so far.

2010-08-21  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Removed some printf statements

	* test/test_goodman_bfs.cpp:
	  
	  Checking in latest.

	* test/test_goodman_bfs.cpp:
	  
	  Better numbers with some refinement.

2010-08-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list_adapter.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_adapter.hpp, mtgl/filter_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/read_rdf.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/write_dimacs.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/test_filtering.cpp:
	  
	  Adds filtering capability to MTGL (#3965). None of the algorithms
	  have
	  been updated yet to work with the new filtering concept. Also
	  partially addresses #3961 by moving some of the subpieces to
	  the mtgl::detail namespace.

2010-08-20  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_adapter.hpp:
	  
	  fixing print_edges

2010-08-19  Eric Goodman <elgoodm@sandia.gov>

	* test/test_goodman_bfs.cpp:
	  
	  Working pretty well.

	* test/test_goodman_bfs.cpp:
	  
	  Comment change.

	* test/test_goodman_bfs.cpp:
	  
	  Demonstrates bfs using a stream allocation strategy based on
	  vertex degree.

2010-08-19  Jon Berry <jberry@sandia.gov>

	* test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp:
	  
	  debugging visitor fixed to expect v-e-v-e-v path format

2010-08-18  Eric Goodman <elgoodm@sandia.gov>

	* test/test_eric_connected_components.cpp:
	  
	  Adding affected nodes of high-degree nodes portion scales much
	  better.

	* test/test_eric_connected_components.cpp:
	  
	  Adding the updates from high-out degree nodes is scaling better
	  now.

2010-08-17  Eric Goodman <elgoodm@sandia.gov>

	* test/test_eric_connected_components.cpp:
	  
	  Different approach to connected components.

2010-08-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_property.hpp,
	  mtgl/static_graph_adapter.hpp:
	  
	  Adds a default definition for all graphs for vertex_property_map
	  and edge_property_map that uses array property maps. (#3959) If
	  a graph class requires map property maps, they will have to
	  define
	  partial template specializations. The ticket reference above
	  gives an example.

2010-08-11  Greg Mackey <gemacke@sandia.gov>

	* test/test_xmt_hash_set.cpp:
	  
	  Few updates to test.

	* mtgl/adjacency_list.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/generate_dimacs_random_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/read_dimacs.hpp,
	  mtgl/wcnm.hpp, mtgl/write_matrix_market.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  test/test_hachar.cpp, test/test_tri.cpp,
	  test/test_xmt_hash_set.cpp, test/test_xmt_hash_table.cpp:
	  
	  This commit addresses several issues:
	  - Fixes #3952 and #3955 for xmt_hash_set.
	  - Fixes #3957 and #3958.
	  - Updates comments and formatting in several files.
	  - Repairs fallout for all of the above plus the fallout from
	  #3953 and
	  #3954.

2010-08-11  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_set.hpp:
	  
	  Added range iterators and change calloc calls to for loops due to
	  unexplained stalls produced by compiler.

2010-08-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hachar.hpp, mtgl/xmt_hash_table.hpp, test/test_hachar.cpp,
	  test/test_xmt_hash_table.cpp:
	  
	  Addresses #3953, #3954, and #3955.

2010-08-06  Jon Berry <jberry@sandia.gov>

	* test/find_chordless_5-cycle2.cpp:
	  
	  map_property_map version works.

	* mtgl/subgraph_adapter.hpp, test/find_chordless_5-cycle.cpp,
	  test/find_chordless_5-cycle2.cpp:
	  
	  minor bug fixes to chordless 5-cycle. ...cycle2.cpp uses
	  map_property_map
	  (but isn't working yet).

2010-08-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hachar.hpp, mtgl/xmt_hash_table.hpp, test/test_hachar.cpp:
	  
	  Fixes #3952. Also improves the test for hachar a bit.

	* test/test_xmt_hash_table.cpp:
	  
	  Small updates to test file.

2010-08-05  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/xmt_hash_set.hpp, test/test_expand_one_edge.cpp:
	  
	  adjacency list adapter

	* test/Makefile.am, test/test_expand_one_edge.cpp:
	  
	  initialization of colormap fixed.

2010-08-04  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp:
	  
	  no more non-generic construction of hash_table_adapter in gcc_sv.

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/mtgl_boost_property.hpp, mtgl/util.hpp, mtgl/visit_adj.hpp,
	  test/test_cc.cpp, test/test_connected_components.cpp:
	  
	  connected components now works with map_property_mappppp (
	  -DUSE_MAP_PMAP )

2010-08-03  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Still had problems with for loop in place of calloc using nodep.
	  Changed to assert parallel.

2010-08-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hachar.hpp:
	  
	  Fix a bug found by David Haglin in one of the print functions.

2010-08-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp, test/find_chordless_5-cycle.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Update subgraph isomorphism to return walk matches as interleaved
	  vertex
	  and edge ids instead of just edge ids. (vid, eid, vid) Update
	  test
	  files accordingly. Also fixed a memory leak in subgraph
	  isomorphism.

2010-08-02  Jon Berry <jberry@sandia.gov>

	* test/Makefile.am, test/test_wcnm.cpp:
	  
	  wcnm testing

	* mtgl/dneighborhoods.hpp, mtgl/maxheap.h, mtgl/vektor.h,
	  mtgl/wcnm.hpp, test/test_wcnm.cpp:
	  
	  wcnm

2010-07-28  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_rdf.hpp:
	  
	  Add function to read rdf quad data.

	* mtgl/random_walk.hpp:
	  
	  Another fix to candidate-edge choosing code in
	  weighted_random_walk().

2010-07-28  Jon Berry <jberry@sandia.gov>

	* mtgl/random_walk.hpp:
	  
	  fix to candidate edge-choosing code.

2010-07-26  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Changed calloc for occupied array to be a malloc followed by a
	  for loop to address an occasional problem with calloc.

2010-07-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/find_chordless_5-cycle.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Adding new subgraph isomorphism method that takes a certain
	  number of
	  weighted random walks through the colored bipartite graph.
	  Simplify
	  random walk code by not using psearch as it's serial anyway.
	  Adding
	  Jon's code to find chordless 5-cycles that uses the new subgraph
	  isomorphism method.

2010-07-23  Eric Goodman <elgoodm@sandia.gov>

	* test/test_static_multimap.cpp:
	  
	  Fixed some small errors with the printf's

2010-07-22  Greg Mackey <gemacke@sandia.gov>

	* test/test_read_graph.cpp:
	  
	  Adding file to test the graph readers.

2010-07-22  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Added some changes to make the api more consistant with
	  xmt_hash_table.

2010-07-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hash_defs.hpp, mtgl/xmt_hash_table.hpp,
	  test/test_xmt_hash_table.cpp:
	  
	  Move get_keys() from a member function of xmt_hash_table to a
	  global
	  function in hash_defs.hpp that uses range_iterators.

2010-07-15  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Changed capacity and count arrays to be uint32_t.

	* test/dictionary_encoding.cpp:
	  
	  Deleting this as it was moved to the MapReduceXMT codebase.

	* test/test_static_multimap.cpp:
	  
	  Class to test multimap.hpp

2010-07-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hachar.hpp, mtgl/util.hpp, mtgl/xmt_hash_table.hpp,
	  test/test_hachar.cpp, test/test_hachar_eric.cpp:
	  
	  Adds an implementation of the hachar hash table (#3951) and some
	  tests.
	  Changes the data in xmt_hash_table::range_iterator to be private.

2010-07-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Add primitives mt_readxx() and mt_writexf().

	* mtgl/hash_defs.hpp, mtgl/read_rdf.hpp, mtgl/snl_community2.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/util.hpp,
	  mtgl/xmt_hash_table.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/test_encount.cpp, test/test_snl_community3.cpp,
	  test/test_xmt_hash_table.cpp:
	  
	  Address the following and repair the fallout:
	  - #3945: Change the () operator for function objects passed to
	  xmt_hash_table::visit() to take a pointer to value_type
	  - #3946: Change the hash table nodes in xmt_hash_table to be a
	  pair
	  of key_type, mapped_type
	  - #3947: Add stream-based iteration to the xmt_hash_table
	  - #3948: Get rid of xmt_hash_table::assign_contiguous_ids and add
	  the function in hash_defs.hpp

2010-07-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Addresses several minor issues:
	  - Changes to pass by value for visitor for all functions that
	  take a
	  visitor. The visitor can't be a const &, and simply passing a &
	  makes using the pre-defined visitors more difficult.
	  - Remove inline keyword from a couple of functions whose bodies
	  reside
	  in the class declaration.
	  - Get rid of XMT_HASH_TABLE_INIT_SIZE since it's used in only one
	  place.
	  - Improve comments.

2010-07-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/read_rdf.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Addresses #3944. Improves comments in mtgl_io.hpp. Fixes a bug
	  where
	  the template parameter for deteremine_beg_end() wasn't given
	  properly
	  in xmt_hash_table::assign_contiguous_ids().

2010-07-06  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.hpp:
	  
	  Minor documentation changes.

2010-06-30  kbwheel

	* configure.ac:
	  
	  figure out if libm is necessary

	* config/mtgl_check_qthreads.m4:
	  
	  better cprops searching

2010-06-29  kbwheel

	* mtgl/rand_fill.hpp:
	  
	  remove unnecessary static_cast

	* mtgl/rand_fill.hpp:
	  
	  remove compiler warnings

	* mtgl/rand_fill.hpp:
	  
	  better RAND fix

2010-06-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_boost_property.hpp, test/test_xmt_hash_table.cpp:
	  
	  Forgot to get rid of all references to xmt_proxy_object. Oops.
	  They're all gone now.

2010-06-29  kbwheel

	* mtgl/rand_fill.hpp:
	  
	  bugfix from Dylan Stark; most rand functions return up to
	  RAND_MAX (2^31-1) rather than UINT_MAX

2010-06-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixes #3943. Simplifies xmt_hash_table::operator[] by returning a
	  reference, and gets rid of the proxy object entirely.

2010-06-28  kbwheel

	* test/test_find_vertex_betweenness.cpp:
	  
	  basic typedef

2010-06-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  Change to allow passing in a null color array. This is desirable
	  when
	  running the PURE_FILTER as it doesn't ever use the color array.

	* mtgl/mtgl_boost_property.hpp:
	  
	  Adresses several issues:
	  - #3939 An array_property_map can now wrap around a
	  dynamic_array.
	  - #3940 The map_property_map now wraps around an xmt_hash_table
	  instead of an std::map.

2010-06-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixes #3941. The [] operator for xmt_hash_table works again.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Fixes #3942. Subgraph isomorphism now gets correct results for
	  undirected graphs.

2010-06-18  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  Fixes corresponding to trac ticket 3930.

	* mtgl/expand_one_edge.hpp:
	  
	  We'll keep this within bfs.hpp for now.

	* mtgl/expand_one_edge.hpp, test/test_expand_one_edge.cpp:
	  
	  level set expansion. These may be deprecated immediately; not
	  sure
	  whether to keep the expand_one_edge within bfs.hpp or to make it
	  first
	  class.

2010-06-17  Greg Mackey <gemacke@sandia.gov>

	* test/test_mutable_graph.cpp:
	  
	  Now works with new full-fledged type direction.

2010-06-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/SMVkernel.h, mtgl/VolVolume.h,
	  mtgl/adjacency_list.hpp, mtgl/adjacency_list_adapter.hpp,
	  mtgl/allocation_pool.hpp, mtgl/array2d.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/closure.hpp,
	  mtgl/components_visitor.hpp, mtgl/connected_components.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/connectivity_visitor.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/copier.hpp,
	  mtgl/debug_utils.hpp, mtgl/depth_first_search.hpp,
	  mtgl/depth_first_search_visitor.hpp, mtgl/diffraction_array.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/dynamic_array.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_graph.hpp, mtgl/generate_dimacs_random_graph.hpp,
	  mtgl/generate_girvan_newman_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_plod_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/graph.hpp, mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/hash_defs.hpp, mtgl/hotel_hash_set.hpp,
	  mtgl/independent_set.hpp, mtgl/induced_subgraph.hpp,
	  mtgl/isomorphism_ullman.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/lp_hash_set.hpp, mtgl/mask_search.hpp,
	  mtgl/mask_search_visitor.hpp, mtgl/maximum_density_subgraph.hpp,
	  mtgl/merge_sort.hpp, mtgl/metrics.hpp, mtgl/mmio.hpp,
	  mtgl/mtaqsort.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_boost_property.hpp, mtgl/mtgl_io.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/mtgl_string.h,
	  mtgl/multimap.hpp, mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/psearch.hpp, mtgl/pseudo_diameter.hpp, mtgl/queue.hpp,
	  mtgl/quicksort.hpp, mtgl/rand_fill.hpp, mtgl/random.h,
	  mtgl/random_number_generator.hpp, mtgl/random_walk.hpp,
	  mtgl/rdf_quad.hpp, mtgl/read_binary.hpp,
	  mtgl/read_cluster_graph.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_matrix_market.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/scc_visitor.hpp, mtgl/serqsort.hpp,
	  mtgl/shiloach_vishkin.hpp, mtgl/simple_dynamic_array.hpp,
	  mtgl/snap_util.h, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_connectivity.hpp,
	  mtgl/st_search.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/stats.hpp, mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp, mtgl/strtod.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp, mtgl/treap.hpp,
	  mtgl/triangles.hpp, mtgl/ufl.h, mtgl/ull_state.hpp,
	  mtgl/util.hpp, mtgl/vertex_betweenness.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, mtgl/visit_adj.hpp,
	  mtgl/write_binary.hpp, mtgl/write_dimacs.hpp,
	  mtgl/write_matrix_market.hpp, mtgl/xmt_hash_set.hpp,
	  mtgl/xmt_hash_table.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/CPPGraph.h, test/GenOntology.cpp, test/Graph.h,
	  test/VolVolume.cpp, test/buildmaps.c, test/buildtest.cpp,
	  test/custom2file.cpp, test/dictionary_encoding.cpp,
	  test/hashing_integers.cpp, test/hashing_integers_mod.cpp,
	  test/hashing_strings.cpp, test/loadmaps.c, test/loadtest.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.hpp, test/qalloc.c,
	  test/qalloc.h, test/rmat2file.cpp, test/test.cpp,
	  test/test_allvisit.cpp, test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp, test/test_contraction.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_dyn_graph.cpp, test/test_dynamic_array.cpp,
	  test/test_encount.cpp, test/test_find_assortativity.cpp,
	  test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_hotel_hash_set.cpp,
	  test/test_hotel_hash_set_charstar.cpp,
	  test/test_independent_set.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_knn.cpp,
	  test/test_knn.hpp, test/test_lp_hash_set.cpp,
	  test/test_lp_hash_set_charstar.cpp, test/test_mask_search.cpp,
	  test/test_merge_sort.cpp, test/test_mta_merge_sort.cpp,
	  test/test_mtgl_strtok.cpp, test/test_mutable_graph.cpp,
	  test/test_neighborhoods.cpp, test/test_newmanbenchmark.cpp,
	  test/test_oc.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp,
	  test/test_random_number_generator.cpp, test/test_snapshot.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_st_connectivity.cpp, test/test_st_connectivity.hpp,
	  test/test_st_search.cpp, test/test_st_search.hpp,
	  test/test_static_graph.c, test/test_static_graph.cpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph4.cpp,
	  test/test_static_graph5.cpp, test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_subgraph_isomorphism.cpp, test/test_treap.cpp,
	  test/test_tri.cpp, test/test_vf2_isomorphism.cpp,
	  test/test_xmt_hash_set.cpp, test/test_xmt_hash_table.cpp,
	  test/test_xmt_hash_table_eric.cpp,
	  test/test_xmt_hash_table_eric_charstar.cpp, test/ufl.cpp,
	  test/utilities.cpp, test/utilities.h,
	  tutorial/property_maps2.cpp, tutorial/property_maps3.cpp,
	  tutorial/triangles1.cpp:
	  
	  This addresses several issues:
	  - Remove files that aren't being used.
	  - Get rid of most of the .hpp files in /test by merging them with
	  their respective .cpp files. The .hpp files were unnecessary
	  anyway.
	  - Standardize doxygen comments across all files. Note that I
	  didn't really add more comments, just made their formatting
	  standard. (#3931)
	  - Change from using the old C-style header library names to using
	  the new C++ style header library names. (#3932)
	  - Standardize the header guard names and make them safer by
	  prepending with "MTGL_". (#3933)
	  - Remove dependencies on mmio.hpp and remove the file. (#3936)
	  - Include cstdlib instead of malloc.h. (#3937)

2010-06-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/adjacency_list.hpp, mtgl/adjacency_list_adapter.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_table_adapter.hpp,
	  test/test_isomorphism_ullman.cpp, test/test_static_graph1.cpp,
	  test/test_subgraph_isomorphism.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Fixes #3928 and #3929.

2010-06-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixed determine_beg_end in get_keys

	* mtgl/multimap.hpp:
	  
	  Added some methods to multimap

2010-06-07  Jon Berry <jberry@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  initialization error fixed

2010-06-04  kddevin

	* test/test_tri.cpp:
	  
	  Added timer; corrected command-line checking

2010-06-04  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Signature on get_keys changed (void), so I removed the return
	  statement.

2010-06-03  Greg Mackey <gemacke@sandia.gov>

	* test:
	  
	  Add csg_test to svn:ignore property in mtgl/test/.

2010-06-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs.hpp, mtgl/components_visitor.hpp:
	  
	  Rename default_bfs_mtgl_visitor in bfs.hpp to avoid conflict with
	  class
	  with same name in breadth_first_search_mtgl.hpp.

2010-06-02  Jon Berry <jberry@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  self-loops caused infinite loop. Fixed.

	* mtgl/SMVkernel.h, mtgl/breadth_first_search.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/vertex_betweenness.hpp:
	  
	  gcc 4.3.3 warnings removed.

	* mtgl/vertex_betweenness.hpp:
	  
	  Correct test for determining whether to run bfs is if the source
	  vertex has degree one or more.

2010-05-28  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.hpp:
	  
	  Further addresses #3925.

	* mtgl/xmt_hash_table.hpp:
	  
	  Fixes #3924, #3925, and #3926.

2010-05-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Add ability to generate values of type unsigned int (aka 64-bit
	  unsigned ints) on XMT.

	* mtgl/rand_fill.hpp:
	  
	  Add abiltiy to generate doubles.

	* mtgl/read_dimacs.hpp:
	  
	  There was a bug where the first edge line was skipped if there
	  wasn't
	  a comment line after the problem line. This is now fixed.

2010-05-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_dimacs.hpp, mtgl/read_matrix_market.hpp,
	  test/mtgl_test.hpp, test/test_bfs.cpp, test/test_cc.cpp,
	  test/test_encount.cpp, test/test_indset.cpp,
	  test/test_neighborhoods.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp, test/test_tri.cpp:
	  
	  Fix compile error due to changes in read_dimacs() and
	  read_matrix_market().

	* mtgl/Makefile.am, mtgl/mtgl_adapter.hpp,
	  mtgl/print_dimacs_to_file.hpp:
	  
	  Get rid of print_dimacs_to_file.hpp as it is a duplicate of what
	  is in
	  write_dimacs.hpp.

	* mtgl/read_dimacs.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/strtod.hpp:
	  
	  Fixes #3923.

	* mtgl/xmt_hash_table.hpp:
	  
	  Add member function assign_contiguous_ids() to xmt_hash_table
	  that assigns
	  contiguous ids to the entries in the hash table. Updated
	  get_keys() to
	  use determine_beg_end().

	* mtgl/util.hpp:
	  
	  Got rid of calls to floor in determine_beg_end(). Just cast to
	  int
	  instead.

2010-05-20  Eric Goodman <elgoodm@sandia.gov>

	* test/test_mtgl_strtok.cpp:
	  
	  Added support for providing a delimiter.

	* mtgl/mtgl_string.h:
	  
	  Added support for providing a delimiter.

2010-05-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/read_dimacs.hpp, test/mtgl_test.hpp, test/test_bfs.cpp,
	  test/test_cc.cpp, test/test_encount.cpp, test/test_indset.cpp,
	  test/test_neighborhoods.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp, test/test_tri.cpp:
	  
	  Get rid of valgrind errors in read_dimacs.hpp and update it.

	* mtgl/mtgl_io.hpp:
	  
	  Add versions of read_array() and write_array() that take a const
	  char*
	  filename.

2010-05-20  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.hpp:
	  
	  Added math.h include

	* mtgl/util.hpp:
	  
	  Added a method for determining beg and end indices for a stream's
	  partition of an array when using the for all streams pragma.

2010-05-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Needed to make read_array() and write_array() inlined.

2010-05-17  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mtgl_string.h:
	  
	  Added util include.

	* mtgl/mtgl_string.h:
	  
	  Modified white space in documentation.

2010-05-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Change from using [] operator for xmt_hash_table to using lookup.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Fix bug where member variable was used in iso_bipartite_visitor
	  class
	  without being declared. I had accidentally declared it in the
	  uniqueid_visitor class instead.

2010-05-14  Jon Berry <jberry@sandia.gov>

	* mtgl/read_dimacs.hpp:
	  
	  Removed compiler bug regarding initialization of a variable
	  across 'switch'
	  cases.

	* mtgl/dneighborhoods.hpp:
	  
	  Fixed bug with new iteration strategy: when I started iterating
	  through edges instead of using hash tables for eweight, etc., I
	  introduced a bug in the rectangle counting code. There was
	  confusion about the "e_left" and "e_right" values. Now, the
	  lower vertex id is considered "left" and the higher is considered
	  "right." This was the case originally.

	* mtgl/xmt_hash_table.hpp:
	  
	  removing -Wall warnings

	* mtgl/subgraph_adapter.hpp:
	  
	  Getting rid of usage of broken brackets operator in hash tables.

2010-05-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/static_graph_adapter.hpp:
	  
	  Add default constructor to static_vertex_iterator. For some
	  unholy
	  reason, this changes how the XMT parallelizes the code in
	  test_static_graph6.cpp even though the compiler generated
	  constructor
	  should be identical to the one I added.

	* mtgl/Makefile.am, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_mesh_graph.hpp,
	  mtgl/gen_newmanbenchmark.hpp, mtgl/gen_plod_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/generate_dimacs_random_graph.hpp,
	  mtgl/generate_girvan_newman_graph.hpp,
	  mtgl/generate_mesh_graph.hpp, mtgl/generate_plod_graph.hpp,
	  mtgl/generate_rmat_graph.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_io.hpp, mtgl/read_binary.hpp, mtgl/read_dimacs.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrix_market.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/write_binary.hpp,
	  mtgl/write_dimacs.hpp, mtgl/write_matrix_market.hpp,
	  test/Makefile.am, test/custom2file.cpp, test/mtgl_test.cpp,
	  test/mtgl_test.h, test/mtgl_test.hpp, test/rmat2file.cpp,
	  test/test_allvisit.cpp, test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_dpmf.cpp,
	  test/test_dpmf_double.cpp, test/test_encount.cpp,
	  test/test_find_assortativity.cpp, test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_independent_set.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_knn.cpp,
	  test/test_knn.hpp, test/test_mask_search.cpp,
	  test/test_neighborhoods.cpp, test/test_newmanbenchmark.cpp,
	  test/test_oc.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_rmat.cpp,
	  test/test_snapshot.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_connectivity.cpp,
	  test/test_st_connectivity.hpp, test/test_st_search.cpp,
	  test/test_st_search.hpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_tri.cpp, test/test_vf2_isomorphism.cpp:
	  
	  This greatly improves the reading, writing, and generating of
	  different
	  graph types. See #3922.

2010-05-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_newmanbenchmark.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/pseudo_diameter.hpp,
	  mtgl/rand_fill.hpp, mtgl/random.h, mtgl/random_walk.hpp,
	  mtgl/snl_community.hpp, mtgl/ufl.h, test/test_oc.cpp:
	  
	  Fix a memory leak due to rand_fill::generate.

2010-04-30  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Add include of cmath.

2010-04-26  Jon Berry <jberry@sandia.gov>

	* doc/TracFooter.html, doc/TracHeader.html:
	  
	  dummy files for trac

	* tutorial/graphs/two_triangles.graph:
	  
	  example for triangle finding.

	* tutorial/triangles1.cpp:
	  
	  Example triangles algorithm call.

2010-04-23  Jon Berry <jberry@sandia.gov>

	* tutorial/input_output.cpp:
	  
	  Inserted an intentional compiler error to force people to
	  pick their own filenames so that they don't step on each other.

2010-04-22  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  linux running.

2010-04-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/static_graph.hpp, test/test_pagerank.cpp:
	  
	  Comment out printing of the graph in test_pagerank.cpp. Fix
	  parallel
	  in static_graph::init().

2010-04-22  Jon Berry <jberry@sandia.gov>

	* configure.ac:
	  
	  Fixing new and unhelpful automake defaults (which include -g,
	  which
	  turns off linear recurrences on the XMT).

2010-04-22  Greg Mackey <gemacke@sandia.gov>

	* test/test_static_graph6.cpp:
	  
	  Make more readable for tutorial.

2010-04-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Fix a couple of bugs in maxflow code.

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Fixes a couple of compile errors.

2010-04-21  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/snap_util.h,
	  test/custom2file.cpp, test/test_connection_subgraphs.cpp,
	  test/test_indset.cpp, test/test_snapshot.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph1.cpp,
	  test/test_tri.cpp:
	  
	  gcc 4.3.3 warnings removed

	* mtgl/Makefile.am, mtgl/SMVkernel.h,
	  mtgl/breadth_first_search.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/connectivity_visitor.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/st_connectivity.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/triangles.hpp, mtgl/vertex_betweenness.hpp,
	  test/Makefile.am, test/test_connection_subgraphs.cpp:
	  
	  - made connection subgraphs generic
	  - made triangles work with directed/undirected graphs
	  - reacted to recent changes in xmt_hash_table
	  - small fixes to vertex_betweenness

2010-04-16  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Modified a comment, no code changes.

2010-04-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/gen_rmat_graph.hpp, mtgl/mtgl_io.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/snap_util.h, mtgl/util.hpp,
	  test/custom2file.cpp, test/dictionary_encoding.cpp,
	  test/hashing_integers.cpp, test/hashing_integers_mod.cpp,
	  test/hashing_strings.cpp, test/test_hotel_hash_set.cpp,
	  test/test_hotel_hash_set_charstar.cpp, test/test_lp_hash_set.cpp,
	  test/test_lp_hash_set_charstar.cpp,
	  test/test_xmt_hash_table_eric.cpp,
	  test/test_xmt_hash_table_eric_charstar.cpp:
	  
	  Addresses #3921.

2010-04-15  kbwheel

	* mtgl/read_matrixmarket.hpp:
	  
	  fix race condition in finding starts (compiler not smart enough)

	* mtgl/read_matrixmarket.hpp:
	  
	  nodep allows the compiler to be smarter

	* mtgl/read_matrixmarket.hpp:
	  
	  make ansi compilers happy (since C++ doesnt really support
	  restrict pointers yet)

	* mtgl/read_matrixmarket.hpp:
	  
	  speed up reading matrix market files on the XMT by exploiting the
	  snapshot feature

2010-04-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp, test/test_xmt_hash_table.cpp:
	  
	  Really fixes the bug that Eric found in insert(). The error also
	  existed in insert_reuse(), so I fixed it there as well.

2010-04-15  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Added a fix to the insert method. It was missing an else clause.
	  Also, provisionally added a get_keys method that works much
	  better than using a visitor function to do the same thing.

2010-04-14  Greg Mackey <gemacke@sandia.gov>

	* test, tutorial:
	  
	  Updating svn:ignore for test and tutorial to ignore executables
	  and
	  compile files.

	* mtgl/adjacency_list.hpp, mtgl/adjacency_list_adapter.hpp,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp:
	  
	  Optimize iterators for graph adapters a bit.

2010-04-14  Jon Berry <jberry@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/vertex_betweenness.hpp:
	  
	  -Wall compilation, making vertex_betweenness generic

2010-04-14  Greg Mackey <gemacke@sandia.gov>

	* tutorial/example4.cpp:
	  
	  Change to using adjacency_list_adapter instead of graph_adapter.

	* mtgl/dynamic_array.hpp, mtgl/static_graph_adapter.hpp:
	  
	  Change template type parameters to use typename keyword instead
	  of class.
	  Also changed to using C++ style casting.

2010-04-14  Jon Berry <jberry@sandia.gov>

	* mtgl/dynamic_array.hpp, mtgl/metrics.hpp, mtgl/visit_adj.hpp:
	  
	  -Wall compilation

2010-04-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/adjacency_list.hpp,
	  mtgl/adjacency_list_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/components_visitor.hpp,
	  mtgl/connected_components.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/debug_utils.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_newmanbenchmark.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/hotel_hash_set.hpp, mtgl/mask_search.hpp, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_graph.hpp,
	  mtgl/mtgl_boost_tuple.hpp, mtgl/mtgl_search_edgetime.hpp,
	  mtgl/multimap.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/shiloach_vishkin.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/util.hpp, mtgl/vertex_betweenness.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/custom2file.cpp,
	  test/mtgl_test.h, test/test_connection_subgraphs.hpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp, test/test_knn.hpp,
	  test/test_st_connectivity.hpp, test/test_st_search.hpp,
	  test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp:
	  
	  Several modifications:
	  - Several files should have been in the mtgl namespace and
	  weren't. I
	  put them in the mtgl namespace.
	  - Removed mtgl_boost_graph.hpp and moved definitions of source()
	  and
	  target() to the adapters.
	  - Removed mtgl_boots_tuple.hpp as it shouldn't be used. We have
	  pair,
	  triple, and quadruple available in util.hpp.
	  - Removed some unnecessary includes.
	  - Deleted some commented out code.

	* mtgl/Makefile.am, mtgl/adjacency_list.hpp,
	  mtgl/adjacency_list_adapter.hpp, mtgl/al_graph.hpp,
	  mtgl/al_graph_adapter.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, test/test_static_graph4.cpp,
	  test/test_subgraph_isomorphism.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Renames al_graph_adapter to adjacency_list_adapter to conform
	  with BGL
	  and repairs the fallout. The class graph_adapter is now
	  deprecated.

	* mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp,
	  mtgl/dynamic_array.hpp, test/test_dynamic_array.cpp:
	  
	  Addresses #3905. Makes the add_vertices(), add_edges(),
	  remove_vertices(),
	  and remove_edges() functions work correctly and parallelize on
	  the XMT.
	  
	  Also add the test file for dynamic_array.

2010-04-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/SMVkernel.h, mtgl/VolVolume.h,
	  mtgl/al_graph.hpp, mtgl/bfs.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/closure.h,
	  mtgl/closure.hpp, mtgl/components_visitor.h,
	  mtgl/components_visitor.hpp, mtgl/connected_components.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/connectivity_visitor.h,
	  mtgl/connectivity_visitor.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/copier.h, mtgl/copier.hpp, mtgl/debug_utils.hpp,
	  mtgl/depth_first_search.hpp, mtgl/depth_first_search_visitor.h,
	  mtgl/depth_first_search_visitor.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/dynamic_array.h, mtgl/dynamic_array.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/gen_dimacsrandom_graph.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_newmanbenchmark.hpp,
	  mtgl/gen_plod_graph.hpp, mtgl/gen_rmat_graph.hpp, mtgl/graph.hpp,
	  mtgl/hash_defs.hpp, mtgl/hotel_hash_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/induced_subgraph.hpp,
	  mtgl/isomorphism_ullman.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/lp_hash_set.hpp, mtgl/mask_search.hpp,
	  mtgl/mask_search_visitor.h, mtgl/mask_search_visitor.hpp,
	  mtgl/merge_sort.hpp, mtgl/metrics.hpp, mtgl/mmio.cpp,
	  mtgl/mmio.h, mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_graph.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/multimap.hpp,
	  mtgl/neighborhoods.hpp, mtgl/psearch.hpp, mtgl/queue.h,
	  mtgl/queue.hpp, mtgl/rand_fill.hpp, mtgl/random.h,
	  mtgl/random_walk.hpp, mtgl/read_cluster_graph.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/scc_visitor.h,
	  mtgl/scc_visitor.hpp, mtgl/shiloach_vishkin.hpp,
	  mtgl/simple_dynamic_array.hpp, mtgl/snap_util.h,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/st_connectivity.hpp, mtgl/st_search.hpp,
	  mtgl/st_subgraph_search.hpp, mtgl/static_graph.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/stats.h, mtgl/stats.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/topsort.hpp, mtgl/treap.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/ull_state.hpp, mtgl/util.h, mtgl/util.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/GenOntology.cpp,
	  test/VolVolume.cpp, test/custom2file.cpp,
	  test/hashing_integers.cpp, test/hashing_integers_mod.cpp,
	  test/hashing_strings.cpp, test/mtgl_test.h,
	  test/test_allvisit.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_contraction.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_encount.cpp, test/test_find_assortativity.h,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp, test/test_find_triangles.cpp,
	  test/test_independent_set.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_knn.hpp, test/test_lp_hash_set.cpp,
	  test/test_lp_hash_set_charstar.cpp, test/test_mask_search.cpp,
	  test/test_merge_sort.cpp, test/test_mta_merge_sort.cpp,
	  test/test_mtgl_strtok.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_random_number_generator.cpp, test/test_rmat.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_st_connectivity.hpp, test/test_st_search.cpp,
	  test/test_st_search.hpp, test/test_static_graph4.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_tri.cpp, test/test_vf2_isomorphism.cpp,
	  test/test_xmt_hash_set.cpp, test/test_xmt_hash_table.cpp,
	  test/test_xmt_hash_table_eric.cpp,
	  test/test_xmt_hash_table_eric_charstar.cpp:
	  
	  Renamed a bunch of files with the .h extension to have the
	  extension
	  .hpp. This makes our file naming convention more consistent.

	* mtgl/al_graph.hpp, mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/closure.h, mtgl/connection_subgraphs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/copier.h,
	  mtgl/depth_first_search.hpp, mtgl/diffraction_array.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dynamic_array.h,
	  mtgl/gen_newmanbenchmark.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/metrics.hpp, mtgl/mtgl_adapter.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/psearch.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/simple_dynamic_array.hpp, mtgl/st_search.hpp,
	  mtgl/st_subgraph_search.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/triangles.hpp, mtgl/util.h,
	  mtgl/visit_adj.hpp, mtgl/xmt_hash_set.hpp,
	  mtgl/xmt_hash_table.hpp, test/GenOntology.cpp,
	  test/mtgl_test.cpp, test/test_allvisit.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_find_triangles.cpp,
	  test/test_knn.hpp, test/test_st_connectivity.hpp,
	  test/test_st_search.hpp, test/test_static_graph4.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_tri.cpp:
	  
	  Fixes #3915, #3916, #3917, and #3918.

2010-04-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/Makefile.am, mtgl/csr_graph.h, mtgl/csr_graph_adapter.hpp,
	  mtgl/mmgraph.h, mtgl/psearch_aux.hpp, mtgl/test_graph.hpp,
	  mtgl/test_graph_adapter.hpp, test/g_test.cpp,
	  test/load_mmap_graph.hpp, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/test_allvisit.cpp, test/test_bidirectional_graph.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp, test/test_csr_graph.cpp,
	  test/test_dpmf_double.cpp, test/test_find_assortativity.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_modularity.cpp, test/test_find_triangles.cpp,
	  test/test_g.cpp, test/test_independent_set.cpp,
	  test/test_knn.cpp, test/test_mask_search.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_rmat.cpp, test/test_st_connectivity.cpp,
	  test/test_st_search.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp:
	  
	  Removing mmgraph, test_graph, and csr_graph and cleaning up what
	  used
	  them. These are old graphs and adapters that aren't really used
	  anymore.
	  They need to be completely rewritten to work with the current
	  API. If
	  they are needed, they can be resurrected from the repository and
	  rewritten.
	  I'm getting rid of them for now to simplify the code base.

2010-04-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mtgl_string.h:
	  
	  New file to hold string processing functions. Right now has a
	  tokenizer.

	* test/test_mtgl_strtok.cpp:
	  
	  Tests the mtgl_strtok function.

2010-04-08  William McLendon <wcmclen@sandia.gov>

	* mtgl/bfs.hpp:
	  
	  BUG: numeric_limits requires the header file "limits" to be
	  included.

2010-04-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Made get_max_count a public method

	* mtgl/lp_hash_set.hpp:
	  
	  Added hash_defs.hpp and put in inlines for all the functions.

2010-04-07  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Fixed some errors with the write_array method.

2010-04-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp:
	  
	  Addresses #3876 for al_graph.

	* mtgl/Makefile.am, mtgl/al_graph_adapter.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/depth_first_search.hpp, mtgl/depth_first_search_visitor.h,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/induced_subgraph.h,
	  mtgl/mask_search.hpp, mtgl/metrics.hpp, mtgl/psearch.hpp,
	  mtgl/scc_visitor.h, mtgl/snl_community.hpp, mtgl/st_search.hpp,
	  mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/topsort_visitor.h, mtgl/transpose_adapter.hpp,
	  mtgl/triangles.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Addresses #3912 and #3913.

	* mtgl/al_graph.hpp:
	  
	  Got the XMT compiler to parallelize everything, but there's a bug
	  in
	  the parallel implementation causing a runtime error.

	* mtgl/al_graph_adapter.hpp:
	  
	  Got rid of Edge->other(), so change to using the code directly.

2010-04-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.hpp:
	  
	  The functions remove_vertices() and remove_edges() now work in
	  serial.
	  This addresses part of #3905.

2010-04-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  test/test_xmt_hash_set.cpp, test/test_xmt_hash_table.cpp:
	  
	  Change to use mt_timer and update comments.

2010-04-02  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/multimap.hpp:
	  
	  Started to add the ability to read and write the multimap to the
	  file system.

2010-04-01  Greg Mackey <gemacke@sandia.gov>

	* test/Makefile.am:
	  
	  Fixes bug where test_sssp_deltastepping.cpp would not compile on
	  the XMT.

	* mtgl/copier.h:
	  
	  Fix compile error.

	* mtgl/Makefile.am, mtgl/connected_components.hpp, mtgl/copier.h,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_plod_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/hash_set.h, mtgl/hash_table.h,
	  mtgl/metrics.hpp, mtgl/shiloach_vishkin.hpp, mtgl/triangles.hpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_encount.cpp, test/test_find_assortativity.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_modularity.cpp, test/test_independent_set.cpp,
	  test/test_neighborhoods.cpp, test/test_newmanbenchmark.cpp,
	  test/test_oc.cpp, test/test_snl_community3.cpp:
	  
	  Getting rid of hash_set.hpp and hash_table.hpp as they are
	  deprecated in
	  favor of xmt_hash_set.hpp and xmt_hash_table.hpp.

	* test/test_xmt_hash_set.cpp:
	  
	  Not much.

	* mtgl/xmt_hash_table.hpp:
	  
	  Get rid of commented out code.

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fix a bug in insert_reuse().

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  test/test_xmt_hash_set.cpp:
	  
	  Adding test for xmt_hash_set, and improving comments.

	* mtgl/xmt_hash_set.hpp:
	  
	  Update the hash set to the new version.

	* mtgl/gen_rmat_graph.hpp, mtgl/hash_defs.hpp, mtgl/hash_set.h,
	  mtgl/mtgl_io.hpp, mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fix compile errors on linux with gcc.

2010-03-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/hash_defs.hpp, mtgl/util.h, mtgl/xmt_hash_table.hpp,
	  test/hashing_integers_mod.cpp, test/test_xmt_hash_table.cpp,
	  test/test_xmt_hash_table_eric.cpp,
	  test/test_xmt_hash_table_eric_charstar.cpp:
	  
	  Addresses #3910 and #3911. All the hash table functions, at least
	  for
	  my tests, are now scalable up to 64 procs. Woohoo! I also updated
	  some of Eric Goodman's hash table tests and added analogous test
	  for
	  the xmt_hash_table.

2010-03-29  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Encapsulated the indexing within a method.

2010-03-25  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/rdf_quad.hpp:
	  
	  Not sure this should go here, or if it is a long term solution,
	  but this class represents a rdf quad.

	* test/dictionary_encoding.cpp:
	  
	  Adding ability to create indices for ontological triples.
	  However, it is in a half-baked state due to weird compiler issue.

	* mtgl/multimap.hpp:
	  
	  Small change to get_index method

	* mtgl/multimap.hpp:
	  
	  Preliminary start on multimap.

	* mtgl/allocation_pool.hpp:
	  
	  First commit for allocation pool. Used by multimap.

	* mtgl/mtgl_io.hpp:
	  
	  Refactored snapshot_ints to be more general: read_array. Also
	  added a method for writing the array.

2010-03-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/gen_plod_graph.hpp, mtgl/ull_state.hpp, mtgl/util.h,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  test/hashing_integers.cpp, test/hashing_strings.cpp,
	  test/test_lp_hash_set.cpp, test/test_lp_hash_set_charstar.cpp:
	  
	  Update hashing test programs. Improve default_hash_function and
	  default_eqfcn. Clean up util.h to get rid of unused and
	  unneccesary
	  code and repair the fallout.

2010-03-24  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Changed tabs to be 2 spaces instead of 4 to match convention

2010-03-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Get rid of a few unused variables.

2010-03-19  William McLendon <wcmclen@sandia.gov>

	* mtgl/dneighborhoods.hpp:
	  
	  BUG: Windows doesn't have gettimeofday, modified the Wtime
	  function to get around this compile error
	  . For now, it will just return 0.0 on a windows platform.

2010-03-19  kbwheel

	* test/test_cc.cpp:
	  
	  CC *MUST* use undirected graphs

2010-03-19  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Fixed spelling typo

2010-03-18  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Added the ability to print the output

2010-03-17  William McLendon <wcmclen@sandia.gov>

	* mtgl/util.h, mtgl/xmt_hash_table.hpp:
	  
	  ENH: Moved the WIN32 typedef section from the xmt_hash_table.hpp
	  into util.h since util.h is a more central file in the library
	  for greater compatiblity with Windows Titan builds.

2010-03-17  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  vtk compilation

2010-03-16  William McLendon <wcmclen@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  BUG: uint64_t is not defined in windows. Added stdint.h which
	  should provide this.

2010-03-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/depth_first_search.hpp, mtgl/psearch.hpp, mtgl/ufl.h,
	  mtgl/util.h, test/test_merge_sort.cpp,
	  test/test_pagerank_bidir.cpp, test/test_static_graph3.cpp:
	  
	  Fixes #3909.

	* test/test_merge_sort.cpp:
	  
	  Formatting and changing includes.

2010-03-15  Jon Berry <jberry@sandia.gov>

	* test/test_neighborhoods.cpp:
	  
	  Fixes to XMT version (reading from .srcs).

	* mtgl/dneighborhoods.hpp, mtgl/metrics.hpp, mtgl/util.h:
	  
	  XMT-inspired fixes to neighborhood computations.

2010-03-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/lp_hash_set.hpp, mtgl/mtgl_io.hpp,
	  test/hashing_integers.cpp, test/test_lp_hash_set.cpp:
	  
	  Updates to make performance of lp_hash_set the same as that of
	  the
	  direct implementation in hashing_integers.cpp. Updated
	  hashing_integers
	  and test_lp_hash_set to be consistent with one another.

2010-03-15  kbwheel

	* mtgl/read_matrixmarket.hpp:
	  
	  update to avoid sscanf, use mmap, and fix valgrind complaints

2010-03-13  Jon Berry <jberry@sandia.gov>

	* test/test_neighborhoods.cpp:
	  
	  testing static_graph_adapter

	* test/test_tri.cpp:
	  
	  changes in run method return type.

	* mtgl/dneighborhoods.hpp, mtgl/triangles.hpp:
	  
	  works with static_graph_adapter (hashtable for eweight replaced
	  by array lookup).

	* mtgl/triangles.hpp:
	  
	  removed deprecated specialization of find_triangles for
	  static_graph_adapter.

2010-03-11  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Added mtgl_io.hpp include

	* test/hashing_strings.cpp:
	  
	  Added mtgl_io.hpp include

	* test/hashing_integers.cpp:
	  
	  Added mtgl_io include

	* test/test_lp_hash_set_charstar.cpp:
	  
	  Added mtgl_io.hpp include

	* test/test_lp_hash_set.cpp:
	  
	  Added mtgl_io.hpp as include

	* mtgl/random_number_generator.hpp:
	  
	  Refactored names

	* mtgl/diffraction_array.hpp:
	  
	  Refactored names of things

	* mtgl/simple_dynamic_array.hpp:
	  
	  Renamed things to have _ instead of Capitals

	* test/test_random_number_generator.cpp:
	  
	  Changed the function call from getRandomNumber to
	  get_random_number

	* test/dictionary_encoding.cpp:
	  
	  Now has the ability to output the translated file.

	* mtgl/mtgl_io.hpp:
	  
	  Added stdio and stdlib to the includes

	* mtgl/lp_hash_set.hpp:
	  
	  Committing the changes that Greg made.

2010-03-10  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/static_graph.hpp:
	  
	  Added a nodep to a for loop in the init() method of the
	  bidirectional template. Without the nodep I was getting serial.

	* mtgl/read_dimacs_graph.hpp:
	  
	  get_file_size was moved to mtgl_io.hpp, so I added the include
	  statement.

2010-03-09  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Added functionality to output the translated set of
	  triples/quads.

2010-03-09  William McLendon <wcmclen@sandia.gov>

	* mtgl/snap_util.h:
	  
	  COMPATIBILITY: Put #ifndef WIN32 guards around the
	  #include<stdint.h> directive for compatibility in a windows
	  environment for the Titan library.

2010-03-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_adapter.hpp:
	  
	  Addresses #3908.

2010-03-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Adds the resize feature from #3907.

	* test/test_xmt_hash_table.cpp:
	  
	  Adding test for the xmt_hash_table.

	* mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp:
	  
	  Fixes #3906.
	  
	  Addresses part of #3905. This is a first cut at a revamped
	  add_vertices()
	  and add_edges() and adding remove_vertices() and remove_edges().

2010-03-04  Greg Mackey <gemacke@sandia.gov>

	* tutorial/exercise4.cpp:
	  
	  Remove a commented out line.

	* tutorial/exercise2.cpp, tutorial/exercise3.cpp,
	  tutorial/exercise4.cpp:
	  
	  Updates to exercises to get the compiler to parallelize. I got it
	  to
	  work without using assert parallel.

2010-03-03  Greg Mackey <gemacke@sandia.gov>

	* tutorial/graphs/indset.dests, tutorial/graphs/indset.srcs,
	  tutorial/graphs/triangle.dests, tutorial/graphs/triangle.srcs:
	  
	  Adding srcs / dests forms of the triangle and independent set
	  graphs.

2010-03-03  Jon Berry <jberry@sandia.gov>

	* mtgl/SMVkernel.h:
	  
	  doxygen

	* doc/Doxyfile, mtgl/bfs.hpp, mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/neighborhoods.hpp, mtgl/psearch.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/triangles.hpp,
	  test/test_neighborhoods.cpp, test/test_tri.cpp:
	  
	  Doxygen changes, primarily.

2010-03-02  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  The add function didn't have the template parameter for the
	  updated array. Changed it from int * to K*.

2010-03-02  Jon Berry <jberry@sandia.gov>

	* mtgl/connection_subgraphs.hpp, mtgl/debug_utils.hpp:
	  
	  titan compilation

2010-02-28  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_io.hpp, mtgl/util.h:
	  
	  try again... missed one.

	* mtgl/mtgl_io.hpp, mtgl/util.h:
	  
	  Isolate SWORKER_EP into mtgl_io.hpp.

2010-02-26  William McLendon <wcmclen@sandia.gov>

	* mtgl/st_search.hpp:
	  
	  STYLE: Added a space or two around some #ifdef'd blocks that
	  contain debugging messages to make code a little more readable.

2010-02-25  William McLendon <wcmclen@sandia.gov>

	* mtgl/connection_subgraphs.hpp:
	  
	  ENH: Updated connection subgraphs code to changes in
	  dynamic_array and also to support the degree(v,ga) function.
	  Should work with trunk now.

2010-02-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  Add versions of read and write that accept const char*. Just
	  recast to
	  non-const for now. I'm not sure how safe this is, but for now it
	  works...

	* tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/exercise1.cpp, tutorial/exercise2.cpp,
	  tutorial/exercise3.cpp, tutorial/exercise4.cpp,
	  tutorial/graphs/indset.graph, tutorial/input_output.cpp,
	  tutorial/property_maps1.cpp:
	  
	  Add exercises. Some minor updates.

2010-02-22  Greg Mackey <gemacke@sandia.gov>

	* tutorial/graphs, tutorial/graphs/triangle.graph,
	  tutorial/triangle.graph:
	  
	  Move graph to graphs subdirectory.

	* tutorial/subgraph_isomorphism3.cpp,
	  tutorial/subgraph_isomorphism4.cpp:
	  
	  Add new subgraph isomorphism example. Update another.

2010-02-21  Greg Mackey <gemacke@sandia.gov>

	* tutorial/subgraph_isomorphism3.cpp:
	  
	  Adding a subgraph isomorphism tutorial.

	* mtgl/euler_tour.hpp, tutorial/subgraph_isomorphism1.cpp,
	  tutorial/subgraph_isomorphism2.cpp:
	  
	  Updates to subgraph isomorphism tutorial examples. Fixed a couple
	  of
	  compile errors in euler_tour.

	* mtgl/contraction_adapter.hpp, mtgl/filter_graph.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_dyn_graph.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_subgraph_isomorphism.cpp,
	  test/test_vf2_isomorphism.cpp,
	  tutorial/subgraph_isomorphism2.cpp:
	  
	  Fixes #3902, #3903, and #3904.

2010-02-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp:
	  
	  Change a comment.

	* mtgl/filter_graph.hpp, mtgl/subgraph_isomorphism.hpp,
	  tutorial/subgraph_isomorphism1.cpp,
	  tutorial/subgraph_isomorphism2.cpp:
	  
	  Update subgraph isomorphsim examples and do some slight updates
	  to the
	  comparators for subgraph_isomorphism and filter_graph.

2010-02-19  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Fixed some bugs

2010-02-18  Greg Mackey <gemacke@sandia.gov>

	* tutorial/property_maps1.cpp, tutorial/property_maps2.cpp,
	  tutorial/property_maps3.cpp:
	  
	  Adding examples for using property maps.

2010-02-18  Eric Goodman <elgoodm@sandia.gov>

	* test/dictionary_encoding.cpp:
	  
	  Uses lp_hash_set.hpp to do dictionary encoding of rdf triples.

2010-02-18  Greg Mackey <gemacke@sandia.gov>

	* tutorial/subgraph_isomorphism1.cpp,
	  tutorial/subgraph_isomorphism2.cpp:
	  
	  Adding code for subgraph isomorphism tutorial.

2010-02-17  Greg Mackey <gemacke@sandia.gov>

	* tutorial/example5.cpp, tutorial/input_output.cpp:
	  
	  Renaming a file.

	* tutorial/example5.cpp:
	  
	  Updates.

2010-02-17  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Added get_num_unique_keys method to all the templates.

2010-02-16  Greg Mackey <gemacke@sandia.gov>

	* tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/example5.cpp:
	  
	  Few more updates to tutorials.

	* tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/example5.cpp:
	  
	  Few small updates to tutorial examples.

	* mtgl/duplicate_adapter.hpp, mtgl/filter_graph.hpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Fix a few errors to get test_subgraph_isorphism.cpp working
	  again.

	* test/test_subgraph_isomorphism.cpp:
	  
	  Update the subgraph isomorphism test to work with the new
	  version.

	* mtgl/subgraph_adapter.hpp:
	  
	  Removing const from graph adapter passed to
	  init_{vertices,edges}()
	  functions as they modify the graph.

	* mtgl/al_graph_adapter.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp:
	  
	  Addresses #3901. Adds the in_adjacency_iterator type.

2010-02-16  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Changed mt_incr(&variable, value) to mt_incr(variable, value).
	  Surprisingly, the old way worked, too.

2010-02-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/static_graph.hpp, mtgl/util.h, tutorial/example1.cpp,
	  tutorial/example2.cpp, tutorial/example3.cpp,
	  tutorial/example4.cpp, tutorial/example5.cpp:
	  
	  The file static_graph.hpp needs to include util.h. Consequently,
	  the
	  tutorial examples don't. Also, remove the definition for the
	  Triple
	  class from util.h since it has been superceded by new triple
	  class.

	* tutorial/example2.cpp, tutorial/example3.cpp,
	  tutorial/example4.cpp, tutorial/example5.cpp:
	  
	  Small changes.

2010-02-15  Greg Mackey <gemacke@sandia.gov>

	* tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/example5.cpp, tutorial/triangle.graph:
	  
	  Further updates to examples.

2010-02-12  Jon Berry <jberry@sandia.gov>

	* test/mtgl_test.h:
	  
	  This file is deprecated anyway, but it had a compilation issue
	  with the io
	  change.

2010-02-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/mtgl_io.hpp:
	  
	  The functions read_binary() and write_binary() parallelize
	  correctly
	  now.

	* mtgl/mtgl_io.hpp:
	  
	  Changed the interface to read_binary(). The user now specifies an
	  alternate record type instead of an alternate record size. I
	  added
	  the ability to have an alternate record type in write_binary() as
	  well.

2010-02-11  Greg Mackey <gemacke@sandia.gov>

	* tutorial/example4.cpp, tutorial/example5.cpp:
	  
	  Updates to tutorials.

	* mtgl/read_dimacs_graph.hpp:
	  
	  Fix compiler const warnings on XMT. Also, simplified some logic
	  to
	  make XMT and non-XMT case the same. They were different because
	  the
	  const warnings had been fixed on linux, but not on the XMT.

	* mtgl/mtgl_io.hpp:
	  
	  Oops. Forgot to add the mtgl_io.hpp file.

	* mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/static_graph.hpp,
	  mtgl/static_graph_adapter.hpp, test/mtgl_test.h,
	  test/test_bfs.cpp, test/test_cc.cpp, test/test_indset.cpp,
	  test/test_neighborhoods.cpp, test/test_pagerank.cpp,
	  test/test_snapshot.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp, test/test_tri.cpp,
	  tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/example5.cpp:
	  
	  Addresses #3899 and #3900. Also updates tutorials.

2010-02-10  Jon Berry <jberry@sandia.gov>

	* README:
	  
	  fajkl

2010-02-10  Greg Mackey <gemacke@sandia.gov>

	* tutorial, tutorial/example1.cpp, tutorial/example2.cpp,
	  tutorial/example3.cpp, tutorial/example4.cpp,
	  tutorial/example5.cpp:
	  
	  Adding tutorial examples.

2010-02-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.h:
	  
	  Really fixes #3898. Triples, quadruples, and tie() will work this
	  time.
	  Trust me. :)

2010-02-05  kbwheel

	* mtgl/bfs.hpp:
	  
	  fix for non-XMT performance (from Jon); reverting an accidental
	  change in revision 2309

2010-02-05  Eric Goodman <elgoodm@sandia.gov>

	* test/test_lp_hash_set.cpp:
	  
	  Made the priming line only one iteration.

2010-02-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/metrics.hpp, mtgl/shiloach_vishkin.hpp, mtgl/triangles.hpp,
	  mtgl/util.h, test/mtgl_test.cpp, test/test_find_triangles.cpp,
	  test/test_tri.cpp, test/ufl.cpp:
	  
	  Addresses #3898.

2010-02-01  kbwheel

	* mtgl/read_dimacs_graph.hpp:
	  
	  fix compiler warnings on non-MTA

2010-01-28  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_dimacs_graph.hpp:
	  
	  Added some more #ifdef __MTA__ type semantics that I don't really
	  like. The read_graph_edge array needs a closer look to see if we
	  can get rid of those.

2010-01-28  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/pagerank.hpp, mtgl/triangles.hpp,
	  mtgl/visit_adj.hpp, test/test_bfs.cpp:
	  
	  Some cleanup.

2010-01-28  kbwheel

	* mtgl/read_dimacs_graph.hpp:
	  
	  fix compile errors related to const char* violations

2010-01-27  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_dimacs_graph.hpp:
	  
	  Removed bug with duplicate declaration.

2010-01-27  kbwheel

	* mtgl/pagerank.hpp:
	  
	  move declaration of loop indices so that they are only declared
	  if the loops are used

	* mtgl/gen_rmat_graph.hpp:
	  
	  remove unused "stop" variable

	* mtgl/mmio.hpp:
	  
	  errors are detected via NULL return, not setting an unused error
	  variable

	* mtgl/visit_adj.hpp:
	  
	  comment-out unused variables

	* mtgl/connected_components.hpp:
	  
	  remove unused variable "next"

	* test/test_bfs.cpp:
	  
	  remove unused variable "ind"

2010-01-27  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/read_dimacs_graph.hpp:
	  
	  Added ability to restore dimacs graph.

2010-01-27  kbwheel

	* config/mtgl_check_qthreads.m4:
	  
	  handle cprops a little better

2010-01-26  kbwheel

	* mtgl/dynamic_array.h, mtgl/triangles.hpp, mtgl/util.h:
	  
	  fix compiler warnings

	* mtgl/gen_rmat_graph.hpp:
	  
	  fix compiler warnings

	* mtgl/read_dimacs_graph.hpp:
	  
	  fix compiler warnings

	* mtgl/bfs.hpp:
	  
	  reduce stack usage, and fix a few compiler warnings

	* mtgl/static_graph_adapter.hpp:
	  
	  fix compiler warning about unsigned

	* mtgl/visit_adj.hpp:
	  
	  remove unused variables (according to the compiler)

	* mtgl/connected_components.hpp:
	  
	  reduce stack usage when possible

	* test/test_bfs.cpp:
	  
	  fix compiler warnings

	* test/test_cc.cpp:
	  
	  better qthread initialization

	* mtgl/connected_components.hpp:
	  
	  missing semicolon

2010-01-25  Eric Goodman <elgoodm@sandia.gov>

	* test/test_merge_sort.cpp:
	  
	  Looks like merge_sort.cpp got changed to merge_sort.hpp.

2010-01-21  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Fixed error with calculating table size.

2010-01-12  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Removed #define's related to hotelhash strategy.

	* mtgl/lp_hash_set.hpp:
	  
	  Changed the implementation of how updated keys are kept. Now we
	  just store a growing array of keys that have been modified,
	  instead of having an array where each element indicates if the
	  slot has been modified.

	* test/hashing_integers.cpp:
	  
	  Simple implementation of two-step acquisition process to hash
	  integers.

	* test/hashing_strings.cpp:
	  
	  Example class that hashes char* using the two-step acquisition
	  process.

2010-01-11  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Added some logic to handle the case where we need to keep track
	  of what has been updated.

	* test/test_lp_hash_set.cpp:
	  
	  Added using namespace mtgl

2010-01-11  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp:
	  
	  expand_one_edge routine. It was tested in another form once on
	  the xmt,
	  but it's not yet reliable. This should be called in the while
	  loop of
	  bfs_chunked, and used as the level set expansion primitive.

2010-01-08  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/lp_hash_set.hpp:
	  
	  Updated the get_concise_key function.

	* mtgl/lp_hash_set.hpp:
	  
	  Added destructor

2010-01-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Got rid of executable bit being set.

2009-12-23  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/visit_adj.hpp:
	  
	  Fixed recently-introduced bug in the version of visit_adj
	  that goes through all vertices in the graph.

2009-12-22  Eric Goodman <elgoodm@sandia.gov>

	* test/test_lp_hash_set_charstar.cpp:
	  
	  Changed the sequence of where the set gets deleted.

	* test/test_lp_hash_set_charstar.cpp:
	  
	  Cleaned up the code a bit.

	* test/test_lp_hash_set.cpp:
	  
	  Cleaned up the code a bit.

2009-12-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/test_graph_adapter.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Addresses #3897.

2009-12-21  Eric Goodman <elgoodm@sandia.gov>

	* test/test_lp_hash_set.cpp:
	  
	  Main method to test the lp_hash_set.hpp file.

	* mtgl/lp_hash_set.hpp:
	  
	  Based on the hotel_hash_set.hpp but removed all the hotel hashing
	  stuff to just have a basic linear probing implementation with the
	  two-step acquire method.

	* mtgl/hotel_hash_set.hpp:
	  
	  Added some conditionals to the constructor of the
	  abstract_hash_set so that the local structures only get created
	  if uselocal is true.

2009-12-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/filter_graph.hpp, mtgl/gen_dimacsrandom_graph.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_newmanbenchmark.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/induced_subgraph.h,
	  mtgl/isomorphism_ullman.hpp, mtgl/maximum_density_subgraph.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/read_cluster_graph.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/st_search.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/triangles.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/custom2file.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.h, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_contraction.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp,
	  test/test_find_modularity.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_neighborhoods.cpp, test/test_newmanbenchmark.cpp,
	  test/test_oc.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph1.cpp,
	  test/test_static_graph4.cpp, test/test_subgraph_isomorphism.cpp,
	  test/test_tri.cpp, test/test_vf2_isomorphism.cpp:
	  
	  Address #3896.

	* mtgl/al_graph_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/connectivity_visitor.h, mtgl/contraction_adapter.hpp,
	  mtgl/csr_graph.h, mtgl/csr_graph_adapter.hpp,
	  mtgl/debug_utils.hpp, mtgl/depth_first_search.hpp,
	  mtgl/depth_first_search_visitor.h,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/filter_graph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/independent_set.hpp, mtgl/induced_subgraph.h,
	  mtgl/isomorphism_ullman.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/mask_search.hpp, mtgl/maximum_density_subgraph.hpp,
	  mtgl/metrics.hpp, mtgl/mmgraph.h, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/psearch.hpp, mtgl/pseudo_diameter.hpp, mtgl/random_walk.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/scc_visitor.h,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/st_search.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/topsort_visitor.h, mtgl/transpose_adapter.hpp,
	  mtgl/triangles.hpp, mtgl/vertex_betweenness.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/mtgl_boost_test.cpp,
	  test/test_allvisit.cpp, test/test_bidirectional_graph.cpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_connected_components.cpp, test/test_contraction.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_encount.cpp, test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_triangles.cpp, test/test_g.cpp,
	  test/test_indset.cpp, test/test_isomorphism_ullman.cpp,
	  test/test_neighborhoods.cpp, test/test_newmanbenchmark.cpp,
	  test/test_oc.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_rmat.cpp,
	  test/test_snapshot.cpp, test/test_snl_community3.cpp,
	  test/test_st_search.hpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph4.cpp,
	  test/test_subgraph_isomorphism.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Addresses #3894 and #3895.

2009-12-17  William McLendon <wcmclen@sandia.gov>

	* mtgl/queue.h:
	  
	  BUG: Fixed an issue in the clear method that can help resolve
	  some double-free problems.

2009-12-17  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community.hpp:
	  
	  "typename" fix.

2009-12-16  William McLendon <wcmclen@sandia.gov>

	* mtgl/Makefile.am, test/Makefile.am:
	  
	  BUG: Pulled build lines for vf_isomorphism code and
	  ullman_isomorphism codes; exact isomorphism codes are still a bit
	  of a work in progress.

2009-12-16  Greg Mackey <gemacke@sandia.gov>

	* test/custom2file.cpp:
	  
	  Fix a compile error.

	* mtgl/al_graph_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/debug_utils.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_graph.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/graph_traits.hpp, mtgl/independent_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_ullman.hpp,
	  mtgl/k_distance_neighborhood.hpp,
	  mtgl/maximum_density_subgraph.hpp, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_search_edgetime.hpp,
	  mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/print_dimacs_to_file.hpp, mtgl/psearch.hpp,
	  mtgl/psearch_aux.hpp, mtgl/pseudo_diameter.hpp,
	  mtgl/random_walk.hpp, mtgl/recursive_dcsc.hpp, mtgl/serqsort.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/st_connectivity.hpp, mtgl/st_search.hpp,
	  mtgl/st_subgraph_search.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp, mtgl/triangles.hpp,
	  mtgl/ull_state.hpp, mtgl/util.h, mtgl/vertex_betweenness.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/custom2file.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/rmat2file.cpp, test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community.cpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_contraction.cpp,
	  test/test_csr_graph.cpp, test/test_dpmf.cpp,
	  test/test_dpmf_double.cpp, test/test_dyn_graph.cpp,
	  test/test_encount.cpp, test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_independent_set.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_knn.hpp,
	  test/test_mask_search.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_pagerank.cpp, test/test_pagerank_bidir.cpp,
	  test/test_rmat.cpp, test/test_snapshot.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_st_connectivity.hpp, test/test_st_search.cpp,
	  test/test_st_search.hpp, test/test_static_graph1.cpp,
	  test/test_static_graph2.cpp, test/test_static_graph3.cpp,
	  test/test_static_graph4.cpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_subgraph_isomorphism.cpp, test/test_tri.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Addresses #3893.

2009-12-15  kbwheel

	* test/test_pagerank.cpp:
	  
	  handle the threading argument better

	* test/test_bfs.cpp:
	  
	  handle the threading argument better

2009-12-14  Greg Mackey <gemacke@sandia.gov>

	* test/test_static_graph6.cpp:
	  
	  Set to test 5 different versions of compute in degree.

	* test/test_static_graph6.cpp:
	  
	  Change to pragmas.

	* test/test_static_graph6.cpp:
	  
	  Update to work better with new iterators and made all
	  compute_in_degree
	  tests consistent.

2009-12-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Fix compile errors for disjoint_paths_max_flow.hpp.

	* mtgl/al_graph_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/debug_utils.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_graph.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/independent_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_ullman.hpp,
	  mtgl/k_distance_neighborhood.hpp, mtgl/mask_search.hpp,
	  mtgl/maximum_density_subgraph.hpp, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_graph.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/psearch.hpp, mtgl/pseudo_diameter.hpp,
	  mtgl/recursive_dcsc.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_search.hpp,
	  mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/topsort.hpp, mtgl/topsort_visitor.h,
	  mtgl/transpose_adapter.hpp, mtgl/triangles.hpp,
	  mtgl/ull_state.hpp, mtgl/util.h, mtgl/vertex_betweenness.hpp,
	  mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp,
	  mtgl/vf_isomorphism_base.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/g_test.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.h,
	  test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_bidirectional_graph.cpp, test/test_cc.cpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_connected_components.cpp, test/test_contraction.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_neighborhoods.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_pagerank_bidir.cpp, test/test_rmat.cpp,
	  test/test_snapshot.cpp, test/test_snl_community3.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_search.hpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph4.cpp,
	  test/test_static_graph6.cpp, test/test_subgraph_isomorphism.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Adresses #3892, a refactoring of the iterators.

2009-12-10  Eric Goodman <elgoodm@sandia.gov>

	* test/hashing_integers_mod.cpp:
	  
	  I simple example of how to use the two-step acquistion process
	  for integers, using the modulus operator to find the correct
	  location in the array.

2009-12-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/mask_search.hpp,
	  mtgl/pseudo_diameter.hpp, mtgl/vertex_betweenness.hpp:
	  
	  Remove executable bit being set for source files.

2009-12-09  Greg Mackey <gemacke@sandia.gov>

	* test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_rmat.cpp:
	  
	  Got rid of the execute bit being set on several source files.

2009-12-03  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Added a method to permute an array.

2009-12-03  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp, mtgl/visit_adj.hpp:
	  
	  qthreaded -Wall compilation

2009-12-02  Jon Berry <jberry@sandia.gov>

	* mtgl/VolVolume.h, mtgl/contraction_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/k_distance_neighborhood.hpp,
	  mtgl/snl_community3.hpp, mtgl/subgraph_adapter.hpp, mtgl/ufl.h,
	  mtgl/xmt_hash_table.hpp, test/VolVolume.cpp,
	  test/test_community3.cpp:
	  
	  misc compilation updates

	* mtgl/util.h:
	  
	  qthreads compilation

	* mtgl/bfs.hpp, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/visit_adj.hpp:
	  
	  -Wall compilation

2009-12-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/util.h, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/mtgl_boost_test.cpp,
	  test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_contraction.cpp, test/test_dyn_graph.cpp,
	  test/test_neighborhoods.cpp, test/test_pagerank_bidir.cpp,
	  test/test_snl_community3.cpp, test/test_static_graph1.cpp,
	  test/test_static_graph2.cpp, test/test_static_graph3.cpp,
	  test/test_static_graph4.cpp, test/test_static_graph6.cpp:
	  
	  Addresses #3891.

2009-12-02  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.h:
	  
	  Added convenience method for getting the size of a file via
	  snapshot.

	* mtgl/hotel_hash_set.hpp:
	  
	  Fixed typo

	* mtgl/hotel_hash_set.hpp:
	  
	  Added functionality to get a concise list of keys.

2009-12-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Revised comments a bit.

2009-12-01  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Addresses #3890. Adds the new algorithm for subgraph isomorphism.
	  Also adds get_vertex() to several graph adapters that were
	  missing it.

2009-11-30  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bfs.hpp, mtgl/visit_adj.hpp:
	  
	  Optimized bfs_chunked and got rid of an error. This is the
	  version used
	  for my SC09 talk.

2009-11-24  Greg Mackey <gemacke@sandia.gov>

	* test/test_static_graph6.cpp:
	  
	  Add fully mtgl-ized version of test.

2009-11-18  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.h:
	  
	  Added default hash and equality functions for char*

	* mtgl/hotel_hash_set.hpp:
	  
	  Changed the insert function to be the third template parameter.
	  Also, added functions to get the raw table data. Finally, added a
	  bug fix for when collisions occur.

2009-11-16  Jon Berry <jberry@sandia.gov>

	* test/test_static_graph6.cpp:
	  
	  version used for sc09 results.

	* test/test_static_graph6.cpp:
	  
	  linux compilation and debugging

	* test/test_static_graph6.cpp:
	  
	  new version of visit_adj leverages loop collapse.

2009-11-15  Jon Berry <jberry@sandia.gov>

	* test/test_static_graph6.cpp:
	  
	  mtgl-ized visit_adj uses loop collapse with generic functor.

2009-11-13  Eric Goodman <elgoodm@sandia.gov>

	* test/test_hotel_hash_set.cpp:
	  
	  Doesn't use local buffers now and primes the array.

	* test/test_hotel_hash_set_charstar.cpp:
	  
	  Example of using the hotel hash set for char star arrays

2009-11-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/metrics.hpp:
	  
	  Get rid of a memory leak.

2009-11-11  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/hotel_hash_set.hpp:
	  
	  Added a insert_global function so that you can bypass the local
	  arrays and go straight to the global array.

	* mtgl/hotel_hash_set.hpp:
	  
	  I moved the insert function template argument from being the last
	  to the third. The insert function is
	  probably more likely to be modified than the hash or equlity
	  functions.

	* test/test_hotel_hash_set.cpp:
	  
	  I changed hotel_hash_set.hpp so that the insert function is the
	  third template argument instead of the last, so propagating the
	  change to the test file.

2009-11-04  Greg Mackey <gemacke@sandia.gov>

	* mtgl/static_graph_adapter.hpp, mtgl/util.h, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table.hpp, test/test_static_graph5.cpp,
	  test/test_static_graph6.cpp:
	  
	  Addresses #3889. Optimizes visit_adj() with the biggest
	  optimization being
	  changing the chunk size from 50 to 256. Also some other small
	  miscellaneous
	  changes.

2009-11-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/static_graph_adapter.hpp:
	  
	  Addresses #3888. Optimizes some of the static_graph_adapter
	  iterators.

2009-11-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Fix having to define values when compiling rand_fill.hpp.

2009-10-30  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph.hpp:
	  
	  Make several functions inline so there won't be duplicate symbols
	  during
	  a compile.

	* test/test_static_graph5.cpp, test/test_static_graph6.cpp:
	  
	  Change static_graph to use new templated type declaration.

2009-10-27  Jon Berry <jberry@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  get_keys ---> return an array of all of the keys

	* mtgl/merge_sort.hpp:
	  
	  Namespace mtgl

2009-10-20  Jon Berry <jberry@sandia.gov>

	* mtgl/treap.hpp, test/test_treap.cpp:
	  
	  Kamesh's treap data structure

2009-10-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/triangles.hpp,
	  test/test_bidirectional_graph.cpp:
	  
	  Fix some compiler issues on the XMT.

	* mtgl/Makefile.am, mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp,
	  mtgl/bfs.hpp, mtgl/bidirectional_graph.hpp,
	  mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/gen_dimacsrandom_graph.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_rmat_graph.hpp, mtgl/graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/maximum_density_subgraph.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/psearch.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp, mtgl/triangles.hpp,
	  test/custom2file.cpp, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/rmat2file.cpp, test/test_badrank.cpp, test/test_bfs.cpp,
	  test/test_cc.cpp, test/test_connected_components.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp,
	  test/test_encount.cpp, test/test_indset.cpp,
	  test/test_isomorphism_ullman.cpp, test/test_neighborhoods.cpp,
	  test/test_pagerank.cpp, test/test_pagerank_bidir.cpp,
	  test/test_rmat.cpp, test/test_snapshot.cpp,
	  test/test_snl_community3.cpp, test/test_sssp_deltastepping.cpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp, test/test_static_graph4.cpp,
	  test/test_static_graph5.cpp, test/test_static_graph6.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_subgraph_isomorphism.cpp, test/test_tri.cpp,
	  test/test_vf2_isomorphism.cpp:
	  
	  Fixes #3886 and #3887 and repairs the fallout due to the changes.

2009-10-16  Jon Berry <jberry@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Guard around mtgl_config.h reinserted.

2009-10-15  Jon Berry <jberry@sandia.gov>

	* mtgl/hotel_hash_set.hpp:
	  
	  Initial citation to PNNL for idea. Format may have to change.

2009-10-14  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp, test/test_isomorphism_ullman.cpp:
	  
	  

2009-10-14  Eric Goodman <elgoodm@sandia.gov>

	* test/test_hotel_hash_set.cpp:
	  
	  Test harness for the hotel hash set class.

	* mtgl/hotel_hash_set.hpp:
	  
	  This is a hash set implementation that creates a dedicated memory
	  space for each thread to store common keys. After all
	  key-values have been inserted, there is a consolidate method that
	  puts the results of the dedicated memory space into a global
	  structure.

2009-10-13  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp, test/test_isomorphism_ullman.cpp:
	  
	  

2009-10-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp, test/test_isomorphism_ullman.cpp:
	  
	  ENH: May have ullman working on multigraphs (further testing
	  required before I declare victory, though)

	* mtgl/isomorphism_ullman.hpp, test/test_isomorphism_ullman.cpp:
	  
	  

2009-10-09  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp, test/test_isomorphism_ullman.cpp:
	  
	  ENH: Ullman subg isomorphism initially working, not doing
	  monomorphism.

2009-10-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/graph.hpp:
	  
	  Had missed inlining one function. Got it this time.

	* test/.gdbrc, test/.test_allvisit.cpp.swp, test/giant.inc,
	  test/mtgl.study.xml, test/test_csr_graph.cpp,
	  test/test_csr_graph.cpp.bak:
	  
	  Removing a few unused files and renaming one file.

	* mtgl/connected_components.hpp, mtgl/independent_set.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/triangles.hpp,
	  mtgl/visit_adj.hpp, test/Makefile.am,
	  test/test_sssp_deltastepping.cpp:
	  
	  Fixes #3884. Also, the makefile now removes .ii files during a
	  clean.

	* configure.ac, mtgl/Makefile.am, mtgl/SMVkernel.h,
	  mtgl/al_graph.h, mtgl/al_graph.hpp, mtgl/al_graph_adapter.hpp,
	  mtgl/bidirectional_graph.h, mtgl/bidirectional_graph.hpp,
	  mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/depth_first_search.hpp,
	  mtgl/depth_first_search_visitor.h,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/euler_tour.hpp, mtgl/gen_mesh_graph.hpp,
	  mtgl/gen_plod_graph.hpp, mtgl/gen_rmat_graph.hpp, mtgl/graph.h,
	  mtgl/graph.hpp, mtgl/graph_adapter.hpp, mtgl/mask_search.hpp,
	  mtgl/metrics.hpp, mtgl/neighborhoods.hpp, mtgl/pagerank.hpp,
	  mtgl/print_dimacs_to_file.hpp, mtgl/read_cluster_graph.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/shiloach_vishkin.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/st_subgraph_search.hpp, mtgl/static_graph.h,
	  mtgl/static_graph.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/triangles.hpp, test/Makefile.am, test/al_graph.cpp,
	  test/bidirectional_graph.cpp, test/graph.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.h,
	  test/static_graph.cpp, test/test_badrank.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp, test/test_g.cpp,
	  test/test_indset.cpp, test/test_pagerank.cpp,
	  test/test_pagerank_bidir.cpp, test/test_static_graph.c,
	  test/test_static_graph.cpp, test/test_static_graph1.cpp,
	  test/test_static_graph2.cpp, test/test_static_graph3.cpp,
	  test/test_static_graph4.cpp,
	  test/test_strongly_connected_components.cpp:
	  
	  Addresses #3883. Also did some reformatting.

2009-10-07  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp:
	  
	  incremental update

2009-10-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp:
	  
	  Euler tour has been fixed to work with the change to the graph
	  adapters
	  and works in parallel now. Also, it is now a function and not a
	  class.

2009-10-06  William McLendon <wcmclen@sandia.gov>

	* mtgl/isomorphism_ullman.hpp, test/Makefile.am,
	  test/test_isomorphism_ullman.cpp:
	  
	  ENH: Ullman isomorphism algorithm initial skeleton.

2009-10-02  William McLendon <wcmclen@sandia.gov>

	* mtgl/ull_state.hpp, mtgl/vf2_isomorphism.hpp:
	  
	  ENH: Starting state class for Ullman's algorithm.

	* mtgl/vf2_state.hpp, mtgl/vf_isomorphism_base.hpp:
	  
	  

2009-10-01  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, mtgl/vf2_state.hpp:
	  
	  ENH: splitting up the isomorphism headers in prep for adding an
	  ullman implementation.

2009-09-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  The subgraph_isomorphism code now works in parallel.

2009-09-24  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  updated -- cleaned up some things.

	* test/test_vf2_isomorphism.cpp:
	  
	  update

2009-09-23  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  update

2009-09-22  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  update: working on coarse grained parallelism on XMT -- added
	  thread safety to result visitor, working on dynamic futures for
	  recursion scheme. Found some parallelism on the
	  is_feasible_pair() test at the cost of a bit extra work when one
	  returns true, but most are false so probably a win under most
	  cases.

2009-09-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Fixed several parallel issues; however, parallel doesn't work
	  yet.

2009-09-21  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  ENH: Breaking up while loops in match() methods in favor of
	  for-loops over the set of valid entries in prep. for getting
	  coarse grained parallelism in place.

2009-09-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/duplicate_adapter.hpp:
	  
	  Use source() and target() instead of first and second.

	* mtgl/filter_graph.hpp:
	  
	  Filter graph works in parallel now.

2009-09-21  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  ENH: XMT V&V activities

2009-09-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/psearch.hpp, mtgl/static_graph_adapter.hpp:
	  
	  Fixes #3882.
	  
	  Also changed vertex_type to be typedeffed to a void for
	  static_graph_adapter as the adapter never uses vertex_type.

2009-09-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/debug_utils.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/k_distance_neighborhood.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/test_graph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/triangles.hpp, mtgl/vf2_isomorphism.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/mtgl_boost_test.cpp,
	  test/test_bidirectional_graph.cpp,
	  test/test_connected_components.cpp, test/test_rmat.cpp,
	  test/test_st_search.hpp, test/test_vf2_isomorphism.cpp:
	  
	  Fixes #3874. The type incident_edge_iterator has been renamed to
	  out_edge_iterator to conform with BGL.

2009-09-18  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, test/Makefile.am:
	  
	  Fixed a simple XMT compilation problem.

2009-09-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_adapter.hpp:
	  
	  Make a couple of loops parallel.

	* mtgl/generate_subgraph.hpp, mtgl/subgraph_adapter.hpp:
	  
	  Fixes #3881.

2009-09-18  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  ENH: putting guards to limit parallel directives on low-degree
	  vertices

2009-09-17  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  BUG: Clearing up some compiler warnings

	* test/test_vf2_isomorphism.cpp:
	  
	  ENH: updating test to load a few more test cases.

2009-09-16  William McLendon <wcmclen@sandia.gov>

	* test/test_vf2_isomorphism.cpp:
	  
	  ENH: Added support for loading edge-induced graphs from text
	  files on the XMT using the snapshot libraries from MTGL.

2009-09-10  William McLendon <wcmclen@sandia.gov>

	* test/test_vf2_isomorphism.cpp:
	  
	  ENH: Added counting of failed search attempts and a nonzero exit
	  code is returned if there is a failure as well.

2009-09-09  William McLendon <wcmclen@sandia.gov>

	* test/test_vf2_isomorphism.cpp:
	  
	  ENH: cleaning up / modularizing the test program a bit. Now
	  supports tests that generate an R-MAT graph and pull a subgraph
	  from it, then verify that the subg is one of the matches.

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  BUG: Fixed problem with monomorphism, a return condition
	  modification had been omitted in is_feasible_pair(), expanding
	  test app to also generate an edge-induced graph through a simple
	  text file.

2009-09-08  Greg Mackey <gemacke@sandia.gov>

	* test/test_subgraph_isomorphism.cpp:
	  
	  Make test file match test case described in the wiki tutorial.

	* mtgl/subgraph_isomorphism.hpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Changed subgraph isomorphism to be a function instead of a class.
	  Fixed some issues with types in test_subgraph_isomorphism.

2009-09-04  William McLendon <wcmclen@sandia.gov>

	* test/test_vf2_isomorphism.cpp:
	  
	  debugging update - sync /b/ MTGL and reference implementation

2009-09-04  Greg Mackey <gemacke@sandia.gov>

	* test/test_subgraph_isomorphism.cpp:
	  
	  Test case for generate_subgraph() and random_walk() works again.

2009-09-03  Greg Mackey <gemacke@sandia.gov>

	* test/test_subgraph_isomorphism.cpp:
	  
	  Update test for subgraph isomorphism code.

	* mtgl/filter_graph.hpp, mtgl/subgraph_isomorphism.hpp:
	  
	  Subgraph isomorphism is working again in serial only. It works
	  for all
	  graph adapters and the three graph types: undirected, directed,
	  and
	  bidirectional. The algorithm has been updated to use property
	  maps
	  instead of the intrinsic edge and vertex types which were
	  removed.

2009-09-03  William McLendon <wcmclen@sandia.gov>

	* test/test_vf2_isomorphism.cpp:
	  
	  progress on automated tests w/ subgraph extraction against r-mat
	  graphs

2009-09-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp:
	  
	  Update comments and remove a print statement.

2009-09-02  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  

2009-09-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/duplicate_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Adding the following functions when these are wrapped around a
	  bidirectional graph:
	  - begin_in_incident_edges()
	  - end_in_incident_edges()
	  - begin_in_adjacent_vertices()
	  - end_in_adjacent_vertices()

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Standardize degree functions.

2009-09-02  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  

2009-09-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/random_walk.hpp:
	  
	  Updated the comparator in filter_graph to work correctly for all
	  three
	  types of graphs: undirected, directed, and bidirectional.
	  
	  Updated comments in generate_subgraph and random_walk. Fixed
	  problem where
	  degree() was used instead of out_degree() in random_walk.

2009-09-01  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  

	* mtgl/vf2_isomorphism.hpp:
	  
	  

	* mtgl/vf2_isomorphism.hpp:
	  
	  ENH: working on parallel directives

2009-09-01  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_subgraph.hpp, mtgl/random_walk.hpp:
	  
	  Switching the psearches back to DIRECTED. This will cause a
	  bidirectional graph to get the same result as a directed graph.
	  In general, algorithms should return the same result when working
	  on a directed or a bidirectional graph. A bidirectional graph is
	  a directed graph; it just adds access to the in edges.

	* mtgl/filter_graph.hpp:
	  
	  The filter graph algorithm can now have different graph types for
	  the
	  big graph and the target graph. Also cleaned up the code a bit.

	* mtgl/al_graph_adapter.hpp:
	  
	  Make al_graph_adapter have the same interface for degree()
	  functions
	  as the other adapters. The al_graph class provides for in
	  degrees,
	  and the adapter was set up to provide them. Thus, the value for
	  degree() was the in + out degree instead of just the out degree.

2009-08-31  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  some basic parallel directives put in

2009-08-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_subgraph.hpp, mtgl/random_walk.hpp:
	  
	  The random_walk() and generate_subgraph() algorithms now work
	  correctly
	  for undirected, directed, and bidirectional graphs.

2009-08-31  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  BUG: Modified the conditions on a couple for loops to make the
	  XMT happy.

2009-08-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/psearch.hpp:
	  
	  Fixes #3880. Psearch now works with bidirectional_graph_adapter.
	  Also cleaned up psearch a bit.

2009-08-31  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  ENH: removed some hardwired max-values and cleaned up some helper
	  functions so they won't cause multiple-defined errors later.

2009-08-31  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp, mtgl/queue.h:
	  
	  Breadth first search has been proven correct via testing. Moved
	  some variable definitions around to make it a bit more efficient.

2009-08-28  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  ENH: Rolled in the monomorphism capability into the vf2
	  implementation.

2009-08-27  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  BUG: Fixed an issue with out-degree iterators on the graph. Still
	  tracking down a rather persistent bug :/

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  Update - working through some bidirectional-graph-adapter
	  behavioural issues.

2009-08-26  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp, test/test_vf2_isomorphism.cpp:
	  
	  ENH: Minor updates and prep for running on XMT, adding R-MAT
	  generator to the test app. Need to discover what the bug is when
	  giving an R-MAT graph to the vf2 algorithm, it appears to miss
	  some stuff. Will investigate.

2009-08-25  William McLendon <wcmclen@sandia.gov>

	* mtgl/vf2_isomorphism.hpp:
	  
	  STYLE: Updated class documentation comments and renamed the
	  vf2_sub_state class to vf2_state since it now combines the
	  differences between vf2_state and vf2_sub_state from the vflib
	  reference implementation.

	* test/test_vf2_isomorphism.cpp:
	  
	  ENH: Modified test 5 to let the template argument to
	  vf2_isomorphism class use the default visitor class type

	* mtgl/Makefile.am, mtgl/vf2_isomorphism.hpp, test/Makefile.am,
	  test/test_vf2_isomorphism.cpp:
	  
	  ENH: Added initial vf2_isomorphism code into repository. It still
	  isn't really parallelized and needs to be checked for thread
	  safety, but this initial version is working currently under linux

2009-08-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/generate_subgraph.hpp, mtgl/random_walk.hpp:
	  
	  Change to using size_type instead of int.

	* mtgl/al_graph_adapter.hpp:
	  
	  Fix incorrect check of directedness in restore().

	* mtgl/duplicate_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Added typedef for in_edge_iterator.

2009-08-21  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp, mtgl/util.h,
	  test/test_dpmf.cpp:
	  
	  updated disjoint paths max flow to do a non parallel sort using
	  the bucket sort, plus a few other minor cleanups

2009-08-21  bwbarre

	* mtgl/bfs.hpp, mtgl/connected_components.hpp, test/test_bfs.cpp,
	  test/test_cc.cpp:
	  
	  Now that a graph copy-constructor is a deep copy, really need to
	  pass graph by reference into visitor objects

2009-08-17  bwbarre

	* test/test_cc.cpp:
	  
	  Fix double-declared ga object problem

2009-08-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/maximum_density_subgraph.hpp:
	  
	  Maximum density subgraph now parallelizes well.

2009-08-16  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, mtgl/ufl.h, mtgl/xmt_hash_table.hpp,
	  test/test_snl_community3.cpp, test/test_tri.cpp:
	  
	  First solve of snl_community3 works on XMT.

2009-08-15  Jon Berry <jberry@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/static_graph_adapter.hpp,
	  test/test_cc.cpp, test/test_pagerank.cpp:
	  
	  Retain directness when using snapshot restore.

	* test/test_static_graph5.cpp, test/test_static_graph6.cpp:
	  
	  demonstrate the value of load-balanced visit_adj: scalability
	  with generic
	  functions.

2009-08-14  Jon Berry <jberry@sandia.gov>

	* configure.ac:
	  
	  Finally fixed this silly error I introduced long back. The test
	  program
	  won't compile on Linux, so AC_TRY_LINK doesn't make sense.
	  AC_TRY_COMPILE
	  instead.

2009-08-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/maximum_density_subgraph.hpp:
	  
	  It works now.

2009-08-14  Jon Berry <jberry@sandia.gov>

	* mtgl/ufl.h, test/test_neighborhoods.cpp:
	  
	  misc

	* mtgl/neighborhoods.hpp:
	  
	  Fixed this integer version to work with w_fastcommunity_mh.cpp
	  (for
	  the resolution limit paper).

	* mtgl/dneighborhoods.hpp:
	  
	  This file needs to become deprecated, but for the moment it is
	  important because this, in its current version, is what we have
	  used
	  for v2 of wCNM paper.
	  
	  The issue with this for the XMT is that it uses floating point
	  arithmetic
	  and is very slow. The "neighborhoods.hpp" file uses integer
	  arithmetic
	  (and shifting to achieve some modest digits of precision) and
	  actually performs on the XMT. However, we haven't yet evaluated
	  it's
	  quality on the resolution limit paper experiment suite.

2009-08-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/disjoint_paths_max_flow.hpp:
	  
	  Really fixes #3878.
	  
	  Also removed unneeded printf statements from dpmf.

	* mtgl/Makefile.am, mtgl/breadth_first_search_mtgl_aux.hpp,
	  mtgl/graph_adapter.hpp:
	  
	  Removing breadth_first_search_mtgl_aux.hpp as it is deprecated
	  and no
	  longer used. This addresses part of #3877. Also got rid of an
	  unnecessay typedef in graph_adapter.

2009-08-13  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp, test/mtgl_test.h,
	  test/test_dpmf.cpp:
	  
	  Took out references to cross index in disjoint paths_max_flow.hpp

2009-08-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  Fixes #3878. The breadth first search code now works correctly.

2009-08-13  Jon Berry <jberry@sandia.gov>

	* test/Makefile.am, test/test_sssp_deltastepping.cpp:
	  
	  updating the format of this test. The algorithm itself has not
	  yet been
	  retested.

	* mtgl/edge_array_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp:
	  
	  dummy in_edge_iterator typedefs for compilation

2009-08-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp:
	  
	  Formatted both files to look nicer. Added missing
	  internal_bfs_mtgl_visitor classes for the non bidirectional
	  graph case. Some of the cases had not been included yet.

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  Changed a call to degree() in visit_edges() to out_degree().

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Okay. Really fixed the memory leaks this time. Needed to delete
	  the
	  memory in the destructor so minimum_cut could still have access
	  to it.

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Fixed memory leaks in disjoint_paths_max_flow.

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/static_graph_adapter.hpp:
	  
	  Add void typedef for in_edge_iterator to all adapters that don't
	  provide access to in edges.

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Fix a memory error.

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/graph_traits.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/recursive_dcsc.hpp,
	  test/test_bidirectional_graph.cpp:
	  
	  Fixes #3873. A separate type was created for incoming incident
	  edges
	  called in_edge_iterator that gives the vertices for the edge in
	  the
	  correct order.

2009-08-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/random_walk.hpp:
	  
	  Several updates:
	  - Change random_walk to be a function instead of a class.
	  - Make filter_graph work in serial with types as external
	  property
	  maps. Still doesn't work in parallel.

2009-08-11  bwbarre

	* test/Makefile.am:
	  
	  XMT doesn't like linking functions out of a .a for some reason,
	  so for now just multiply include the .c files.

	* CVSROOT, ChangeLog, FIRST_TUTORIAL, Makefile.am, NEWS,
	  config/ac_cxx_compiler_vendor.m4,
	  config/ac_cxx_cppflags_std_lang.m4, config/ac_cxx_exceptions.m4,
	  config/ac_cxx_explicit.m4, config/ac_cxx_have_sstream.m4,
	  config/ac_cxx_have_std.m4, config/ac_cxx_member_templates.m4,
	  config/ac_cxx_namespaces.m4,
	  config/ac_cxx_templates_as_template_arguments.m4,
	  config/acro_platform.m4, config/ltmain.sh,
	  config/mtgl_check_qthreads.m4, config/mtgl_compiler_flags.m4,
	  config/mtgl_compiler_option.m4, config/mtgl_compiler_options.m4,
	  config/mtgl_enable_build.m4, config/mtgl_platform_flags.m4,
	  config/mtgl_test_option.m4, configure.ac, mtgl, mtgl/Makefile.am,
	  mtgl/RandomValue, mtgl/bfs.hpp, mtgl/config.h, mtgl/config.h.in,
	  mtgl/files, mtgl/maximum_density_subgraph.cpp,
	  mtgl/maximum_density_subgraph.hpp, mtgl/merge_sort.cpp,
	  mtgl/merge_sort.hpp, test, test/Makefile.am:
	  
	  A number of build system cleanups (and some other cruft)
	  resulting from
	  trying to get "make install" and "make dist" to work properly:
	  
	  * Added mtgl/Makefile.am to list all header files which should be
	  installed. Divided into files which should be shipped in
	  releases and those which should not, as not everything is release
	  ready at this point
	  * Renamed a couple of .cpp files to .hpp, as they were headers
	  and
	  not source files.
	  * Removed a whole lot of old code from configure, making it
	  shorter,
	  simpler, and more correct. Added --with-qthreads=DIR option to
	  make building against qthreads easier.
	  * Removed old CVSROOT cruft - it's always in SVN if we need it
	  later.
	  * Cleaned up Makefile.am in test/ directory to use the libmtgl.a
	  we
	  were building in examples, to shorten build time a whole lot.
	  Also
	  started adding "make check" functionality.

2009-08-11  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Changed calls to degree to out_degree (before calls to degree
	  reported only the out degree, Greg fixed this)

2009-07-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/graph.cpp,
	  mtgl/graph_adapter.hpp, test/al_graph.cpp, test/graph.cpp:
	  
	  Fixes #3871 and #3872.
	  
	  Incident edge iterators now return same source and target as BGL.
	  Self
	  loops are now stored twice like in BGL.
	  
	  Also, removing mtgl/graph.cpp as that file is an artifact from
	  long ago.

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/generate_subgraph.hpp,
	  mtgl/subgraph_adapter.hpp, test/test_community2.cpp,
	  test/test_community3.cpp, test/test_newmanbenchmark.cpp:
	  
	  Fixes #3870.
	  
	  Subgraph_adpater now works with static_graph_adapter and
	  bidirectional_graph_adapter. So, generate_subgraph now works with
	  both adapters as well. Generate_subgraph has been changed to a
	  function
	  instead of a class.

2009-07-23  cljanss

	* test/Makefile.am:
	  
	  added some required files to libmtgl.a

	* mtgl/bidirectional_graph.h, mtgl/static_graph.h:
	  
	  added missing return statements

2009-07-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/random_walk_visitor.h:
	  
	  Move random walk visitor definition from random_walk_visitor.h
	  to random_walk.hpp and get rid of random_walk_visitor.h.

2009-07-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/maximum_density_subgraph.cpp, test/mtgl_test.h:
	  
	  Cleanup due to getting rid of graph adapter function
	  get_original_edges().

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph.h,
	  mtgl/bidirectional_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph.h, mtgl/static_graph_adapter.hpp,
	  test/bidirectional_graph.cpp, test/static_graph.cpp:
	  
	  Several changes to static_graph_adapter and
	  bidirectional_graph_adapter:
	  - Now graphs report the correct number of edges for the
	  undirected
	  case.
	  - The index arrays were 1 entry too long. Made them the correct
	  size.
	  - Bidirectional graph kept the mapping from the internal indexes
	  to
	  the original indexes. I also added the reverse mapping. Both of
	  these mappings were added to static graph. This allows the graph
	  adapters to report the correct edge ids, and it allows us to get
	  rid of function get_original_index() as it is no longer
	  necessary.
	  - Edge ids are now based on the order they were passed to init
	  (aka
	  original indexes) vs. the internal indexes.
	  - Edges from the same source vertex are now stored in the order
	  they
	  were passed in init() instead of the reverse order.
	  - Some variables were declared at the top of a function instead
	  of
	  where they were locally used inside a loop. This should have
	  caused a bug when running in parallel, but we may not have seen
	  it yet. I moved the declarations to be local.
	  - The edge_iterator class was broken. I fixed it.
	  - The other iterator classes didn't always behave as they should.
	  I fixed them, too.

2009-07-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_mesh_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph.h, mtgl/graph_adapter.hpp,
	  mtgl/maximum_density_subgraph.cpp, mtgl/read_cluster_graph.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/static_graph.h, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, test/Makefile.am, test/al_graph.cpp,
	  test/bidirectional_graph.cpp, test/custom2file.cpp,
	  test/graph.cpp, test/mtgl_test.h, test/static_graph.c,
	  test/static_graph.cpp, test/test_contraction.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp,
	  test/test_neighborhoods.cpp, test/test_oc.cpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph4.cpp, test/test_tri.cpp:
	  
	  Several updates here:
	  - First, this is important. I changed the way you set whether a
	  graph
	  is directed or unidrected. Instead of declaring this when calling
	  init(), you now specify whether a graph is directected or
	  undirected
	  at declaration in the constructor. Graph and graph adapter
	  constructors now have a paramter that specifies DIRECTED or
	  UNDIRECTED.
	  The default is directed.
	  - Fixed some degree functions in bidirectional graph adapter.
	  - Fixed memory leaks in static_graph and bidirectional_graph
	  where the
	  memory declared when they were created was not deleted when they
	  were
	  destroyed. I moved all the memory management from the graph
	  adapters
	  to the graph classes. This involved changing bidirectional graph
	  and
	  static graph from C structures to C++ classes. Thanks to Jon, the
	  makefiles have been changed to accomdate this modification.
	  - Fixed copy control in bidirectional and static graph.

2009-07-15  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/neighborhoods.hpp, mtgl/snl_community3.hpp, mtgl/ufl.h,
	  test/test_neighborhoods.cpp:
	  
	  snl_community3 working on Linux with edge_server_adapter
	  accounting for zero-degree nodes.

2009-07-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dynamic_array.h:
	  
	  Several updates:
	  - Defined type size_type and used it internally where
	  appropriate.
	  - Renamed GetAllocSize() to capacity() to be consistent with
	  stl:vector
	  terminology.
	  - Renamed SetAllocSize() to reserve() to be consistent with
	  stl::vector
	  terminology.
	  - Added resize() that changes the number of elements in the
	  array. This
	  allows a parallel add of elements without having to create a
	  second
	  array to pass to add().

2009-07-10  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bfs.hpp,
	  mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connected_components.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/edge_array_adapter.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/independent_set.hpp, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/neighborhoods.hpp, mtgl/psearch.hpp,
	  mtgl/rand_fill.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/snl_community3.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/triangles.hpp, mtgl/util.h,
	  mtgl/visit_adj.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/custom2file.cpp, test/mtgl_test.h, test/test_bfs.cpp,
	  test/test_cc.cpp, test/test_indset.cpp,
	  test/test_neighborhoods.cpp, test/test_static_graph3.cpp,
	  test/test_tri.cpp:
	  
	  The type vertices_size_type is really a misnomer as it is used as
	  a
	  general size type in all the adapters. Boost has three size types
	  for
	  graphs: vertices_size_type, edges_size_type, and
	  degree_size_type.
	  For now, I am avoiding this in favor of using the simpler
	  approach and
	  having just a single type called size_type. If we decide we
	  actually need
	  all three, we can add them in later. I also tried to be more
	  consistent
	  with using size_type inside the adapters.

2009-07-09  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, mtgl/ufl.h, test/VolVolume.cpp:
	  
	  Facility location XMT work - still in progress.

2009-07-08  Jon Berry <jberry@sandia.gov>

	* mtgl/neighborhoods.hpp, mtgl/new_neighborhoods.hpp,
	  mtgl/snl_community3.hpp, test/test_neighborhoods.cpp:
	  
	  The current neighborhood is correct and efficient enough to move
	  back into
	  neighborhoods.hpp. new_neighborhoods.hpp is deprecated. Probably,
	  dneighborhoods.hpp is too (it uses floating point arithmetic),
	  but I'll
	  keep it around a little longer just in case.

	* mtgl/new_neighborhoods.hpp:
	  
	  Fixed a bug in the computation of edge goodness.

2009-07-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/merge_sort.cpp, mtgl/mta_merge_sort.hpp,
	  mtgl/parallel_merge.cpp:
	  
	  Fixed a bug in merge_sort.cpp. Deleted mta_merge_sort.hpp and
	  parallel_merge.cpp in deference to merge_sort.cpp.

	* mtgl/merge_sort.cpp:
	  
	  Formatting.

2009-07-07  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/mta_merge_sort.hpp:
	  
	  Added support for sorting another array

2009-07-02  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Increased parallelism in back propagation.

	* mtgl/vertex_betweenness.hpp:
	  
	  Increasing parallelism in backward pass.

2009-07-01  Eric Goodman <elgoodm@sandia.gov>

	* test/test_mta_merge_sort.cpp:
	  
	  Exercises the mta_merge_sort code.

	* test/test_random_number_generator.cpp:
	  
	  Exercises the random_number_generator code in mtgl proper.

	* mtgl/mta_merge_sort.hpp:
	  
	  Copied over the code from Greg's original source and put it into
	  a class.

	* mtgl/parallel_merge.cpp:
	  
	  Dropped the first 11 bits or so of the random numbers so that
	  when we do the mod
	  we don't use the software implementation.

	* mtgl/simple_dynamic_array.hpp:
	  
	  Removed print statement from resize code.

	* mtgl/simple_dynamic_array.hpp:
	  
	  Added INIT_SZ as a defined constant.

2009-06-30  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/random_number_generator.hpp:
	  
	  Added license header.

	* mtgl/diffraction_array.hpp:
	  
	  Added license header.

	* mtgl/parallel_merge.cpp:
	  
	  Added license header

	* mtgl/parallel_merge.cpp:
	  
	  initial commit of Greg Mackey's parallel merge sort code.

2009-06-30  Jon Berry <jberry@sandia.gov>

	* mtgl/new_neighborhoods.hpp:
	  
	  The number of fake edges in practice is small -- removed vast
	  overestimation
	  of space requirements.

2009-06-29  Jon Berry <jberry@sandia.gov>

	* mtgl/new_neighborhoods.hpp, mtgl/triangles.hpp, test/graph.cpp:
	  
	  Edge neighborhood finding working on the XMT.

2009-06-27  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/graph.h, mtgl/metrics.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/new_neighborhoods.hpp,
	  mtgl/snl_community3.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/visit_adj.hpp, test/custom2file.cpp, test/rmat2file.cpp,
	  test/test_community3.cpp, test/test_tri.cpp:
	  
	  * efficient triangle computations now work
	  with graph_adapter
	  * hopefully the saga of neighbors.hpp,
	  dneighbors.hpp, and now new_neighbors.hpp
	  will be over soon (with everything
	  consolidated into neighbors.hpp).
	  The context is that neighbors.hpp used
	  integer weights, dneighbors.hpp was a
	  double precision version of this (to get
	  serial results for the resolution limit paper),
	  and now new_neighborhoods.hpp goes back to
	  integer arithmetic (for the XMT), simulating
	  floating point to a few digits of precision
	  via tricks.
	  
	  As of this checkin, custom/1rect, custom/1chord
	  custom/2chord, and custom/test1 all work and
	  pass valgrind on linux.
	  
	  

2009-06-25  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/random_number_generator.hpp:
	  
	  Class that allows you to get random numbers without the hassle of
	  dealing with prand and such.

2009-06-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp:
	  
	  Finish cleanup for removing types. Updating a couple of typedefs.

2009-06-16  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, test/test_indset.cpp:
	  
	  silly type errors fixed.

2009-06-15  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, mtgl/ufl.h, test/test_community3.cpp:
	  
	  fixing up edge-based community detection for the XMT. Passes
	  valgrind
	  on linux, but still filled with debugging statements.

2009-06-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph.h,
	  mtgl/csr_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_mesh_graph.hpp,
	  mtgl/gen_plod_graph.hpp, mtgl/gen_rmat_graph.hpp, mtgl/graph.cpp,
	  mtgl/graph.h, mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_visitor.h,
	  mtgl/maximum_density_subgraph.cpp, mtgl/metrics.hpp,
	  mtgl/mmgraph.h, mtgl/mtgl_adapter.hpp,
	  mtgl/read_cluster_graph.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/static_graph.h, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph.hpp, mtgl/test_graph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp,
	  test/al_graph.cpp, test/custom2file.cpp, test/g_test.cpp,
	  test/graph.cpp, test/load_mmap_graph.hpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/static_graph.c, test/test_bidirectional_graph.cpp,
	  test/test_connected_components.cpp, test/test_contraction.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp,
	  test/test_find_modularity.cpp, test/test_g.cpp,
	  test/test_indset.cpp, test/test_oc.cpp, test/test_pagerank.cpp,
	  test/test_static_graph4.cpp, test/test_tri.cpp:
	  
	  Got rid of types as members of the graph classes. They need to be
	  implemented as property maps, now, external to the graph classes.
	  
	  Removed isomorphism_visitor.h as it was no longer used by
	  subgraph_isomorphism.
	  
	  I tested the main compile and it works. I attempted to change
	  most places
	  that used the type maps to change to using another method to get
	  the types,
	  but it's possible I missed something.

2009-06-12  Jon Berry <jberry@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/graph.h, mtgl/snl_community3.hpp, test/graph.cpp,
	  test/test_community3.cpp:
	  
	  resurrecting edge-based facility location version of community
	  detection.
	  contraction_adapter should really use the init() method so that
	  the
	  contracted graph wouldn't be tied to graph.h.

2009-06-04  Brad Mancke

	* mtgl/mtaqsort.hpp:
	  
	  updated mtaqsort.hpp to not swap elements that have the same
	  value

	* mtgl/merge_sort.cpp, test/test_merge_sort.cpp:
	  
	  Created another merge_sort function that will take two arrays and
	  sort them. Also added test for merge sort.

2009-06-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp:
	  
	  Few minor updates.

2009-06-02  evensky

	* mtgl/util.h:
	  
	  needed string.h included to get strlen used in util.h under Linux

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  added arg to bidirectional_graph_adapter::restore() to set
	  undirectedness of the edges. The default value is the current
	  undirected value. To use, you will have to specify the
	  recordsize. Minor change to a comment style to make emacs tabbing
	  pretty.

2009-05-28  evensky

	* mtgl/snap_util.h:
	  
	  snap_util.h: needed stdint to define some uint64 types. Also set
	  LUC_ERR_OK and some friends to the same values used on the cray.
	  graphack needs this as it include both snap_util and the real luc
	  headers.

2009-05-22  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/diffraction_array.hpp:
	  
	  First commit for the diffraction array.

	* mtgl/simple_dynamic_array.hpp:
	  
	  Based on dynamic_array.h, but supports only adding elements.

2009-05-20  Greg Mackey <gemacke@sandia.gov>

	* mtgl/maximum_density_subgraph.cpp:
	  
	  Adding maximum density subgraph code. It worked on the couple of
	  small examples I constructed.

2009-05-20  evensky

	* mtgl/bfs.hpp:
	  
	  added inline to bfsCountingSort as graphack uses it in multiple
	  places

2009-05-19  Greg Mackey <gemacke@sandia.gov>

	* mtgl/disjoint_paths_max_flow.hpp, test/test_dpmf.cpp,
	  test/test_dpmf_double.cpp:
	  
	  Updated disjoint_paths_max_flow.hpp:
	  - Added code to find the minimum cut.
	  - Removed excess white space and updated formatting.
	  - Commented out all checking and printing lines.
	  
	  Updated test_dpmf.cpp and test_dpmf_double.cpp to work with the
	  updated
	  max flow code.

	* mtgl/merge_sort.cpp:
	  
	  Made block_size a parameter that defaults to 1024 so the user can
	  change
	  it if they desire.

2009-05-11  Jon Berry <jberry@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  Typo in getting HAVE_RAND_S defined.

	* mtgl/dneighborhoods.hpp, mtgl/independent_set.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/snl_community.hpp,
	  test/Makefile.am, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/test_indset.cpp, test/test_tri.cpp:
	  
	  Putting independent set (luby) into the .hpp.

2009-05-11  kddevin

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp:
	  
	  Removed memory leaks.

2009-05-07  kddevin

	* mtgl/util.h:
	  
	  Fixed snapshot_ints to use data types consistently when count_t
	  is
	  not a 64-bit integer.

	* test/test_snapshot.cpp:
	  
	  comparison codes works only in non-threaded environment;
	  ifdef'ed it out for now.

	* test/Makefile.am:
	  
	  Added test_snapshot

	* mtgl/snap_util.h:
	  
	  Changes to allow compilation of test using Makefile system.

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/util.h:
	  
	  Tested and debugged Linux stubs for snapshot.
	  Fixed restore methods of adapter; they used a
	  hard-coded record size in the snapshot files
	  that was inconsistent with the size of a vertex.

	* test/test_snapshot.cpp:
	  
	  Added test for correctness of restored graph compared to original
	  graph.

2009-05-07  Jon Berry <jberry@sandia.gov>

	* test/test_snapshot.cpp:
	  
	  Almost working with Karen's snap_ wrappers for linux.
	  This version runs on linux, but not correctly. The
	  restored graph doesn't have the right number of vertices.

2009-05-06  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  using snap_util.h

2009-05-06  kddevin

	* mtgl/snap_util.h:
	  
	  Untested version of stubs for snapshot functions, allowing mtgl
	  snapshot
	  functions to work on Linux or Mac.

2009-05-06  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.h:
	  
	  Not sure if I got it exactly right, but fixed some compile errors
	  in the snapshot stuff.

2009-05-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/merge_sort.cpp:
	  
	  Adding parallel merge sort to mtgl. It performs better than the
	  current
	  implementation of quicksort.

2009-04-29  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  snapshot_ints

2009-04-28  Jon Berry <jberry@sandia.gov>

	* test/test_indset.cpp:
	  
	  Qthreading of luby's algorithm. It remains to put this into the
	  library.

2009-04-27  Jon Berry <jberry@sandia.gov>

	* test/test_indset.cpp:
	  
	  This new version of maximal independent set dominates the old
	  via loop merge. The kernel algorithm needs to be 'hpp-ized'.

2009-04-15  Greg Mackey <gemacke@sandia.gov>

	* mtgl/disjoint_paths_max_flow.hpp, test/graph.cpp,
	  test/test_dpmf.cpp, test/test_dpmf_double.cpp:
	  
	  Adding Brad's changes to template the weight type of the
	  capacities in
	  his maxflow code. This allows us to call it using doubles.
	  Updated
	  test_dpmf.cpp to reflect the changes, and added
	  test_dpmf_double.cpp to
	  test the maxflow code with doubles.
	  
	  Also updated graph.cpp to get rid of some warnings about unsigned
	  ints.

2009-04-08  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  added simple load balancing algorithm

2009-03-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  - Changed all versions that used an occupied vector to use the
	  values
	  0, 1, and 2 for empty, deleted, and full status instead of the
	  values
	  -1, 0, and 1. This allows us to use calloc() to initialize the
	  occupied vector.
	  - Updated some comments.

2009-03-23  Jon Berry <jberry@sandia.gov>

	* mtgl/triangles.hpp:
	  
	  type bug

2009-03-21  Jon Berry <jberry@sandia.gov>

	* mtgl/read_matrixmarket.hpp, test/Makefile.am:
	  
	  wrong type used; didn't bite until I built a graph_adapter.

	* FIRST_TUTORIAL, doc/Doxyfile, mtgl/bfs.hpp,
	  mtgl/connected_components.hpp, mtgl/util.h, mtgl/visit_adj.hpp,
	  test/Makefile.am, test/custom2file.cpp, test/test_bfs.cpp,
	  test/test_cc.cpp, test/test_static_graph3.cpp:
	  
	  MERGE mtgl branches/mtgl-03-05-2009 2297:2308 into trunk

2009-03-19  Jon Berry <jberry@sandia.gov>

	* test/custom2file.cpp:
	  
	  Let the user define a custom graph in a file of
	  
	  src dest
	  src dest
	  ...
	  
	  then snapshot that out to be read in as the other files are.

2009-03-04  Jon Berry <jberry@sandia.gov>

	* mtgl/SMVkernel.h, mtgl/VolVolume.h, mtgl/al_graph.h,
	  mtgl/al_graph_adapter.hpp, mtgl/array2d.hpp, mtgl/bfs.hpp,
	  mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/breadth_first_search_mtgl_aux.hpp, mtgl/closure.h,
	  mtgl/components_visitor.h, mtgl/config.h, mtgl/config.h.in,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/connectivity_visitor.h, mtgl/contraction_adapter.hpp,
	  mtgl/copier.h, mtgl/csr_graph.h, mtgl/csr_graph_adapter.hpp,
	  mtgl/debug_utils.hpp, mtgl/depth_first_search.hpp,
	  mtgl/depth_first_search_visitor.h,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/dynamic_array.h,
	  mtgl/edge_array_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/filter_graph.hpp, mtgl/gen_dimacsrandom_graph.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/gen_newmanbenchmark.hpp,
	  mtgl/gen_plod_graph.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph.cpp, mtgl/graph.h,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp, mtgl/hash_set.h,
	  mtgl/hash_table.h, mtgl/independent_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_visitor.h,
	  mtgl/k_distance_neighborhood.hpp, mtgl/mask_search.hpp,
	  mtgl/mask_search_visitor.h, mtgl/metrics.hpp, mtgl/mmgraph.h,
	  mtgl/mmio.cpp, mtgl/mmio.h, mtgl/mmio.hpp, mtgl/mtaqsort.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/mtgl_boost_graph.hpp,
	  mtgl/mtgl_boost_property.hpp, mtgl/mtgl_boost_tuple.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/psearch.hpp, mtgl/psearch_aux.hpp, mtgl/pseudo_diameter.hpp,
	  mtgl/queue.h, mtgl/quicksort.hpp, mtgl/rand_fill.hpp,
	  mtgl/random.h, mtgl/random_walk.hpp, mtgl/random_walk_visitor.h,
	  mtgl/read_cluster_graph.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/scc_visitor.h, mtgl/serqsort.hpp, mtgl/shiloach_vishkin.hpp,
	  mtgl/snl_community.hpp, mtgl/snl_community2.hpp,
	  mtgl/snl_community3.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/st_connectivity.hpp, mtgl/st_search.hpp,
	  mtgl/st_subgraph_search.hpp, mtgl/static_graph.h,
	  mtgl/static_graph_adapter.hpp, mtgl/stats.h,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph.hpp, mtgl/test_graph_adapter.hpp,
	  mtgl/topsort.hpp, mtgl/topsort_visitor.h,
	  mtgl/transpose_adapter.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/util.h, mtgl/vertex_betweenness.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/CPPGraph.h,
	  test/GenOntology.cpp, test/Graph.h, test/VolVolume.cpp,
	  test/al_graph.cpp, test/buildmaps.c, test/buildtest.cpp,
	  test/g_test.cpp, test/graph.cpp, test/load_mmap_graph.hpp,
	  test/loadmaps.c, test/loadtest.cpp, test/mtgl_boost_test.cpp,
	  test/mtgl_test.cpp, test/mtgl_test.h, test/qalloc.c,
	  test/qalloc.h, test/rmat2file.cpp, test/static_graph.c,
	  test/test.cpp, test/test_allvisit.cpp, test/test_badrank.cpp,
	  test/test_bfs.cpp, test/test_bidirectional_graph.cpp,
	  test/test_cc.cpp, test/test_community.cpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_contraction.cpp,
	  test/test_csr_graph.cpp.bak, test/test_dpmf.cpp,
	  test/test_dyn_graph.cpp, test/test_encount.cpp,
	  test/test_find_assortativity.cpp, test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_degree_distribution.h,
	  test/test_find_modularity.cpp,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp, test/test_g.cpp,
	  test/test_independent_set.cpp, test/test_knn.cpp,
	  test/test_knn.hpp, test/test_mask_search.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp,
	  test/test_pagerank.cpp, test/test_pagerank_bidir.cpp,
	  test/test_rmat.cpp, test/test_snapshot.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_connectivity.cpp,
	  test/test_st_connectivity.hpp, test/test_st_search.cpp,
	  test/test_st_search.hpp, test/test_static_graph.c,
	  test/test_static_graph.cpp, test/test_static_graph1.cpp,
	  test/test_static_graph2.cpp, test/test_static_graph3.cpp,
	  test/test_static_graph4.cpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp,
	  test/test_subgraph_isomorphism.cpp, test/test_tri.cpp,
	  test/ufl.cpp, test/utilities.cpp, test/utilities.h:
	  
	  License language at the tops of files

2009-03-03  Jon Berry <jberry@sandia.gov>

	* test/test_cc.cpp:
	  
	  restored test_cc.cpp w/o history

2009-03-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/csr_graph.h, mtgl/dneighborhoods.hpp, mtgl/dynamic_array.h,
	  mtgl/euler_tour.hpp, mtgl/gen_rmat_graph.hpp, mtgl/psearch.hpp:
	  
	  Remove file.

2009-02-23  Eric Goodman <elgoodm@sandia.gov>

	* mtgl/util.h:
	  
	  added a string hash function to util.h

2009-02-20  Greg Mackey <gemacke@sandia.gov>

	* test/mtgl_test.cpp, test/mtgl_test.h:
	  
	  Commenting out more csr code to get rid of compile error.

2009-02-02  cljanss

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  added get_rev_index

2009-02-01  cljanss

	* mtgl/read_dimacs_graph.hpp:
	  
	  throw instead of exit

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  added get_rev_src_points and get_src_points to
	  bidirectional_graph_adapter

2009-01-31  cljanss

	* mtgl/xmt_hash_table.hpp:
	  
	  only include stdint.h if it is available

2009-01-30  cljanss

	* mtgl/read_dimacs_graph.hpp:
	  
	  added davids fix: tmp has to advanced to prevent a zero length
	  target id string; changed atoi to atol

	* mtgl/xmt_hash_table.hpp:
	  
	  include stdint.h

2009-01-28  Vitus Leung <vjleung@sandia.gov>

	* test/mtgl_test.h:
	  
	  Command line additions for vertex betweenness.

2009-01-25  cljanss

	* mtgl/static_graph_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp:
	  
	  fixed multiple symbol definition errors by specifying members as
	  inline

2009-01-23  cljanss

	* mtgl/connected_components.hpp:
	  
	  fixed an inconsistent integer size

	* mtgl/rand_fill.hpp:
	  
	  rand_fill.h needs macros from mtgl_config.h -- include it

2009-01-21  Jon Berry <jberry@sandia.gov>

	* test/test_tri.cpp:
	  
	  custom graph

2009-01-20  cljanss

	* test/Makefile.am:
	  
	  added custom -pl flags to several test executables on MTA to work
	  around template instantiation issues

	* configure.ac, test/Makefile.am:
	  
	  put graph.o into libmtgl.a to make it easier for external
	  programs to use MTGL

2009-01-19  cljanss

	* mtgl/metrics.hpp, mtgl/triangles.hpp:
	  
	  fixed some int/long issues

2009-01-19  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/dynamic_array.h,
	  test/test_tri.cpp:
	  
	  The altered buildIncr strategy (post unsigned) wasn't working.
	  This is a fix.

2009-01-19  cljanss

	* test/static_graph.c:
	  
	  now everything will build on the xmt (including things needing
	  static_graph.c)

2009-01-19  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/dynamic_array.h,
	  mtgl/graph.h, mtgl/independent_set.hpp, mtgl/pagerank.hpp,
	  mtgl/psearch.hpp, mtgl/triangles.hpp, test/test_tri.cpp:
	  
	  XMT compilation of triangles; gcc_sv connected_components for
	  XMT;
	  XMT compilation of graph.h (buildIncr wasn't going to work once
	  we
	  switched to unsigned -- old init values of -1 were needed. Using
	  INT_MAX now.

	* test/test_tri.cpp:
	  
	  New test program for triangles -- trying to deprecate mtgl_test.h

	* mtgl/connected_components.hpp, mtgl/induced_subgraph.h,
	  mtgl/metrics.hpp, mtgl/psearch.hpp, mtgl/triangles.hpp,
	  test/Makefile.am:
	  
	  Working on getting triangles going again.

2009-01-19  cljanss

	* Makefile.am, test/Makefile.am:
	  
	  Have make mostlyclean, etc., remove compiler scratch files on the
	  xmt/mta

	* configure.ac:
	  
	  Fix the MTA test. There are been quite a bit of thrashing on this
	  line--this change hopefully fixes the underlying problem.

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connected_components.hpp, mtgl/debug_utils.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph.h, mtgl/graph_adapter.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/pagerank.hpp, mtgl/psearch.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/static_graph_adapter.hpp, test/graph.cpp, test/mtgl_test.h,
	  test/rmat2file.cpp, test/test_bfs.cpp,
	  test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_find_assortativity.h,
	  test/test_find_cluster_coefficient.cpp,
	  test/test_find_degree_distribution.h,
	  test/test_find_pseudo_diameter.cpp, test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_static_graph3.cpp:
	  
	  Fixed numerous issues relating to printf: format/arg mismatches,
	  incorrect format statements, incorrect arg lists. In one case,
	  switched
	  to std::cerr because the arguments were different for different
	  template
	  instantiations.

2009-01-18  Jon Berry <jberry@sandia.gov>

	* mtgl/dynamic_array.h, mtgl/gen_mesh_graph.hpp, mtgl/graph.h,
	  mtgl/graph_adapter.hpp, mtgl/pagerank.hpp,
	  mtgl/read_matrixmarket.hpp, test/.gdbrc, test/VolVolume.cpp,
	  test/graph.cpp, test/mtgl_test.h, test/test_bfs.cpp,
	  test/test_find_triangles.cpp,
	  test/test_find_vertex_betweenness.cpp, test/test_pagerank.cpp,
	  test/test_static_graph2.cpp, test/test_static_graph3.cpp:
	  
	  non-qthreads compilation

2009-01-14  Jon Berry <jberry@sandia.gov>

	* test/VolVolume.cpp:
	  
	  another test commit

	* test/VolVolume.cpp:
	  
	  test commit

2009-01-11  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp, test/test_bfs.cpp:
	  
	  Non-qthreaded compilation of test_bfs, test_cc with
	  graph_adapter.
	  It won't work with qthreads since the qutil_..qsort doesn't take
	  a comparison operator. The vertex_descriptor for graph_adapter is
	  a pointer, and we would need the comparison operator to look at
	  the object.
	  
	  it's possible that we could store id's rather than vertex
	  descriptors in the bfs buffer, but that isn't done now.
	  
	  To get sv numbers with a graph adapter that iterates through
	  edges naturally (i.e., "graph_adapter"), all mention of gcc_sv
	  would need to be commented out of test_cc.

	* mtgl/gen_rmat_graph.hpp, test/rmat2file.cpp:
	  
	  Changes to get rmat2file compiling again. test_cc, test_bfs, and
	  test_pagerank still compile.

2009-01-10  kbwheel

	* test/mtgl_test.h:
	  
	  this is dumb, but because kernel_test_info needs to be able to
	  spawn *ANY* kind of matrix (i.e. it cannot itself be templated),
	  its internal variables are quite likely the wrong type for the
	  graph being generated. Therefore, we create NEW (temporary) local
	  variables as soon as we know what the right graph type is (so we
	  can use graph_traits on it), and do th e necessary copying back
	  and forth.

	* test/test_connected_components.cpp:
	  
	  the third template argument got dropped somehow

	* mtgl/gen_mesh_graph.hpp:
	  
	  use correct types, pulled from graph_traits, so that cc_test
	  compiles

2009-01-09  Jon Berry <jberry@sandia.gov>

	* test/test_bfs.cpp:
	  
	  Only count the visits in DEBUG mode.

2009-01-09  kbwheel

	* mtgl/pagerank.hpp:
	  
	  more qt_loopaccum_balance refactoring

	* mtgl/pagerank.hpp:
	  
	  zerodegcnt was an int, cast as an aligned_t, which fails on most
	  architectures. Reworked the loop to be a qt_loopaccum_balance,
	  rather than a qt_loop_balance, to avoid unnecessary atomic
	  operations and their associated cache flush.

2009-01-09  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/dynamic_array.h, mtgl/gen_rmat_graph.hpp,
	  mtgl/visit_adj.hpp, test/test_bfs.cpp,
	  test/test_static_graph1.cpp:
	  
	  Giant component version of connected components works and scales
	  on multicore.

	* mtgl/bfs.hpp, mtgl/connected_components.hpp, mtgl/visit_adj.hpp:
	  
	  Machinery for chunked loop to create auxiliary problem in gcc_sv.

	* mtgl/connected_components.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/static_graph_adapter.hpp, test/Makefile.am,
	  test/mtgl_test.h, test/test_connected_components.cpp:
	  
	  test_cc is a simple test program for connected components
	  (as opposed to cc_test, which uses the mtgl_test.h
	  functionality, which is currently broken).
	  
	  The giant component algorithm (gcc_sv) is now working
	  on Niagara (single threaded). Two things remain:
	  (1) qthread the version of visit_adj that visits all
	  vertices in the graph in a similar way to that we
	  used with the visit_adj for processing arrays of vertices,
	  (2) the gcc_cc_setup_loop2 is going to hotspot. Use
	  the same strategy we used in bfs_chunked_visitor to
	  mitigate that hotspot.

	* mtgl/bfs.hpp, mtgl/connected_components.hpp,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/static_graph.h,
	  test/mtgl_test.h, test/static_graph.c,
	  test/test_connected_components.cpp:
	  
	  Bfs for Niagara correct.

2009-01-08  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connected_components.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/mtgl_adapter.hpp, mtgl/pagerank.hpp,
	  mtgl/static_graph.h, mtgl/static_graph_adapter.hpp, mtgl/util.h,
	  mtgl/visit_adj.hpp, test/mtgl_test.h, test/test_bfs.cpp,
	  test/test_connected_components.cpp, test/test_pagerank.cpp:
	  
	  Experiments with snapshot on the XMT showed that the adapters
	  weren't yet generic enough. With these changes, they should
	  be sufficiently generic to change the type of integer used in
	  the underlying data structure, update a typedef in the
	  adapter, and compile. That experiment hasn't been done
	  thoroughly, but that's the intention of the current checkin.
	  
	  Unfortunately, this is a dueling checkin with respect to bfs.
	  The bfs.hpp here is deprecated, yet is getting committed. The
	  next revision will restore the bfs working on Niagara.

2009-01-08  kbwheel

	* mtgl/gen_rmat_graph.hpp:
	  
	  fix compiling problems on sparc

2009-01-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.h, mtgl/xmt_hash_table.hpp:
	  
	  Several updates:
	  - Added the ability have a user defined hash function as a
	  template
	  parameter to the table.
	  - Added default_hash_function to util.h that works for integral
	  keys.
	  - Removed in-array bucketing in the hash function as performance
	  seems
	  better without it.
	  - Changed a couple of pragmas to slightly improve performance.

2009-01-07  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp:
	  
	  Counting sort for the XMT.

	* mtgl/bfs.hpp, mtgl/visit_adj.hpp, test/test_bfs.cpp:
	  
	  Sorting version of chunked bfs working

2009-01-07  bwbarre

	* mtgl/bfs.hpp:
	  
	  Need to reset count after pushing data into main work queue, as
	  the visitor
	  object may be used more than once

2009-01-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Now, correctly supports using the [] operator twice on the same
	  line with
	  one exception. You can't have the [] operator on both the left
	  and right
	  side of an = sign.
	  
	  Added a version of mt_incr() that directly takes a proxy object.
	  This
	  allows you to do code like
	  
	  mt_incr(hash_table[4], 7);
	  
	  Also added the function int_fetch_add() which behaves like
	  mt_incr(). This
	  is faster than the above call to mt_incr() on the [] operator.

2009-01-06  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/bidirectional_graph.h,
	  mtgl/bidirectional_graph_adapter.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/pagerank.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, test/mtgl_test.h, test/test_bfs.cpp,
	  test/test_pagerank.cpp:
	  
	  Generators more generic, bfs chunked avoids color hotspot.

2009-01-05  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, test/test_bfs.cpp:
	  
	  XMT prefers arrays rather than lists. Also, I added a
	  Qthread-ization
	  of a trivial BFS that Kamesh used a few years ago to benchmark
	  some
	  MTA codes. It's currently accessible only by commenting in the
	  call
	  to "bfs" in test_bfs.cpp.

2009-01-04  Jon Berry <jberry@sandia.gov>

	* test/test_bfs.cpp:
	  
	  Configuration for experiments - search from a vertex in giant
	  component.

	* mtgl/bfs.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connected_components.hpp, mtgl/visit_adj.hpp,
	  test/test_bfs.cpp:
	  
	  Updating chunked bfs -- previous version had a logic bug in
	  "start_nodes"
	  interpretation.

2008-12-29  kbwheel

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  Back to using templates for bidirectional graph helper objects.
	  This may seem counter-intuitive, since we have a-priori knowledge
	  of what the
	  datatypes inside the bidirectional graph are. The reasoning is
	  that this allows
	  us to declare the data types *once* (in the
	  bidirectional_graph_adapter class)
	  and then use them everywhere without needing a global typedef or
	  something
	  similar.

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp:
	  
	  rework bidirectional graph and adapter per Jon's email

2008-12-27  kbwheel

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  remove the few last raw types from bidirectional_graph_adapter

	* mtgl/bidirectional_graph.h:
	  
	  minimize the raw types

	* mtgl/pagerank.hpp:
	  
	  fix a small type issue in pagerank

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/pagerank.hpp, test/mtgl_test.h, test/test_pagerank.cpp:
	  
	  removed int from bidirectional graph adapter (except in MTAs
	  snapshot restore function) in a way that seems to work without
	  disturbing anything else

2008-12-26  kbwheel

	* mtgl/util.h:
	  
	  better mt_init

2008-12-26  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp, test/mtgl_test.h:
	  
	  working on parallelism

2008-12-25  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Working on parallelism

	* mtgl/vertex_betweenness.hpp:
	  
	  Working on parallelism

2008-12-24  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Working on parallelism

2008-12-24  kbwheel

	* test/test_connected_components.cpp:
	  
	  both bits of info

2008-12-23  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Working on parallelism

2008-12-22  Jon Berry <jberry@sandia.gov>

	* test/test_bfs.cpp:
	  
	  snapshot capability, and debugging info commented out

	* mtgl/bfs.hpp, mtgl/visit_adj.hpp, test/test_bfs.cpp:
	  
	  Running, but not scaling, in qthreads.

2008-12-22  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Increased parallelism.

2008-12-22  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp,
	  test/test_connected_components.cpp:
	  
	  The "foo_sv" is a better implementation of Shiloach-Vishkin for
	  the XMT
	  (though it'll hot spot on large data).
	  It'll replace sv shortly. The "gcc_sv" is commented out at the
	  moment,
	  as there are bfs and sv setup issues to resolve.

2008-12-22  kbwheel

	* test/mtgl_test.h:
	  
	  mtgl_test.h:422: error: default template arguments may not be
	  used in function templates

2008-12-22  Jon Berry <jberry@sandia.gov>

	* test/mtgl_test.h:
	  
	  default arg

2008-12-21  Jon Berry <jberry@sandia.gov>

	* test/rmat2file.cpp:
	  
	  A working version; there was some earlier svn
	  confusion.

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/pagerank.hpp,
	  mtgl/util.h, test/Makefile.am, test/test_dimacs_format.cpp,
	  test/test_pagerank.cpp:
	  
	  The new file "rmat2file" generates rmat graphs and stores them
	  to (dimacs|matrixmarket|XMT snapshot). test_pagerank is now set
	  up
	  to read previously snapshot graphs from LUSTRE.

	* mtgl/gen_rmat_graph.hpp:
	  
	  Now that snapshot works, make sure to permute vertices _before_
	  snapshotting.

2008-12-20  Jon Berry <jberry@sandia.gov>

	* test/rmat2file.cpp:
	  
	  Convenient generation of rmat graphs in files: dimacs,
	  matrixmarket,snapshot.

	* mtgl/bfs.hpp, mtgl/edge_array_adapter.hpp, mtgl/util.h,
	  mtgl/visit_adj.hpp, test/mtgl_test.h:
	  
	  Fixes to the load balanced visit_adj and the bfs_chunked.

2008-12-19  Jon Berry <jberry@sandia.gov>

	* mtgl/graph_adapter.hpp:
	  
	  snap_restore works with LUSTRE now.

2008-12-18  Vitus Leung <vjleung@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/vertex_betweenness.hpp:
	  
	  Working on parallelism.

2008-12-18  kbwheel

	* mtgl/connected_components.hpp,
	  test/test_connected_components.cpp:
	  
	  find biggest cc

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, test/test_static_graph3.cpp:
	  
	  Qthreading the sv setup step in gcc_sv.

2008-12-18  kbwheel

	* mtgl/bfs.hpp:
	  
	  using mt_incr instead of int_fetch_add

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  using mt_incr instead of int_fetch_add

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  default parameter for test program compilation, convenience.

2008-12-18  kbwheel

	* ., mtgl, test:
	  
	  ignore autotools droppings

	* config:
	  
	  ignore autotools droppings

	* mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/psearch.hpp, test/mtgl_test.h,
	  test/test_bfs.cpp, test/test_connected_components.cpp,
	  test/test_pagerank.cpp:
	  
	  more "incrementable" template propogation

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/pagerank.hpp,
	  mtgl/xmt_hash_table.hpp, test/test_pagerank.cpp,
	  test/test_snapshot.cpp, test/test_static_graph3.cpp:
	  
	  Testing snapshot with LUSTER, gave gen_rmat_graph's constructor
	  a,b,c,d
	  paramters (at long last), and boosted the number of streams in
	  PageRank.

2008-12-18  kbwheel

	* mtgl/static_graph_adapter.hpp:
	  
	  use mt_incr instead of int_fetch_add, so that its portable

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, test/test_bfs.cpp:
	  
	  snap_stat for the graph_adapter snapshot read, a residual type
	  fix to
	  createEdges after Kyle's recent changes, and a first cut at the
	  qthread-friendly gcc_sv

2008-12-18  kbwheel

	* mtgl/connected_components.hpp,
	  test/test_connected_components.cpp:
	  
	  better templating of incrementable int type

	* mtgl/connected_components.hpp,
	  test/test_connected_components.cpp:
	  
	  better templating of incrementable int type

	* mtgl/psearch.hpp:
	  
	  minor type correcting

	* mtgl/connected_components.hpp, mtgl/induced_subgraph.h,
	  mtgl/metrics.hpp, mtgl/psearch.hpp:
	  
	  better templating of "incrementable" int type

	* mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/gen_mesh_graph.hpp, mtgl/psearch.hpp,
	  test/test_connected_components.cpp:
	  
	  correcting connected components signedness

	* mtgl/gen_rmat_graph.hpp, mtgl/static_graph_adapter.hpp:
	  
	  correct signedness for test_pagerank

	* mtgl/components_visitor.h, mtgl/graph_adapter.hpp:
	  
	  another signedness update (keeping these things small on purpose)

	* mtgl/dynamic_array.h, mtgl/graph.h, mtgl/pagerank.hpp,
	  mtgl/util.h:
	  
	  non-intrusive type corrections for increments and such

	* mtgl/xmt_hash_table.hpp:
	  
	  fix signedness of size type

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, test/test_bfs.cpp:
	  
	  bfs_chunked works qthreads now

2008-12-18  kbwheel

	* test/test_bfs.cpp:
	  
	  fix the mt_incr size and signedness

2008-12-18  Jon Berry <jberry@sandia.gov>

	* mtgl/bfs.hpp, mtgl/pagerank.hpp, mtgl/visit_adj.hpp,
	  test/Makefile.am, test/test_bfs.cpp, test/test_dimacs_format.cpp:
	  
	  Fixes to chunked bfs. Load balancing information wasn't being
	  recomputed
	  for each level when debugging was on.

2008-12-17  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Adding parallelism

	* mtgl/vertex_betweenness.hpp:
	  
	  Fixed inherited parallelism bug.

2008-12-17  kbwheel

	* test/test_bfs.cpp:
	  
	  pass qthread_init the correct value

2008-12-17  Jon Berry <jberry@sandia.gov>

	* test/test_bfs.cpp:
	  
	  A little friendlier test format. Clears
	  valgrind without qthreads; dies in qthreads,
	  depending on the chosen src vertex.

	* mtgl/visit_adj.hpp, test/test_bfs.cpp:
	  
	  qthread compilation. crashes in qthreads on linux

	* mtgl/bfs.hpp, mtgl/gen_rmat_graph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/visit_adj.hpp, test/Makefile.am, test/test_bfs.cpp,
	  test/test_dimacs_format.cpp, test/test_static_graph3.cpp:
	  
	  chunked bfs working in Linux (not tested for qthreading yet).

	* mtgl/graph_adapter.hpp, mtgl/visit_adj.hpp:
	  
	  Bug fixes to visit_adj's chunked visit

2008-12-16  Jon Berry <jberry@sandia.gov>

	* mtgl/visit_adj.hpp:
	  
	  Visit a group of nodes (such as the next level of a BFS)

2008-12-16  kbwheel

	* mtgl/util.h:
	  
	  mt_init, per request

	* configure.ac, mtgl/rand_fill.hpp:
	  
	  address randomization portability in a cross-compiler
	  cross-platform way

	* mtgl/connected_components.hpp, mtgl/dynamic_array.h,
	  mtgl/metrics.hpp, mtgl/psearch.hpp,
	  mtgl/static_graph_adapter.hpp:
	  
	  Sun's compiler doesn't care for using typeof() in declarations or
	  templates

	* mtgl/read_matrixmarket.hpp:
	  
	  we were using signed integers as indexes into files bigger than
	  2GB - which led to lots of fun side-effects. probably *should* be
	  off_t, but too many versions of c++ dont have it (its part of the
	  POSIX 1003.1 standard as of 1990, but only for C).

2008-12-15  bwbarre

	* mtgl/read_matrixmarket.hpp:
	  
	  If there were more edges (and therefore more lines) in the file
	  than the
	  nnz count reported, the code would segfault. Instead make it
	  return a
	  (possibly obtuse) error and exit cleanly.

2008-12-15  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_boost_property.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/util.h, mtgl/visit_adj.hpp, test/test_pagerank.cpp,
	  test/test_static_graph3.cpp:
	  
	  Demonstrating a compiler issue - it seems unable to merge loops
	  involving
	  a pointer parameter, even if we create a local copy to
	  manipulate. The
	  loops are merged correctly if there's no parameter and we return
	  a value
	  (see compute_in_degree2 and compute_in_degree3 in
	  test_static_graph3.cpp).

	* mtgl/gen_rmat_graph.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/visit_adj.hpp, test/test_dimacs_format.cpp,
	  test/test_static_graph3.cpp:
	  
	  PERMUTE_NODES option didn't make it into the correct gen_rmat
	  method,
	  fixes to dimacs graph writing.

2008-12-14  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/rand_fill.hpp:
	  
	  You can now compile with -DPERMUTE_NODES to obtain an rmat graph
	  with rows and columns permuted.

2008-12-14  bwbarre

	* mtgl/pagerank.hpp, test/test_pagerank.cpp:
	  
	  add ability to use bidirectional graphs for qthread pagerank.
	  Removes the
	  atomic update hotspot

2008-12-13  bwbarre

	* mtgl/pagerank.hpp:
	  
	  qthreadize the new loops in the pagerank code. The
	  qt_double_max() calls
	  are causing some issues with cleanup, but everything else seems
	  to work

	* mtgl/util.h:
	  
	  Add a version of mt_incr that takes a pointer directly, instead
	  of taking a
	  reference. Useful for those times when you have the memory
	  address, but not
	  the object...

	* mtgl/read_matrixmarket.hpp:
	  
	  Remove accidental debug code committed in r2116

	* mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp:
	  
	  * Fix argument ordering in dimacs readline code. It wasn't wrong,
	  but
	  was a bit weird.
	  * Similar optimization for matrixmarket reader as for the dimacs
	  reader
	  in r2114, using a custom parsing code instead of sscanf. On my
	  laptop, reduced time to read a 2^18 edge graph from 67 seconds to
	  under half a second.

	* mtgl/read_dimacs_graph.hpp:
	  
	  Add a comment explaining why we don't use sscanf anymore. Also,
	  set weight
	  to 0 if we read an edge instead of an arc.

	* mtgl/read_dimacs_graph.hpp:
	  
	  rewrite of the dimacs reader. The rewrite was spurred by a
	  quadratic-like
	  performance penalty as the graph size grew. The quadratic problem
	  was
	  caused by the use of sscanf() in the inner loop of the edge
	  iteratation,
	  which has horrible performance. By the time I figured that out, I
	  had
	  rewritten enough of the code that I finished the cleanup.
	  
	  Now use a really stupid parsing loop and atoi() instead of
	  sscanf,
	  dropping the time to read a 2^23 edge graph from over 300 seconds
	  to
	  just over 5 seconds on my laptop.

2008-12-12  Jon Berry <jberry@sandia.gov>

	* mtgl/visit_adj.hpp, test/test_static_graph3.cpp:
	  
	  Revisiting chunked adjacency list traversal.

2008-12-12  Vitus Leung <vjleung@sandia.gov>

	* mtgl/vertex_betweenness.hpp:
	  
	  Working on vertex betweenness.

2008-12-12  kbwheel

	* configure.ac:
	  
	  oops - typo caused spurious warning

	* config/mtgl_compiler_flags.m4, config/mtgl_compiler_options.m4,
	  configure.ac:
	  
	  fix mta detection (the test condition was backwards), improve
	  LIBS handling, and fix several quoting issues

2008-12-11  Jon Berry <jberry@sandia.gov>

	* configure.ac, mtgl/connected_components.hpp, mtgl/util.h:
	  
	  Loose ends - XMT compilation.

	* mtgl/edge_array_adapter.hpp:
	  
	  Was missing this file. Enables parallel arrays of ints to be
	  treated as (src,dest) edges -- can run Shiloach-Vishkin on that.

	* mtgl/connected_components.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/util.h, test/csr_test.cpp,
	  test/mtgl_test.h, test/test_community.cpp,
	  test/test_community2.cpp, test/test_community3.cpp,
	  test/test_connected_components.cpp, test/test_csr_graph.cpp,
	  test/test_find_triangles.cpp, test/test_independent_set.cpp,
	  test/test_mask_search.cpp, test/test_newmanbenchmark.cpp,
	  test/test_pagerank.cpp, test/test_static_graph3.cpp:
	  
	  * Got rid of deprecated "csr_graph" (we use static_graph instead)
	  * Added XMT snapshot capability to gen_rmat_graph
	  (snap_shapshot),
	  and graph_adapter and static_graph_adapter (snap_restore).
	  
	  cc_test and test_pagerank build with USING_QTHREADS, all build
	  without qthreads.

2008-12-10  Jon Berry <jberry@sandia.gov>

	* mtgl/SMVkernel.h:
	  
	  Had to back out some recent changes in order to get connection
	  subgraphs to
	  compile. The problem is the SMVkernel.h isn't generic -- it
	  thinks that
	  an int is always an int (when the user might want longs).
	  We need to make this generic.
	  
	  I submitted a ticket for this to the trac site:
	  software.sandia.gov/mtgl

2008-12-09  kbwheel

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl_aux.hpp,
	  mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/connection_subgraphs.hpp, mtgl/csr_graph.h,
	  mtgl/csr_graph_adapter.hpp, mtgl/disjoint_paths_max_flow.hpp,
	  mtgl/dneighborhoods.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/euler_tour.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph.h, mtgl/graph_adapter.hpp,
	  mtgl/independent_set.hpp, mtgl/induced_subgraph.h,
	  mtgl/k_distance_neighborhood.hpp, mtgl/metrics.hpp,
	  mtgl/mmgraph.h, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_search_edgetime.hpp, mtgl/neighborhoods.hpp,
	  mtgl/pagerank.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/psearch.hpp, mtgl/psearch_aux.hpp, mtgl/pseudo_diameter.hpp,
	  mtgl/quicksort.hpp, mtgl/random_walk.hpp,
	  mtgl/random_walk_visitor.h, mtgl/read_dimacs_graph.hpp,
	  mtgl/read_matrixmarket.hpp, mtgl/recursive_dcsc.hpp,
	  mtgl/serqsort.hpp, mtgl/snl_community.hpp,
	  mtgl/snl_community2.hpp, mtgl/snl_community3.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/st_connectivity.hpp,
	  mtgl/st_search.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/static_graph_adapter.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/test_graph.hpp, mtgl/test_graph_adapter.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp, mtgl/triangles.hpp,
	  mtgl/util.h, mtgl/vertex_betweenness.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table_adapter.hpp, test/graph.cpp,
	  test/mtgl_test.h, test/test_pagerank.cpp:
	  
	  fixed all gcc complaints with -Wall -Wno-pragmas
	  -Wnno-unknown-pragmas -Wno-unused

	* mtgl/SMVkernel.h, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/csr_graph.h,
	  mtgl/dynamic_array.h, mtgl/graph.h, mtgl/mmgraph.h,
	  mtgl/psearch.hpp, mtgl/static_graph_adapter.hpp, mtgl/util.h,
	  mtgl/xmt_hash_table.hpp, test/graph.cpp, test/mtgl_test.h:
	  
	  a few more size changes, and chasing down -Wall errors

2008-12-08  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/xmt_hash_table.hpp:
	  
	  reference parameter error fix

2008-12-08  bwbarre

	* mtgl/SMVkernel.h, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/csr_graph.h,
	  mtgl/dynamic_array.h, mtgl/gen_mesh_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph.h, mtgl/graph_adapter.hpp,
	  mtgl/psearch.hpp, mtgl/static_graph_adapter.hpp, mtgl/util.h,
	  mtgl/xmt_hash_table.hpp, test/test_connected_components.cpp:
	  
	  Be more consistent in the usage of FEBs only on word-sized data,
	  so that the code can work on platforms
	  using qthreads, where int is not word-sized

	* configure.ac:
	  
	  Fix a couple of assignments that aren't valid sh

2008-12-04  bwbarre

	* mtgl/util.h:
	  
	  Two changes to allow compilation on Solaris. Processor affinity
	  is different
	  there, so if CPU_SET isn't found, don't do Linux PA. u_int64_t
	  isn't
	  available, but uint64_t is, so do the typedef magic

2008-12-02  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/rand_fill.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  The qthreaded rmat generation (with duplicate removal) is not
	  deterministic. Different threads race to insert their edges,
	  and we quit when we're within tolerance of the desired
	  number of edges. This is the case even though the threads
	  share the same sequence of random numbers that a serial run
	  would use.
	  
	  Up to this glitch in generation, the qthreaded Shiloach-Vishkin
	  connected components is working and scaling on small inputs.

2008-12-01  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/pagerank.hpp,
	  mtgl/static_graph_adapter.hpp, test/mtgl_test.h,
	  test/test_connected_components.cpp, test/test_pagerank.cpp:
	  
	  Updated qthreading for gen_rmat_graph, pagerank, and
	  connected_components_sv.

2008-11-19  cljanss

	* mtgl/connected_components.hpp, mtgl/metrics.hpp, mtgl/mmio.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/read_matrixmarket.hpp,
	  mtgl/triangles.hpp, mtgl/ufl.h, mtgl/xmt_hash_table_adapter.hpp,
	  test/VolVolume.cpp, test/test_pagerank.cpp, test/ufl.cpp:
	  
	  fixed a variety of gcc 4.3 warnings: ignored return values,
	  string constant to char* conversion, undeclared libc functions,
	  format string/arg inconsistencies

2008-11-18  cljanss

	* mtgl/mmio.hpp, mtgl/mtgl_adapter.hpp, test/test_pagerank.cpp:
	  
	  fixed illegal string constant to char* conversions

	* mtgl/util.h:
	  
	  Only include mtgl_config.h if HAVE_CONFIG_H is defined.
	  Hopefully, this will solve visual studio issues.

2008-11-07  Jon Berry <jberry@sandia.gov>

	* LICENSE:
	  
	  Sandia copyright language and Berkeley open-source license
	  language.

2008-11-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Using smaller integer in hash function on non-MTA machines caused
	  too many
	  collisions. Now using larger integer from MTA code for all
	  machines.

2008-10-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/dneighborhoods.hpp:
	  
	  Update dneighborhoods.hpp to work with updated xmt_hash_table.

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fixes bug where multiple function / operator calls to the same
	  hash table
	  on the same line caused incorrect behavior.
	  
	  This type of functionality now works correctly:
	  
	  xmt_hash_table<int, int> ht;
	  ht.update(4, ht[4] + 3);
	  
	  Another change is that the proxy object no longer returns
	  references to the
	  hash table data. It now returns a copy.
	  
	  Thus, in functions where you had to cast the proxy object to a
	  reference,
	  you now should cast them to the data type:
	  
	  printf("ht[%d] = %d\n", key, (int) ht[key]);

2008-10-23  William McLendon <wcmclen@sandia.gov>

	* mtgl/st_search.hpp:
	  
	  

2008-10-23  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/dneighborhoods.hpp,
	  mtgl/gen_rmat_graph.hpp, test/mtgl_test.h,
	  test/test_pagerank.cpp:
	  
	  This version works with wCNM.

2008-10-22  Greg Mackey <gemacke@sandia.gov>

	* test/al_graph.cpp:
	  
	  al_graph::deep_copy() now does the copy itself instead of calling
	  init()
	  and hence add_edges(). As deep_copy() was the only usage of
	  add_edges()
	  that needed to guarantee consistent ordering of the vertices'
	  edge lists,
	  add_edges() now adds the edges in parallel. This will speed up
	  adding edges
	  to an al_graph in all cases except for during a copy.

2008-10-20  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, mtgl/vertex_betweenness.hpp:
	  
	  Working on vertex betweenness.

2008-10-20  Jon Berry <jberry@sandia.gov>

	* COPYRIGHT:
	  
	  BSD license language added after DOE copyright language.

2008-10-17  Jon Berry <jberry@sandia.gov>

	* mtgl/dneighborhoods.hpp, mtgl/gen_rmat_graph.hpp,
	  test/mtgl_test.cpp, test/test_community3.cpp, test/test_oc.cpp:
	  
	  test_community3.cpp now uses proper api for calling
	  connected_components_sv.
	  dneighborhoods.hpp finds sum of edge weights in one-neighborhoods
	  of vertices
	  and edges.

2008-10-16  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/test_find_degree_degree_correlation.h:
	  
	  Updating my scratch.

2008-10-15  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, mtgl/pseudo_diameter.hpp:
	  
	  Updating scratch.

2008-10-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/graph_traits.hpp, mtgl/util.h:
	  
	  Reverting to previous version which is correct.

2008-10-14  Vitus Leung <vjleung@sandia.gov>

	* mtgl/graph_traits.hpp, mtgl/metrics.hpp, mtgl/util.h,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.h:
	  
	  Committing my scratch and commented out an include that no longer
	  exists in util.h.

2008-10-10  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  added check for conservation of flow at nodes

	* mtgl/VolVolume.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/snl_community.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/ufl.h, test/VolVolume.cpp, test/test_community.cpp:
	  
	  Took out deprecated load leveling masks.

2008-10-09  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/subgraph_adapter.hpp, test/al_graph.cpp:
	  
	  Rename duplicate() to deep_copy() as it is more descriptive and
	  to be
	  consistent with the naming in the hash data structures.

	* mtgl/al_graph_adapter.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Update adapters to handle vertices_size_type correctly.

	* mtgl/subgraph_adapter.hpp, mtgl/xmt_hash_set.hpp,
	  mtgl/xmt_hash_table.hpp:
	  
	  Several things:
	  - Fixed bug where the default and copy constructors of
	  subgraph_adapter
	  didn't initialize m_local_vertex and m_local_edge, which are hash
	  tables, to hold enough values.
	  - Improved parallel performance of subgraph_adapter::duplicate().
	  - Renamed HASH_INIT_SIZE preprocessor variable for xmt_hash_table
	  and
	  xmt_hash_set so they weren't defining the same variable.

2008-10-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Fixing a merge issue.

2008-10-08  Jon Berry <jberry@sandia.gov>

	* configure.ac, mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/connected_components.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/euler_tour.hpp,
	  mtgl/generate_subgraph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/graph_traits.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_boost_property.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/util.h, mtgl/xmt_hash_table_adapter.hpp,
	  test/test_connected_components.cpp:
	  
	  The connected_components_sv class now demonstrates the correct
	  way to pass
	  properties to algorithms (with property maps).

2008-10-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_adapter.hpp:
	  
	  Slightly improve parallel performance in add_vertices() and
	  add_edges().

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Several things:
	  - Fixed bugs in copy control for duplicate_adapter,
	  transpose_adapter,
	  and subgraph_adapter.
	  - Changed subgraph_adapter to do a deep copy.
	  - Added print functions to adapters.

2008-10-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp, mtgl/generate_subgraph.hpp:
	  
	  Fix bugs found by valgrind.

2008-10-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_set.hpp:
	  
	  Fixes bug in xmt_hash_set::operator=() where the old memory
	  wasn't
	  freed before the new table was assigned.

	* test/al_graph.cpp:
	  
	  Safer stopping condition for loop deleting memory.

	* mtgl/random.h, mtgl/subgraph_isomorphism.hpp,
	  mtgl/xmt_hash_table.hpp:
	  
	  Several updates:
	  - Fixes bug in xmt_hash_table::operator=() where the old memory
	  wasn't
	  freed before the new table was assigned.
	  - Fixes memory bugs in random.h and subgraph_isomorphism.hpp
	  found by
	  Valgrind.

2008-10-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/transpose_adapter.hpp,
	  test/al_graph.cpp:
	  
	  Updates al_graph, al_graph_adapter, transpose_adapter, and
	  duplicate_adapter to perform deep copies. Fixes bugs that were in
	  copy control.

2008-09-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, test/al_graph.cpp:
	  
	  Added function printDotfile() that prints the graph as a DOT
	  file.

	* mtgl/al_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/xmt_hash_set.hpp,
	  test/al_graph.cpp:
	  
	  Updates to get test_subgraph_isomorphism to compile on MTA.

2008-09-25  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  Took out boost tuple include.

2008-09-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Changed bipartite graph to be of type al_graph_adapter instead of
	  being tied
	  to one of the template types. This reduces restrictions on the
	  target graph
	  type.

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Removed max result verts filtering. It won't work in parallel.
	  Only serial.

2008-09-11  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp, mtgl/generate_subgraph.hpp:
	  
	  Added generate_subgraph which randomly generates a subgraph of a
	  given
	  graph. Fixed a couple of stylistic things in filter_graph.

2008-09-10  William McLendon <wcmclen@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp:
	  
	  

2008-09-09  Brad Mancke

	* mtgl/neighborhoods.hpp:
	  
	  Added for test_oc.cpp.

2008-09-09  Jon Berry <jberry@sandia.gov>

	* test/mtgl_test.cpp, test/test_oc.cpp:
	  
	  Running on full suites of Girvan/Newman benchmark graphs.

2008-09-08  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, test/test_community3.cpp,
	  test/test_newmanbenchmark.cpp, test/test_oc.cpp:
	  
	  Avatar output in test_oc.cpp ("test opening costs").

2008-09-04  Brad Mancke

	* test/test_newmanbenchmark.cpp:
	  
	  Added mechanisms to print out results.

2008-09-03  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp, mtgl/subgraph_isomorphism.hpp:
	  
	  Added more comments for the interfaces.

2008-09-03  Jon Berry <jberry@sandia.gov>

	* mtgl/contraction_adapter.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/snl_community3.hpp, mtgl/ufl.h, test/graph.cpp,
	  test/mtgl_test.h:
	  
	  coming up to date.

	* mtgl/graph.h:
	  
	  patch for lazy vertex creation

	* mtgl/graph_adapter.hpp:
	  
	  Greg's change back in.

	* mtgl/graph_adapter.hpp:
	  
	  Unfortunate temporary change -- need to revisit lazy vertex
	  creation.

	* mtgl/gen_newmanbenchmark.hpp, test/test_newmanbenchmark.cpp:
	  
	  Girvan/Newman benchmark.

2008-09-02  Brad Mancke

	* test/mtgl_test.h:
	  
	  Added the karate graph and a ring of 6 cliques of size 5 to the
	  debug graph.

2008-08-29  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, test/test_newmanbenchmark.cpp:
	  
	  Newman/Girvan benchmark working in serial.

2008-08-28  Greg Mackey <gemacke@sandia.gov>

	* mtgl/euler_tour.hpp, mtgl/random_walk_visitor.h:
	  
	  Integrating euler tour code into the trunk. It now works
	  correctly for
	  directed and undirected graphs. Also, a slight update to the
	  random
	  walk code.

2008-08-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/graph_traits.hpp, mtgl/static_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Wrapper adapters can now be nested without needing template
	  specializations defined. They just work now with a single
	  definition.
	  Woohoo!
	  
	  I added base_adapter_type as a typedef requirement for
	  graph_traits, and
	  I added this change to all the graph adapters.

2008-08-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/vtk_graph_adapter.hpp:
	  
	  Removing vtk_graph_adapter as it is outdated and no longer used.
	  Updating other graph adapters to comply with recent updates.

	* mtgl/filter_graph.hpp:
	  
	  Got rid of a couple of unused variables and fixed a couple of
	  get() calls.

2008-08-22  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community3.hpp, test/test_community3.cpp:
	  
	  Weighted edge version.

2008-08-19  William McLendon <wcmclen@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  

2008-08-18  William McLendon <wcmclen@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  working on list-based run() method

	* mtgl/gen_mesh_graph.hpp:
	  
	  

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  Added new constructor which allows the Queue size to be
	  speccified
	  as something other than g.order(). This is useful for situations
	  such as divide-and-conquer algorithms which might recursively
	  divide
	  a graph into subproblems.
	  The default breadth_first_search_mtgl constructor calls the
	  queue<T>
	  constructor with size as g.order(). This is ok unless the
	  search is called within a recursive divide and conquer algorithm,
	  in which case the O(V) operation in the constructor then becomes
	  O(V^2).
	  
	  Also, added a new run() method (not in high-low) which takes
	  multiple
	  starting vertices starts them up simultaneously.

	* mtgl/gen_mesh_graph.hpp:
	  
	  

2008-08-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Updates to better support my inclusion of graph_type in
	  graph_traits.
	  Also, better support Jon's changes to get rid of the graph as a
	  parameter
	  to the constructor of vertex_type_map.

2008-08-15  Jon Berry <jberry@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/mtgl_adapter.hpp, mtgl/snl_community.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/xmt_hash_table_adapter.hpp:
	  
	  The vertex_type_map doesn't need the graph.

2008-08-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/graph_traits.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp, test/test_subgraph_alGraph.cpp:
	  
	  Several changes:
	  - Removed outdated test_subgraph_alGraph.cpp.
	  - Made the data for wrapper adapters private.
	  - Added the graph_traits typedef graph_type.
	  - All graph adapters (primary and wrapper) now have a function
	  get_graph()
	  that returns a pointer to the underlying graph.
	  - Wrapper adapters now have the functions get_adapter() that
	  returns a
	  reference to the underlying adapter and get_original_adapter()
	  that
	  returns a reference to the adapter wrapped around.

2008-08-13  William McLendon <wcmclen@sandia.gov>

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  added PURE_FILTER and AND_FILTER modes for
	  bidirectional_graph_adapter
	  in REVERSED setting.

	* mtgl/breadth_first_search_mtgl.hpp:
	  
	  added some new permutations of the visitors for PURE_FILTER and
	  AND_FILTERS
	  for DIRECTED graphs and DIRECTED, Bidirectional graphs.

2008-08-13  Greg Mackey <gemacke@sandia.gov>

	* test/al_graph.cpp:
	  
	  Oops. Forgot to commit this file with the last update.

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/duplicate_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Changed al_graph_adapter::init() to have default parameters of 0
	  for the
	  edge types and for the vertex type. The new function declaration
	  is:
	  
	  void init(int numVerts, int numEdges, int* sources, int* targets,
	  short* eTypes1 = 0, short* eTypes2 = 0, short* vTypes = 0);
	  
	  This makes it more consistent with how graph_adapter works.

2008-08-13  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp, test/Makefile.am,
	  test/mtgl_test.h, test/test_dpmf.cpp:
	  
	  Merged version of disjoint paths max flow that I had in my
	  sandbox for a while with the trunk.

2008-08-13  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  The subgraph isomorphism code now compiles and passes my tests.

2008-08-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_mesh_graph.hpp:
	  
	  

	* mtgl/gen_mesh_graph.hpp:
	  
	  added a bit more coarse grain parallelism.

	* mtgl/connection_subgraphs.hpp, mtgl/gen_mesh_graph.hpp:
	  
	  

	* mtgl/xmt_hash_table.hpp:
	  
	  fixed a return type issue that was causing compile issues on
	  windows and the mta.

	* mtgl/gen_mesh_graph.hpp:
	  
	  fixed bad mta pragma

2008-08-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Major update that merges in the changes I was using for the
	  network
	  intrusion problem.

2008-08-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_mesh_graph.hpp:
	  
	  bugfix.

2008-08-12  Greg Mackey <gemacke@sandia.gov>

	* mtgl/filter_graph.hpp:
	  
	  Moved the filtering algorithm from the subgraph isomorphism code
	  to an
	  external algorithm that can be called from anywhere. The new
	  version is
	  quite flexible as the user defines the criteria for the filtering
	  through
	  creating a function object.

2008-08-11  William McLendon <wcmclen@sandia.gov>

	* mtgl/util.h:
	  
	  Added MESH graph type for 3D the 3D mesh generator selection.

	* test/mtgl_test.h:
	  
	  Added 3D mesh graph generator options.
	  This is to be used for testing the Strongly Connected Component
	  codes against something other than R-MAT graphs.

	* mtgl/gen_mesh_graph.hpp:
	  
	  First cut of a simple 3D mesh graph generator with the capability
	  to also insert random cycles. Pretty straight forward, so far it
	  just generates numZ slices of size numX*numY.
	  
	  Initial tests look like it's working right, but I still need to
	  get the X,Y,Z, and numSCC parameters pushed up to the app
	  command line level for testing.

2008-08-11  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_dimacsrandom_graph.hpp, mtgl/read_matrixmarket.hpp:
	  
	  Added guards.

	* mtgl/duplicate_adapter.hpp:
	  
	  include subgraph_adapter.hpp

2008-08-08  Jon Berry <jberry@sandia.gov>

	* test/test_static_graph4.cpp:
	  
	  Example of using st_search through the duplicate_graph_adapter
	  to give an illusion of undirectedness. Copies the graph at
	  the moment, but works on a small example.

2008-08-08  William McLendon <wcmclen@sandia.gov>

	* mtgl/st_search.hpp:
	  
	  fixed an issue with true directed graphs in the discover phase,
	  recording phase is still problematic for true directed graphs
	  in that it might not be able to backtrack from the meeting
	  point(s)
	  back to the origin. investigating...

2008-08-08  Jon Berry <jberry@sandia.gov>

	* mtgl/sssp_deltastepping.hpp, test/test_static_graph4.cpp:
	  
	  Bug fix in computation of numBuckets. There's now
	  a more realistic estimate of "infinity": 20 times the
	  average edge weight (where 20 is a surrogate for the
	  diameter). Dividing that by delta gives a reasonable
	  number of buckets. Then we make sure to stay within
	  that limit.

2008-08-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/psearch.hpp, mtgl/transpose_adapter.hpp:
	  
	  Updated comments and formatting.

2008-08-08  Jon Berry <jberry@sandia.gov>

	* configure.ac:
	  
	  It didn't like -Wall for some reason.

	* mtgl/pagerank.hpp, test/test_pagerank.cpp:
	  
	  Moving pagerank in as a real algorithm. The test_pagerank code
	  now calls it.

	* configure.ac:
	  
	  The autoconf process was generation a GPL copyright message, but
	  the MTGL is
	  going to be licensed under Berkeley open-source.

2008-08-08  Greg Mackey <gemacke@sandia.gov>

	* mtgl/psearch.hpp:
	  
	  Fixed bug where psearch_high_low::run() didn't search through the
	  small
	  degree vertices.

2008-08-07  Greg Mackey <gemacke@sandia.gov>

	* mtgl/transpose_adapter.hpp:
	  
	  Rewrote how transpose adapter works for a subgraph adapter
	  template type.
	  
	  No longer is the transpose of the original graph of the subgraph
	  taken and
	  then a subgraph adapter wrapped around that. Instead a transpose
	  is created
	  of the subgraph directly yielding a graph of the same type as the
	  primary
	  adapter the subgraph wraps around.
	  
	  This makes taking a transpose of a subgraph much faster as only
	  the
	  transpose of the subgraph is taken. It significantly reduces
	  memory usage
	  as well.

	* mtgl/duplicate_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  Several upates:
	  - The transpose adapter will now accept a duplicate adapter as
	  its
	  template type.
	  - The duplicate adapter will now accept a subgraph adapter as its
	  template type.
	  - Renamed get_duplicate_graph(), get_transpose_graph(), and
	  get_subgraph()
	  to get_graph() to be consistent with primary adapters.
	  - Fixed the return type for some of the get_graph() family of
	  functions.

2008-08-06  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/duplicate_adapter.hpp,
	  mtgl/random_walk.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/transpose_adapter.hpp:
	  
	  First cut at duplicate adapter. Improved comments and a few small
	  changes
	  in adapters.

2008-08-05  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/topsort_visitor.h, mtgl/transpose_adapter.hpp,
	  test/al_graph.cpp:
	  
	  Several Changes:
	  - Added indegrees and outdegrees to al_graph and graph adapters.
	  - Made the topsort algorithms work correctly for directed and
	  undirected
	  graphs. This required writing separate algorithms for much of the
	  underneath code, but the main access functions work for both.
	  - Changed how a self loop is stored in the adjacency list of an
	  undirected
	  graph. It is now stored only once instead of twice (undirected
	  graphs
	  normally store a pointer to the edge in both the source and
	  destination
	  vertex adjacency lists) so that the edge is only accessed once
	  when
	  iterating over the adjacency list.

2008-08-04  kddevin

	* test/test_pagerank.cpp:
	  
	  Removed variable "bottleneck" from test_pagerank.cpp.
	  It was not clear why it was there in the first place.
	  I hope it wasn't there for the XMT runs.

2008-07-31  Jon Berry <jberry@sandia.gov>

	* mtgl/st_connectivity.hpp:
	  
	  The DIRECTED case was incorrect since it relied on all
	  adjacencies (in and
	  out) being located in the adjacency list of each vertex. In a
	  true directed
	  graph, this won't be the case. Here is a fix that works on small
	  input on
	  Linux.

2008-07-25  Jon Berry <jberry@sandia.gov>

	* LICENSE:
	  
	  Language asserting Berkeley open-source license (not complete or
	  formal yet,
	  so the MTGL is not yet officially released).

	* COPYRIGHT:
	  
	  copyright came through! We can make this a Berkeley open-source
	  code now.

2008-07-24  Greg Mackey <gemacke@sandia.gov>

	* mtgl/random_walk.hpp, mtgl/random_walk_visitor.h:
	  
	  The random walk code will now work for both directed and
	  undirected graphs.
	  It no longer returns any properties of vertices or edges; it only
	  returns
	  the ids of the vertices and edges in the walk. If properties are
	  needed,
	  users can grab them themselves.
	  
	  If a directed graph has a sink, the code asserts an error and
	  dies.

2008-07-23  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_set.hpp:
	  
	  Forgot to update a variable name.

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Updated formatting.

	* mtgl/al_graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  mtgl/topsort.hpp, mtgl/transpose_adapter.hpp,
	  mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Includes the following updates:
	  - Fixed various memory leaks.
	  - Fixed copy control (ie copy constructor, assignment operator,
	  and
	  destructor).
	  - Removed extraneous, unused visit() functions from
	  xmt_hash_table and
	  xmt_hash_set.
	  - Added windows typedefs and made visit() parallel for
	  xmt_hash_set.
	  - Updated comments.

2008-07-22  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/psearch.hpp, mtgl/util.h:
	  
	  Fixed a few memory leaks using valgrind.

2008-07-22  Jon Berry <jberry@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  making visit() parallel

	* mtgl/triangles.hpp:
	  
	  cleanup

	* AUTHORS, mtgl/gen_rmat_graph.hpp, mtgl/hash_table.h,
	  mtgl/rand_fill.hpp, mtgl/triangles.hpp, test/mtgl_test.h:
	  
	  Recent changes to rand_fill.hpp broke linux and cygwin; fixing.

2008-07-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_adapter.hpp:
	  
	  Added static cast to fix compiler warning on bombadill about
	  passing a
	  double to an int function argument.

2008-07-18  Jon Berry <jberry@sandia.gov>

	* mtgl/contraction_adapter.hpp, mtgl/snl_community2.hpp,
	  test/test_community2.cpp:
	  
	  Neighborhoods are defined by weights rather than edge
	  cardinality.
	  
	  Correction factors aren't weighted -- need to explore.
	  
	  Works on Karate club on Linux.

2008-07-18  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Fix proxy object that is returned by [] operator of hash.
	  
	  The [] operator allows thread-safe access to elements in the
	  hash_table.
	  It actually returns a proxy_object which is resolved in place to
	  a
	  reference to the element. The proxy_object keeps the lock on the
	  data
	  element until it goes out of scope. If the operator is called on
	  a key
	  that doesn't have an entry in the hash_table, a value-initialized
	  element
	  is added to the table with that key. This is consistent with the
	  behavior
	  of the stl map class. One limitation of the proxy object
	  implementation
	  is that the proxy object must be explicitly casted to be passed
	  to a
	  function as a templated parameter or to a function that has a
	  variable
	  length parameter list such as printf(). The compiler can't figure
	  out
	  the typing otherwise. For example, calling mt_incr() with
	  hash_table<int, int> ht:
	  
	  mt_incr((int &) ht[20], 1);

2008-07-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp:
	  
	  Fixed directedness in al_graph, subgraph_adapter, and
	  transpose_adapter.
	  The directedness of the original graph now trickles through to
	  the
	  adapters. Added the function get_directedness() to the graph
	  adapters
	  to tell the directedness of a graph.

2008-07-17  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community2.hpp:
	  
	  Bug fix to edge-weighted one-neighborhood edge counts.

2008-07-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp:
	  
	  Renamed Vertex::degree() to Vertex::getDegree().

2008-07-16  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community2.hpp:
	  
	  Maintaining edge weights through a series of contractions.

2008-07-14  Jon Berry <jberry@sandia.gov>

	* mtgl/contraction_adapter.hpp, mtgl/snl_community2.hpp,
	  test/mtgl_test.h, test/test_community2.cpp:
	  
	  Toward honoring weights in contraction.

2008-07-11  Jon Berry <jberry@sandia.gov>

	* mtgl/al_graph_adapter.hpp, mtgl/connected_components.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/read_dimacs_graph.hpp,
	  mtgl/snl_community2.hpp, mtgl/subgraph_adapter.hpp, mtgl/ufl.h,
	  test/mtgl_test.h, test/test_community.cpp,
	  test/test_community2.cpp:
	  
	  Edge contraction-based community finding works on Linux on some
	  <100 vertex examples. No weighting of edges in contracted graph
	  yet.

2008-07-11  bnwylie

	* mtgl/rand_fill.hpp:
	  
	  BUG: rand() on windows is only from 0 to 32k. Switching rand()
	  out with srand(uint *)

2008-07-11  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  

2008-07-10  Vitus Leung <vjleung@sandia.gov>

	* mtgl/pseudo_diameter.hpp:
	  
	  further randomized pseudo diameter

	* mtgl/pseudo_diameter.hpp:
	  
	  randomized pseudo diameter

	* mtgl/pseudo_diameter.hpp,
	  test/test_find_degree_degree_correlation.h,
	  test/test_find_vertex_betweenness.cpp:
	  
	  

	* mtgl/metrics.hpp:
	  
	  streamlined cluster coefficient

	* mtgl/metrics.hpp:
	  
	  streamlined connected triples

	* mtgl/metrics.hpp:
	  
	  streamlined degree distribution

	* mtgl/metrics.hpp:
	  
	  streamlined degree degree correlation

	* mtgl/metrics.hpp:
	  
	  streamlined assortativity

	* mtgl/metrics.hpp:
	  
	  streamlined type mixing matrix

	* mtgl/pseudo_diameter.hpp:
	  
	  streamlined pseudo diameter

	* mtgl/vertex_betweenness.hpp:
	  
	  Streamlined vertex betweennes

	* mtgl/pseudo_diameter.hpp, mtgl/vertex_betweenness.hpp,
	  test/test_find_vertex_betweenness.cpp:
	  
	  Adding vertex betweenness.

2008-07-07  bnwylie

	* mtgl/graph.h:
	  
	  COMP: Assuming new add_edges should return the call with a
	  different signature

2008-07-07  Vitus Leung <vjleung@sandia.gov>

	* mtgl/pseudo_diameter.hpp, test/Makefile.am, test/mtgl_test.h:
	  
	  Fixed a couple of bugs in pseudo diameter.

	* mtgl/metrics.hpp, mtgl/pseudo_diameter.hpp:
	  
	  Corrected cluster coefficient and pseudo diameter for directed
	  graphs.

2008-07-05  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/graph.h,
	  mtgl/graph_adapter.hpp, mtgl/subgraph_adapter.hpp,
	  test/test_community2.cpp:
	  
	  Linux compilation, small runs, of edge_induced_subgraph. This
	  required
	  bringing the test graph_adapter class in line with
	  subgraph_adapter
	  requirements. The subgraph_adapter has been used only with the
	  experimental
	  "al_graph_adapter" until now. Iterative community detection by
	  edge
	  requires the removal of isolated vertices. A simple way to do
	  this is
	  to take the edge-induced subgraph of all edges. We'll mask
	  instead to
	  same memory later.

2008-07-03  bnwylie

	* mtgl/xmt_hash_table.hpp:
	  
	  COMP: Native EOL issue (hopefully now resolved)

	* mtgl/xmt_hash_table.hpp:
	  
	  COMP: Adding windows types typedefs. Windows does not have these
	  types defined in the standard includes.

2008-07-02  Jon Berry <jberry@sandia.gov>

	* test/mtgl_test.h, test/test_community2.cpp,
	  test/test_contraction.cpp, test/test_pagerank.cpp:
	  
	  Contraction-based hierarchical community finding working for
	  small inputs on
	  Linux. Updated test_pagerank pragma to use successful XMT
	  strategy (loop
	  merging).

2008-07-02  Greg Mackey <gemacke@sandia.gov>

	* mtgl/al_graph.h, mtgl/al_graph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/transpose_adapter.hpp,
	  test/al_graph.cpp, test/test_subgraph_alGraph.cpp:
	  
	  Lots of changes to update the subgraph_adapter and
	  transpose_adapter.
	  - Added add_edges() and add_vertices() to al_graph to allow
	  parallel adding
	  of edges and vertices.
	  - Parallelized portions of the subgraph and transpose adapters
	  where
	  possible.
	  - Replaced usage of stl set and map classes with xmt_hash_set and
	  xmt_hash_table. This plus the parallel modifications should allow
	  these
	  classes to work well on the mta.
	  - The transpose adapter will now accept a subgraph adapter as its
	  templated adapter type.
	  - Improved how add_edges() and add_vertices() of the subgraph
	  adapter
	  worked. add_vertices() now adds only vertices. add_edges(),
	  however,
	  adds the edges passed to it and any vertices attached to those
	  edges.
	  Both functions now add edges and vertices only if they don't
	  exist
	  already in the subgraph. This allows multiple calls to either
	  function
	  to be made safely.
	  - Improved several other functions in the subgraph adapter.

2008-07-01  kddevin

	* mtgl/read_matrixmarket.hpp:
	  
	  Updated to remove fscanf calls; use fread instead.

2008-06-30  William McLendon <wcmclen@sandia.gov>

	* mtgl/recursive_dcsc.hpp:
	  
	  add recursive DCSC code.

2008-06-27  Jon Berry <jberry@sandia.gov>

	* mtgl/snl_community2.hpp, mtgl/ufl.h, test/test_contraction.cpp:
	  
	  Iterated, edge-based community detection working on small example
	  on Linux.

	* mtgl/contraction_adapter.hpp, mtgl/ufl.h, test/VolVolume.cpp,
	  test/test_contraction.cpp:
	  
	  Fixed bugs in ufl (uncapacitated facility location).

2008-06-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/alGraph.h, mtgl/alGraph_adapter.hpp, mtgl/al_graph.h,
	  mtgl/al_graph_adapter.hpp, test/alGraph.cpp, test/al_graph.cpp,
	  test/test_subgraph_alGraph.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Update naming convention of alGraph to al_graph.

	* mtgl/alGraph.h, mtgl/alGraph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/topsort_visitor.h, mtgl/transpose_adapter.hpp,
	  test/alGraph.cpp, test/test_subgraph_alGraph.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Mutliple changes.
	  - Added an initial version of a transpose adapter. Brad is
	  working on
	  one, too. Eventually, they will merge to one,, but I need this
	  here
	  for the new topost algorithms to work.
	  - Updated the topsort algorithms.
	  - Refactored subgraph_adapter, alGraph, and alGraph_adapter.

2008-06-27  Jon Berry <jberry@sandia.gov>

	* mtgl/contraction_adapter.hpp, mtgl/snl_community2.hpp,
	  mtgl/util.h, mtgl/xmt_hash_table.hpp, test/test_contraction.cpp:
	  
	  Contraction works on small input on Linux.

	* mtgl/contraction_adapter.hpp, mtgl/graph_adapter.hpp,
	  mtgl/hash_table.h, mtgl/mtgl_adapter.hpp:
	  
	  Cygwin compilation of contraction adapter. hash_table.h has to
	  go. It's
	  deprecated in favor of xmt_hash_table.

2008-06-26  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp, mtgl/contraction_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/hash_table.h,
	  mtgl/snl_community.hpp, test/VolVolume.cpp, test/mtgl_test.h,
	  test/test_community2.cpp, test/test_contraction.cpp,
	  test/test_encount.cpp:
	  
	  Contraction test doesn't compile anymore; trying to fix. Almost
	  ready for
	  iterated hierarchical community detection.

	* mtgl/ufl.h:
	  
	  Separating by degree is not the way to go. Improvements will
	  follow PageRank's
	  example once XMT compiler issue is fixed.

	* mtgl/read_dimacs_graph.hpp:
	  
	  include guard

	* mtgl/snl_community2.hpp, test/test_community2.cpp:
	  
	  Edge-based community detection. LP solve works on the Karate
	  club.

2008-06-25  Jon Berry <jberry@sandia.gov>

	* test/test_encount.cpp:
	  
	  Edge one-neighborhood approximation working on the Karate club.

2008-06-24  Jon Berry <jberry@sandia.gov>

	* mtgl/mtgl_boost_graph.hpp, mtgl/util.h, test/test_encount.cpp:
	  
	  Getting ready for edge-based facility location.

2008-06-23  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, mtgl/triangles.hpp, mtgl/util.h,
	  test/test_encount.cpp:
	  
	  Fixed a bug in independent set that was affecting triangle
	  computations, test_encount now works for some manually-checked
	  inputs up to 30 vertices.

2008-06-21  Jon Berry <jberry@sandia.gov>

	* mtgl/read_dimacs_graph.hpp, mtgl/visit_adj.hpp,
	  mtgl/xmt_hash_table.hpp, test/Makefile.am,
	  test/test_dimacs_format.cpp, test/test_pagerank.cpp,
	  test/test_static_graph3.cpp:
	  
	  Linux compilation

	* test/test_encount.cpp:
	  
	  Approximating edge one-neighborhoods (draft).

2008-06-19  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  Added an operator[] to the adj_vertex_iterator for MTA compiler
	  experiments.

2008-06-19  William McLendon <wcmclen@sandia.gov>

	* mtgl/strongly_connected_components.hpp, test/mtgl_test.h,
	  test/test_bidirectional_graph.cpp,
	  test/test_strongly_connected_components.cpp:
	  
	  Copied scalable recursive DCSC heuristic into trunk from my
	  sandbox and added it to the scc_test application. It currently
	  relies on the bidirectional_graph_adapter because the search
	  requires
	  the ability to search a vertex's neighbors through in-edges.
	  
	  It also contains its own BFS search class because the visit_edges
	  method in the bidirectional_graph_adapter itself wasn't getting
	  called correctly and the existing bfs doesn't support sub-problem
	  filtering. The interface to this functionality is identical to
	  psearch, so presumably we can just replace this custom function
	  with the true mtgl one sometime later when it can do the right
	  thing for this application.

2008-06-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/alGraph_adapter.hpp:
	  
	  Added get_vertex() and get_edge() to vertex and edge iterators,
	  respectively,
	  to conform with latest requirements.

2008-06-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/components_visitor.h, mtgl/gen_rmat_graph.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  Fixed xmt_hash_table_adapter to work with the new xmt_hash_table
	  class and
	  fixed one issue with new xmt_hash_table class in
	  components_visitor. Added an
	  endline to printed output in gen_rmat_graph to improve
	  formatting.

2008-06-16  William McLendon <wcmclen@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  added inline to non-method functions in this header file
	  to prevent multiple-definition link errors when building
	  Titan applications that use MTGL.

2008-06-14  Greg Mackey <gemacke@sandia.gov>

	* mtgl/xmt_hash_set.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Adding xmt_hash_set class. Updated comments to include
	  information about
	  using the visit functions.

2008-06-13  Jon Berry <jberry@sandia.gov>

	* mtgl/xmt_hash_table.hpp:
	  
	  Got rid of redundant and unsafe "has_key_at" and "value_at." Use
	  visit().

	* mtgl/topsort.hpp, mtgl/topsort_visitor.h:
	  
	  Updated to conform to assumptions of graph_adapter.

	* mtgl/gen_rmat_graph.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Fixes to ensure global removal of duplicates.

2008-06-12  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/xmt_hash_table.hpp:
	  
	  Greg Mackey's hash table class and a modification to
	  gen_rmat_graph to use it.

2008-06-11  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/read_dimacs_graph.hpp,
	  test/mtgl_test.h:
	  
	  Fixed a bug in a specialized class in
	  breadth_first_search_mtgl.hpp for the
	  bidirectional_graph_adapter.hpp class. This only pertained to the
	  REVERSED direction internal_breadth_first_search class. Included
	  a new -debug graph, but left the default -debug graph active.
	  Also fixed a warning message in read_dimacs_graph_adapter.hpp
	  using g++ version 4.3.0.

2008-06-10  Vitus Leung <vjleung@sandia.gov>

	* mtgl/pseudo_diameter.hpp:
	  
	  Cleaned up pseudo_diameter a little.

2008-06-10  Brad Mancke

	* mtgl/spanning_tree.hpp, test/test_spanning_tree.cpp:
	  
	  Removed initial classes that were part of the disjoint parallel
	  paths algorithm for the max flow, but are not needed now.

2008-06-10  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_pseudo_diameter.cpp:
	  
	  Cleaned up test_find_pseudo_diameter a little.

	* mtgl/pseudo_diameter.hpp, test/test_find_pseudo_diameter.cpp:
	  
	  Reorganized find_pseudo_diameter a little.

2008-06-09  Vitus Leung <vjleung@sandia.gov>

	* mtgl/pseudo_diameter.hpp, test/Makefile.am,
	  test/test_find_pseudo_diameter.cpp:
	  
	  Adding pseudo diameter.

	* mtgl/metrics.hpp, test/test_find_cluster_coefficient.cpp:
	  
	  Reorganized cluster coefficient.

2008-06-06  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp:
	  
	  Moved specialized classes for the internal_breadth_first_search
	  of type bidirectional_graph_adapter from
	  bidirectional_graph_adapter.hpp to breadth_first_search_mtgl.hpp.
	  Now the build should work.

2008-06-05  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/test_find_degree_degree_correlation.h:
	  
	  Reorganized degree degree correlation.

2008-06-05  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp, test/test_pagerank.cpp:
	  
	  Fixed PageRank to scale beyond 20 processors on the MTA-2. The
	  new function
	  compute_acc(bidirectional_graph_adapter,rinfo) does it. This may
	  have
	  far-reaching implications for the MTGL and potential
	  compatibility with
	  BGL/PBGL.

2008-06-05  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, mtgl/psearch.hpp,
	  test/test_find_degree_distribution.h:
	  
	  Reorganized degree distribution, and commented out line in
	  psearch_hi_low that
	  accesses out of range memory.

2008-06-04  Greg Mackey <gemacke@sandia.gov>

	* mtgl/alGraph_adapter.hpp, mtgl/random.h, mtgl/util.h,
	  test/mtgl_test.h:
	  
	  Added ablility to use alGraphs with the tests. I had to add the
	  standard
	  init() function to alGraph_adapter for this to work. It
	  initializes all
	  the vertex types to 0. Also, fixed random.h to compile correctly
	  on macs.

2008-06-04  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/Makefile.am, test/mtgl_test.h,
	  test/test_find_assortativity.h:
	  
	  Reorganized assortativity.

2008-06-02  Jon Berry <jberry@sandia.gov>

	* mtgl/stats.h:
	  
	  Basic stats - multithreaded.

2008-06-02  William McLendon <wcmclen@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  wrapped a #ifdef (not disabled in committed version) around the
	  code
	  reliant on stats.h, as it's not in the repository :(.
	  
	  Added get_vertex() to the bidirectional_vertex_iterator to
	  resolve
	  compile issues.

2008-05-29  Greg Mackey <gemacke@sandia.gov>

	* mtgl/random.h:
	  
	  Update random.h to work with current mtgl code.

2008-05-28  William McLendon <wcmclen@sandia.gov>

	* test/mtgl_test.h:
	  
	  added scc4 option

2008-05-27  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  added methods to access the rmat graph generator parameters:
	  a0,b0,c0,d0
	  defaults are still:
	  a0 = .57
	  b0 = .19
	  c0 = .19
	  d0 = .05
	  
	  but now they can be modified via accessors:
	  
	  set_a0(double), set_b0(double), set_c0(double), and
	  set_d0(double).
	  
	  there are also matching get_* methods added as well.
	  
	  These accessors are used by the Titan wrapper into this function
	  to allow users to modify the construction parameters of the RMAT
	  graphs.

2008-05-22  William McLendon <wcmclen@sandia.gov>

	* mtgl/SMVkernel.h:
	  
	  changing some assert parallels to assert nodeps

	* mtgl/SMVkernel.h:
	  
	  

	* test/test_connection_subgraphs.cpp:
	  
	  

	* test/test_connection_subgraphs.cpp:
	  
	  

	* test/mtgl_test.h:
	  
	  

	* mtgl/connection_subgraphs.hpp, mtgl/dynamic_array.h:
	  
	  CSG performance improvement. Scaling still tough, but preliminary
	  results
	  show nearly 30% reduction in execution time.

2008-05-21  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  Added a set_graph_pointer interactor for gen_rmat_graph so we can
	  pass a vtkMutable*Graph wrapped by vtkMTGLGraphAdapter into the
	  generator so the proper init() gets called, etc.
	  
	  Should not interfere with any existing functionality in
	  gen_rmat_graph,
	  if the set function isn't called, it works as before.

2008-05-21  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, mtgl/mmio.hpp, mtgl/mtgl_adapter.hpp,
	  test/.gdbrc, test/test_community.cpp,
	  test/test_find_triangles.cpp:
	  
	  visit_edges_filtered changes

2008-05-20  William McLendon <wcmclen@sandia.gov>

	* mtgl/SMVkernel.h, mtgl/connection_subgraphs.hpp:
	  
	  

	* mtgl/connection_subgraphs.hpp:
	  
	  improving MTA performance.

2008-05-20  Jon Berry <jberry@sandia.gov>

	* mtgl/visit_adj.hpp, test/test_pagerank.cpp:
	  
	  Beginning to test new visit_adj.

	* mtgl/visit_adj.hpp:
	  
	  Convincing the compiler to find linear recurrences. The new
	  visit_adj
	  parallelizes. No scaling tests yet.

	* mtgl/visit_adj.hpp, test/test_pagerank.cpp:
	  
	  Load-balanced adjacency list traversal.

2008-05-19  William McLendon <wcmclen@sandia.gov>

	* mtgl/connection_subgraphs.hpp, mtgl/sssp_deltastepping.hpp:
	  
	  

	* test/test_connection_subgraphs.cpp:
	  
	  modified result output

	* test/test_connection_subgraphs.cpp:
	  
	  

	* test/test_connection_subgraphs.cpp:
	  
	  

	* test/test_connection_subgraphs.cpp:
	  
	  added sp+ distance parameter and penaltymultiplier (alpha)
	  to the parameter list of the connection_subgraphs routine.

	* test/Makefile.am, test/test_connection_subgraphs.cpp:
	  
	  updated connection subgraphs test to work.

2008-05-16  Greg Mackey <gemacke@sandia.gov>

	* mtgl/util.h:
	  
	  Added const to () operator in default_eqfcn to fix compiling with
	  updated
	  hash data structures.

2008-05-14  William McLendon <wcmclen@sandia.gov>

	* test/Makefile.am, test/test_strongly_connected_components.cpp:
	  
	  updated strongly-connected component testing app to work
	  correctly.

2008-05-14  Jon Berry <jberry@sandia.gov>

	* mtgl/visit_adj.hpp:
	  
	  Bug fix to clear valgrind.

	* mtgl/visit_adj.hpp, test/test_community.cpp:
	  
	  The "visit_jon" and "gen_jon*" functions comprise a draft
	  adjacency list
	  load balancer that distributes adjacency lists among threads,
	  given a
	  chunk size for a thread. This works on Linux for small data thus
	  far.

2008-05-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/snl_community.hpp:
	  
	  

	* mtgl/mmio.hpp:
	  
	  fixed mm_strdup to be inline to not cause multiple definition
	  errors in callers.

2008-05-10  Jon Berry <jberry@sandia.gov>

	* test/Makefile.am, test/test_community.cpp,
	  test/test_sssp_deltastepping.cpp:
	  
	  The recent PageRank work involved leveraging the edge array in
	  graph.cpp -- updating Makefile.am.

2008-05-09  Jon Berry <jberry@sandia.gov>

	* mtgl/mmio.hpp, mtgl/visit_adj.hpp, test/test_community.cpp,
	  test/test_pagerank.cpp:
	  
	  This contains the version of PageRank used for the May 8
	  presentation
	  results. The function compute_acc_over_edges gives higher
	  performance
	  than the current adjacency list traversals, though it suffers hot
	  spotting
	  after 20 processors.
	  
	  The visit_adj.hpp file contains a candidate for resolving the
	  issue of
	  iterating over adjacency lists of vastly different sizes. Its
	  function
	  "visit_jon(...)" contains Cindy Phillips' version of Petr
	  Konecny's suggestion
	  to stride and run each stride in serial. We count the total
	  number of
	  iterations over everybody's adjacency lists, then chunk into
	  threads to
	  achieve near-perfect load balancing. This hasn't been debugged
	  even on Linux
	  yet (from a recent port to MTGL from C). However, if it works, it
	  will
	  make all of the candidate "*load_balance*" code in the adapters
	  obsolete.
	  
	  I didn't think that test_community had been changed, so its
	  inclusion in
	  this commit is a mystery.

2008-05-06  Jon Berry <jberry@sandia.gov>

	* test/test_pagerank.cpp:
	  
	  More canal-inspired fixes. This runs on the MTA now.

	* mtgl/visit_adj.hpp:
	  
	  Bug in visit_adj_high_low

	* test/test_pagerank.cpp:
	  
	  Made Karen's correctness fixes MTA-friendly. This passes canal
	  now, but
	  segfaults on graph 18 on the MTA. There's a known potential
	  segfault if there
	  are no zero out-degree vertices, but I don't think that's it.

2008-05-05  tshead

	* mtgl/st_connectivity.hpp:
	  
	  Eliminate unused-variable warnings.

2008-05-05  kddevin

	* test/test_pagerank.cpp:
	  
	  Fixed dampening in pagerank to greatly improve convergence.
	  Added adjustment for zero out-degree vertices.
	  Results now match Trilinos pagerank in terms of both solution
	  AND iteration count.
	  
	  Tested on my mac; #pragmas may be wrong for MTGL.

2008-05-03  Jon Berry <jberry@sandia.gov>

	* mtgl/independent_set.hpp, mtgl/metrics.hpp,
	  mtgl/snl_community.hpp, mtgl/triangles.hpp,
	  mtgl/xmt_hash_table.hpp, test/.gdbrc, test/mtgl_test.h:
	  
	  Major performance bug fix to the triangle-finding algorithm that
	  supports
	  community finding. The new cleanup phase means that we make
	  progress in
	  chunks -- (n - #indset-verts) edges at a minimum are cleaned at
	  each phase.
	  For this to be effective we need to choose
	  maximal_independent_set, not
	  independent_set.
	  
	  This has been tested on Linux, but not the MTA/XMT.

2008-05-01  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/triangles.hpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp,
	  test/test_static_graph3.cpp:
	  
	  Fixes to basic tutorials to deal with copy-constructing bug, and
	  to obtain
	  better compiler inlining.

	* mtgl/alGraph_adapter.hpp, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/contraction_adapter.hpp, mtgl/graph.h,
	  mtgl/graph_adapter.hpp, mtgl/psearch.hpp,
	  mtgl/static_graph_adapter.hpp, test/Makefile.am, test/graph.cpp,
	  test/test_connected_components.cpp, test/test_contraction.cpp,
	  test/test_pagerank_bidir.cpp:
	  
	  Many changes are merged here. The connected components algorithm
	  now
	  uses the correct version of Shiloach-Vishkin instead of the
	  deprecated
	  version used prior to this commit. Unfortunately, when these
	  changes are
	  merged with the recent changes to rmat generation, and perhaps
	  others,
	  Kahan's algorithm is no longer working. Still, it should be
	  close, since
	  the components_visitor.h and connected_components.hpp files are
	  the ones
	  I used successfully to prepare for the CIS external review and
	  MTAAP. It
	  remains to track down the differences.

2008-04-25  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp, test/mtgl_test.h,
	  test/test_dpmf.cpp:
	  
	  Cleaned up disjoint paths max flow code. Added extra parameters
	  to print out results.

2008-04-22  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp:
	  
	  Changed the behavior of finding paths to be more of doing a set
	  of serial depth first searches in parallel. Also, made a few
	  other minor changes.

2008-04-17  Brad Mancke

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph_adapter.hpp, mtgl/print_dimacs_to_file.hpp,
	  mtgl/read_dimacs_graph.hpp, test/mtgl_test.h, test/test_dpmf.cpp:
	  
	  Added functionality to read and write DIMACS format files for the
	  max flow problem. For comparison of our max flow methods, we are
	  comparing to Andrew Goldbergs code and as input he takes a DIMACS
	  formatted file. I modified read_dimacs_graph to read in a max
	  flow problem. Created print_dimacs_to_file to do just that.
	  Reimplemented --graph_type rmat --filename * in mtgl_test.h to
	  read in a dimacs file. Also added a --save_graph * parameter to
	  print out the graph to the specified file name. Since capacities
	  are not part of the base graph_adapter, class kti keeps track of
	  the capacities. Also, since the graph_adapter init methods are
	  parallelized, the order of the arcs and the weights get lost. In
	  the bidirectional_graph_adapter I have implemented another data
	  structure that keeps track of the original order and in
	  mtgl_test, after creating the graph_adapter, I reorder the
	  weights to the correct order. Look at test_dpmf.cpp to see how to
	  pass in the capacities.

2008-04-15  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/dynamic_array.h,
	  mtgl/gen_rmat_graph.hpp:
	  
	  Optimized the code more for the max flow. In gen_rmat_graph.hpp,
	  I added a print statement to print out n. In dynamic array, I
	  made the array a public variable to access it to sort it, will
	  fix in the future.

2008-04-10  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, test/mtgl_test.h,
	  test/test_dpmf.cpp:
	  
	  Fixed a few bugs in disjoint_paths_max_flow.hpp and
	  bidirectional_graph_adatper.hpp when iterating through with a
	  bidirectional graph adapter and in_incident_edges. It wasn't
	  looking at the right edge and you had to call
	  get_cross_cross_index to get the right edge. In
	  disjoint_paths_max_flow.hpp I made a few tweaks to the pragmas to
	  get it working well on large graphs. I also am using the dynamic
	  array now to keep track of paths. In breadth_first_search, I also
	  made a few changes to pragmas, as well as adding an updated
	  breadth_first_search_mtgl_high_low class, but the original
	  breadth_first_search_mtgl is running much faster after making a
	  few changes to the pragmas. The major pragma change is in run(),
	  when iterating over a section in the queue, we used to see how
	  big the section was and depending on that size, we would
	  parallize or not. Now we are parallelizing no matter what with a
	  #pragma mta dynamic schedule put in. This seems to run much
	  faster.

2008-04-10  Vitus Leung <vjleung@sandia.gov>

	* mtgl/st_connectivity.hpp:
	  
	  Changed instantiation of inequality to get around compiler error.

2008-04-08  kddevin

	* test/test_pagerank.cpp:
	  
	  Minor commit; testing svn for Steve.

2008-04-07  Brad Mancke

	* mtgl/disjoint_paths_max_flow.hpp, test/mtgl_test.h,
	  test/test_dpmf.cpp:
	  
	  Added a new debug graph in mtgl_test.h, but it's commented out
	  and the default debug graph is active. Fixed a bug on checking to
	  see if the graph is optimal. Also fixed a bug that would select
	  inactive edges into the possible list to choose from to build a
	  shortest path.

2008-04-06  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/components_visitor.h,
	  mtgl/connected_components.hpp, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, mtgl/xmt_hash_table.hpp,
	  mtgl/xmt_hash_table_adapter.hpp:
	  
	  * Adding xmt-friendly hash table that eats within the same DRAM
	  buffer line
	  (thanks to Petr Konecny for this idea) - works on linux, untested
	  on
	  XMT
	  
	  * Improved implementation of Kahan's connected components
	  algorithm to
	  use the new hash table in Phase I, then put an adapter over the
	  result
	  and leverage our connected_components_sv algorithms rather than
	  the
	  deprecated version of Shiloach-Vishkin that used the deprecated
	  m_closure
	  code. This new version works on Linux but hasn't been tested yet
	  on
	  the MTA/XMT.
	  
	  * Changing the graph adapters to leverage recent improvements in
	  compiler inlining.

	* mtgl/mtgl_adapter.hpp:
	  
	  This file contains a major bug fix/performance improvement
	  (depending on
	  the previous code).
	  
	  In many places in the code, we do things like this:
	  
	  e_iter_t begin_it, end_it;
	  tie(begin_it, end_it) = incident_edges(v,g);
	  #pragma mta assert parallel
	  for (int i=0; i<deg; i++) {
	  eit.set_position(i);
	  edge_t e = *eit;
	  }
	  
	  This is actually incorrect, though it took a big instance to
	  point this out.
	  
	  We need to force a copy:
	  
	  e_iter_t begin_it, end_it;
	  tie(begin_it, end_it) = incident_edges(v,g);
	  #pragma mta assert parallel
	  for (int i=0; i<deg; i++) {
	  e_iter_t my_eit = eit;
	  edge_t e = eit.get_edge();
	  }
	  
	  I submitted this as bugzilla Bug 3864.
	  
	  The last line uses get_edge rather than operator* since the
	  compiler will
	  inline the former, but not the latter (at least according to
	  c++ -trace:INLINE_STATUS.
	  
	  In other code (in the previous visit_edges, for example, I seem
	  to have
	  realized before that explicit copying was necessary, but
	  implemented the
	  inefficient solution of calling incident_edges within parallel
	  loops. That
	  is fixed in this version.
	  
	  
	  M mtgl_adapter.hpp

	* mtgl/mtgl_boost_graph.hpp:
	  
	  Here's an important compiler artifact: the copy constructor of
	  "pair," which
	  has accounted for significant portions of mtgl runtime on the
	  MTA/XMT, was
	  not being inlined on thoese platforms (it is inlined on linux).
	  The answer
	  seems to be that this is due to the fact that it's a member
	  function
	  template ( <class U, class V>, when the class template arguments
	  are
	  (<class T1, class T2>). I added a non-member-function-template
	  version
	  of the copy constructor, and the MTA compiler does inline that!

2008-04-04  kddevin

	* test/test_pagerank.cpp:
	  
	  Added code to normalize page ranks to a distribution vector (for
	  comparison
	  with other codes).

	* mtgl/read_matrixmarket.hpp:
	  
	  Fixed matrix-market reader to create directed graphs.

2008-04-04  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Don't need to specify an initial size for the results dynamic
	  array.

2008-04-03  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/disjoint_paths_max_flow.hpp, mtgl/gen_rmat_graph.hpp,
	  test/test_dpmf.cpp:
	  
	  Coded a working max flow problem with disjoint paths. Seems to
	  run well. Added different internal breadth first search template
	  specializations to bidirectional_graph_adapter.hpp. Took out a
	  warning in gen_rmat_graph.hpp. Will test out on the MTA when it's
	  back up.

2008-04-01  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/test_find_degree_distribution.h:
	  
	  Added gnuplot file output to find_degree_distribution.

2008-04-01  Brad Mancke

	* mtgl/gen_rmat_graph.hpp, mtgl/util.h:
	  
	  Got the linear recurrence to work in the bucket sort, making the
	  generator more efficient.

2008-03-31  Brad Mancke

	* mtgl/gen_rmat_graph.hpp, mtgl/util.h, test/test_rmat.cpp:
	  
	  Changed the way to remove duplicates from the rmat graph. Quicker
	  than before, but still think can get better performance.

2008-03-27  Greg Mackey <gemacke@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Added check for case where no match to the target graph is found
	  and now exit
	  gracefully.

2008-03-26  Brad Mancke

	* mtgl/gen_rmat_graph.hpp, mtgl/util.h, test/test_rmat.cpp:
	  
	  RMAT generator that doesn't create duplicate edges working on
	  MTA. Slower by about a 1/3.

2008-03-26  Greg Mackey <gemacke@sandia.gov>

	* mtgl/random_walk.hpp:
	  
	  Ummm, moving a memory leak around wihout actually deleting the
	  memory
	  doesn't get rid of the leak. This time I actually deleted the
	  memory
	  after I used it.

2008-03-25  Greg Mackey <gemacke@sandia.gov>

	* mtgl/psearch.hpp, mtgl/random_walk.hpp,
	  mtgl/random_walk_visitor.h, mtgl/subgraph_isomorphism.hpp:
	  
	  Fixed a couple of memory leaks.

2008-03-25  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/util.h, test/test_rmat.cpp:
	  
	  Have no duplicate edges being generated by rmat for directed
	  graphs. I did a quick test for undirected graphs and it doens't
	  seem to be working, at least for the bidirectional_graph_adapter.
	  Created a test script, test_rmat.cpp that just calls the print
	  method. Added a bucket_sort_key method in util.h that calls a
	  key() method in class T that returns an int that is a unique key.
	  Added an includes for the bidirectional_graph_adapter.hpp for the
	  breadth_first_search_mtgl.hpp.

2008-03-22  Jon Berry <jberry@sandia.gov>

	* test/test_bidirectional_graph.cpp:
	  
	  Changes to allow experiments on large graphs -- needed to choose
	  static or
	  bidir, not both. The adapters need destructors..

2008-03-21  Greg Mackey <gemacke@sandia.gov>

	* mtgl/alGraph_adapter.hpp, mtgl/random_walk.hpp,
	  mtgl/random_walk_visitor.h, mtgl/subgraph_isomorphism.hpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  Several things:
	  - Changed data type for edge and vertex types in random walk code
	  to
	  short.
	  - Removed numTypes as a parameter to the subgraph_isomorphism
	  class as
	  it wasn't used.
	  - Fixed a bug in an operator = in alGraph_adapter.
	  - Added a header guard to random_walk.hpp.

	* mtgl/random_walk.hpp, mtgl/random_walk_visitor.h,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  The target generator and random walk generator are now working
	  again.

2008-03-20  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/spanning_tree.hpp,
	  test/test_spanning_tree.cpp:
	  
	  Network simplex for maxflow is running on the MTA. Right now I'm
	  trying to make it run faster.

	* mtgl/spanning_tree.hpp:
	  
	  Added some more fields to output to a visualization.

	* mtgl/spanning_tree.hpp:
	  
	  Added some better print statements.

2008-03-20  Jon Berry <jberry@sandia.gov>

	* mtgl/graph_adapter.hpp, mtgl/util.h:
	  
	  Windows fixes.

2008-03-19  Brad Mancke

	* mtgl/breadth_first_search_mtgl.hpp, mtgl/spanning_tree.hpp,
	  test/mtgl_test.h, test/test_spanning_tree.cpp:
	  
	  Have network simplex for max flow working on linux. Needs alot
	  more testing.

2008-03-19  cljanss

	* configure.ac:
	  
	  Changed the mta test back to the original (reverts r1602 to r1601
	  for that test). There may be issues on MTA and/or XMT still.

2008-03-18  Brad Mancke

	* mtgl/spanning_tree.hpp:
	  
	  added functionality to find blocking arcs.

2008-03-18  Jon Berry <jberry@sandia.gov>

	* configure.ac, mtgl/static_graph_adapter.hpp, mtgl/visit_adj.hpp:
	  
	  Configure.ac won't work on both the MTA and the XMT! The macro
	  AC_TRY_LINK
	  wants yes/no answers (based on link results) that differ between
	  platforms.
	  I have it set to work on the MTA and break on the XMT (on the
	  latter, switch
	  the "yes" and "no" clauses.

	* test/test_pagerank.cpp:
	  
	  noop

	* mtgl/components_visitor.h, mtgl/gen_rmat_graph.hpp:
	  
	  R-MAT generates in littler chunks on Linux.

2008-03-17  Brad Mancke

	* mtgl/spanning_tree.hpp, mtgl/util.h:
	  
	  Added functionality to find violating arcs for the max flow
	  problem. Also added a binary search function in util.h.

2008-03-17  Greg Mackey <gemacke@sandia.gov>

	* mtgl/alGraph.h, mtgl/alGraph_adapter.hpp,
	  mtgl/subgraph_adapter.hpp, mtgl/subgraph_isomorphism.hpp,
	  test/alGraph.cpp, test/test_subgraph_alGraph.cpp,
	  test/test_subgraph_isomorphism.cpp:
	  
	  First commit of my alGraph class and the updated subgraph
	  isomorphism code to
	  the main trunk.

2008-03-17  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_degree_degree_correlation.h,
	  test/test_find_degree_distribution.h:
	  
	  Improved output for degree distribution and degree degree
	  correlation.

2008-03-17  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  Using std::min and std::max.

2008-03-14  Vitus Leung <vjleung@sandia.gov>

	* test/mtgl_test.h:
	  
	  Restored debug.

2008-03-14  Brad Mancke

	* mtgl/breadth_first_search_mtgl.hpp, mtgl/spanning_tree.hpp,
	  test/test_spanning_tree.cpp:
	  
	  Added functionality to fill out L and U for the network simplex
	  algorithm for max flow.

2008-03-14  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_degree_degree_correlation.h:
	  
	  Updated degree degree distribution.

	* test/test_find_degree_distribution.h:
	  
	  Updated find degree distribution.

	* mtgl/metrics.hpp, test/mtgl_test.h,
	  test/test_find_cluster_coefficient.cpp:
	  
	  Updated cluster coefficient.

	* mtgl/metrics.hpp, test/test_find_cluster_coefficient.cpp:
	  
	  Added find_cluster_coefficient().

	* test/mtgl_test.cpp:
	  
	  Added cluster coefficient to process_args().

2008-03-14  Brad Mancke

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/spanning_tree.hpp, mtgl/visit_adj.hpp,
	  test/test_spanning_tree.cpp:
	  
	  Added more functionality to the spanning tree. Now we keep track
	  of the parent edges. Wrote routines to do a undirected bfs for a
	  bidirectional graph. Changed some parallel cutoffs to 5000.

2008-03-13  William McLendon <wcmclen@sandia.gov>

	* mtgl/rand_fill.hpp:
	  
	  fix for mta

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  missed a spurious fflush(stdout) :/

2008-03-12  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  added note where the DIMACS-C code creates the edge-weights
	  during graph construction. If we want DIMACS-C checksums to be
	  equal
	  to MTGL checksums, this would be where it should happen, but that
	  means
	  modifying the graph data structures to contain a weight val
	  directly(?)
	  Also, can we guarantee that the ordering would sync correctly?

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  fixed an issue with using incident_edge_iterators and
	  set_position()
	  which caused a crash when using a non-static graph. Not sure what
	  the
	  root cause was or how to possibly trap it, but it appears that
	  for
	  dynamic graphs, using the following construct is bad:
	  
	  EITER_T start,end;
	  tie(start,end) = get_edges(v,g);
	  for(i=0; i<degree(v,g); i++) {
	  start->set_position(i);
	  int t = get(vid_map, target(*start, g));
	  // ^^^^^^^^ will die ^^^^^^^^
	  }
	  
	  instead, doing this seems to work:
	  
	  for(i=0; i<degree(v,g); i++) {
	  EITER_T start = begin_incident_edges(v, g);
	  start.set_position(i);
	  int t = get(vid_map, target(*start, g));
	  }
	  
	  ** of course, in parallel we'll die if we call degree() in the
	  loop header ;)
	  
	  So, anyway the deltastepping is currently working on linux for
	  both static and dynamic graphs.

	* mtgl/gen_rmat_graph.hpp:
	  
	  Set up #define parameters around the Hamilton cycle stuff; so we
	  can
	  experiment with this easily. Currently it is set to ON.

	* mtgl/rand_fill.hpp:
	  
	  Changed random_value to an unsigned value instead of a signed
	  long int,
	  we use unsigned for mta, why would we use signed for non-mta?
	  These
	  should be synchronized.

	* test/mtgl_test.h:
	  
	  changed edgeFactor to 8 for RMAT graphs.

	* mtgl/mtgl_adapter.hpp, mtgl/sssp_deltastepping.hpp:
	  
	  iterator fixes in deltastepping and including util.h into
	  mtgl_adapter since mt_incr requires it.

2008-03-11  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp, mtgl/sssp_deltastepping.hpp:
	  
	  removed INFO/CRITICAL/, etc statements since it seems they're
	  causing problems in windows :(

2008-03-11  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  Getting rid of hamilton cycle again. This should be made an
	  option. It's
	  needed for the sssp tests, yet we need it gone for some other
	  tests.

	* test/mtgl_test.h:
	  
	  Commented out the call to rmat_stats.

	* mtgl/mtgl_adapter.hpp, mtgl/util.h, test/mtgl_test.h,
	  test/test_bidirectional_graph.cpp:
	  
	  Linux compilation

	* mtgl/util.h:
	  
	  separate_by*degree routines

2008-03-08  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  Fix of serious bug in varyParams that was denying the graph any
	  vertices
	  of high in-degree. And the factor of 13 was added back - I had
	  misunderstood
	  its purpose.
	  
	  Now we are generating R-MAT graphs with statistics that agree
	  with the
	  paper.

2008-03-07  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  Removed the Hamiltonian cycle that was being built into the R-MAT
	  graphs
	  we were generating. Added an rmat_stats method as a sanity check.

2008-03-07  Brad Mancke

	* mtgl/gen_rmat_graph.hpp, test/test_pagerank.cpp:
	  
	  Working test_pagerank*.cpp on the MTA. The
	  test_pagerank_bidir.cpp is outperforming the other version.

	* test/test_pagerank_bidir.cpp:
	  
	  Fixed some bugs in test_pagerank_bidir.cpp. Should be running
	  with directed graphs. I think I found a bug with non-directed
	  bidirectional_graph_adapters, but didn't track it down yet. Will
	  try the pagerank on the MTA now.

2008-03-07  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp:
	  
	  New method rmat_stats() shows that something is wrong in
	  generation.
	  The proportions of edges in quadrants a,b,c, and d don't match
	  the requests.
	  
	  I also removed the extra factor of 13 random numbers that are
	  generated in
	  each phase. I didn't understand why this was being done, and we
	  still clear
	  valgrind after the removal.

2008-03-07  Brad Mancke

	* test/test_pagerank_bidir.cpp:
	  
	  Copied test_pagerank.cpp and adapted it for the
	  bidirectional_graph_adapter.hpp. Not sure if it's fully changed
	  over, but it's a start. Compared to test_pagerank.cpp, it's
	  slower.

2008-03-06  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  Fixes to help the MTA compiler identify linear recurrences.

2008-03-06  Brad Mancke

	* mtgl/static_graph_adapter.hpp, test/mtgl_test.h,
	  test/test_bidirectional_graph.cpp:
	  
	  Added more to test_bidirectional_graph_adapter.cpp to test static
	  vs bidirectional graphs, added a --threshold %d to the command
	  line to set the cutoffs for high low, took out a print statement
	  in static_graph_adapter.hpp

	* test/mtgl_test.h, test/test_bidirectional_graph.cpp:
	  
	  #include "mtgl_test.h"
	  #include <mtgl/util.h>
	  #include <mtgl/metrics.hpp>
	  #include <mtgl/SMVkernel.h>
	  #include <mtgl/graph_adapter.hpp>
	  #include <mtgl/static_graph_adapter.hpp>
	  #include <mtgl/bidirectional_graph_adapter.hpp>
	  
	  using namespace mtgl;
	  
	  const int threshold = 100;
	  
	  template <typename graph_adapter>
	  void run_algorithm(kernel_test_info& kti, graph_adapter*& ga);
	  
	  template <typename graph_adapter>
	  void run_without_high_low(graph_adapter*& bga);
	  
	  template <typename graph_adapter>
	  void run_with_high_low(graph_adapter*& bga);
	  
	  template <typename graph_adapter>
	  void get_high_low(graph_adapter& ga, int& n_hd, int& n_ld, int*&
	  hd, int*& ld, const int degreeThreshold);
	  
	  
	  template <>
	  void run_without_high_low<bidirectional_graph_adapter>
	  (bidirectional_graph_adapter*& bga) {
	  bidirectional_graph_adapter& ga = *bga;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_descriptor
	  vertex_descriptor;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_iterator
	  vertex_iterator;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::incident_edge_iterator
	  incident_edge_iterator;
	  int n = ga.get_order();
	  int m = ga.get_size();
	  double *acc = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<m; i++) {
	  acc[i] = 0;
	  }
	  
	  vertex_id_map<bidirectional_graph_adapter> vipm =
	  get(_vertex_id_map, ga);
	  edge_id_map<bidirectional_graph_adapter> eipm =
	  get(_edge_id_map,ga);
	  vertex_type_map<bidirectional_graph_adapter> vtpm =
	  get(_vertex_type_map,ga);
	  
	  #pragma mta assert parallel
	  #pragma mta loop future
	  for (int i=0; i<n; i++) {
	  vertex_descriptor v = ga.get_vertex(i);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  int ind = ga.get_cross_index(eid);
	  double incr = vid*0.2;
	  double& atrg = acc[ind];
	  atrg += incr;
	  }
	  }
	  double *accum = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<m; i++) {
	  accum[i] = 0;
	  }
	  #pragma mta assert parallel
	  #pragma mta loop future
	  for (int i=0; i<n; i++) {
	  vertex_descriptor v = ga.get_vertex(i);
	  double tmp_accum = 0.0;
	  int vid = get(vipm,v);
	  int deg = in_degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = in_incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  tmp_accum += acc[eid];
	  }
	  accum[vid] = tmp_accum;
	  }
	  
	  
	  if (ga.get_order() < 50) {
	  for (int i=0; i<ga.get_order(); i++) {
	  printf("accum[%d]: %lf\n", i, accum[i]);
	  }
	  }
	  }
	  
	  template <typename graph_adapter>
	  void run_without_high_low(graph_adapter*& bga) {
	  graph_adapter& ga = *bga;
	  typedef typename graph_traits<graph_adapter>::vertex_descriptor
	  vertex_descriptor;
	  typedef typename graph_traits<graph_adapter>::vertex_iterator
	  vertex_iterator;
	  typedef typename
	  graph_traits<graph_adapter>::incident_edge_iterator
	  incident_edge_iterator;
	  int n = ga.get_order();
	  int m = ga.get_size();
	  
	  double *accum = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<n; i++) {
	  accum[i] = 0;
	  }
	  
	  vertex_id_map<graph_adapter> vipm = get(_vertex_id_map, ga);
	  edge_id_map<graph_adapter> eipm = get(_edge_id_map,ga);
	  vertex_type_map<graph_adapter> vtpm = get(_vertex_type_map,ga);
	  
	  #pragma mta assert parallel
	  #pragma mta loop future
	  for (int i=0; i<n; i++) {
	  vertex_descriptor v = ga.get_vertex(i);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  double incr = vid*0.2;
	  double& atrg = accum[tid];
	  atrg += incr;
	  }
	  }
	  
	  if (ga.get_order() < 50) {
	  for (int i=0; i<ga.get_order(); i++) {
	  printf("accum[%d]: %lf\n", i, accum[i]);
	  }
	  }
	  }
	  
	  template <typename graph_adapter>
	  void get_high_low(graph_adapter& ga, int& n_hd, int& n_ld, int*&
	  hd, int*& ld, const int degreeThreshold) {
	  typedef typename graph_traits<graph_adapter>::vertex_descriptor
	  vertex_t;
	  typedef typename graph_traits<graph_adapter>::vertex_iterator
	  vertex_iter_t;
	  
	  
	  int ord = ga.get_order();
	  vertex_id_map<graph_adapter> vid_map = get(_vertex_id_map, ga);
	  vertex_iter_t viter, viter_end;
	  tie(viter,viter_end) = vertices(ga);
	  
	  
	  n_hd = 0;
	  n_ld = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  //if (ga.get_degree(id) > degreeThreshold) {
	  if (degree(v,ga) > degreeThreshold) {
	  n_hd++;
	  } else {
	  n_ld++;
	  }
	  }
	  
	  printf("n_hd: %d, n_ld: %d, sum: %d, order: %d\n", n_hd, n_ld,
	  (n_hd + n_ld), ord);
	  
	  if (n_hd > 0) {
	  hd = new int[n_hd];
	  }
	  
	  if (n_ld > 0) {
	  ld = new int[n_ld];
	  }
	  
	  int hd_iter = 0, ld_iter = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  // if (ga.get_degree(id) > degreeThreshold) {
	  if (degree(v,ga) > degreeThreshold) {
	  hd[int_fetch_add(&hd_iter, 1)] = id;
	  } else {
	  ld[int_fetch_add(&ld_iter, 1)] = id;
	  }
	  }
	  
	  printf("hd_iter: %d(%d), ld_iter: %d(%d), sum: %d, order: %d\n",
	  hd_iter, n_hd, ld_iter, n_ld, (hd_iter + ld_iter), ord);
	  }
	  
	  
	  template <>
	  void
	  get_high_low<bidirectional_graph_adapter>(bidirectional_graph_adapter&
	  ga, int& n_hd, int& n_ld, int*& hd, int*& ld, const int
	  degreeThreshold) {
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_descriptor
	  vertex_t;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_iterator
	  vertex_iter_t;
	  
	  
	  int ord = ga.get_order();
	  vertex_id_map<bidirectional_graph_adapter> vid_map =
	  get(_vertex_id_map, ga);
	  vertex_iter_t viter, viter_end;
	  tie(viter,viter_end) = vertices(ga);
	  
	  
	  n_hd = 0;
	  n_ld = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  if (ga.get_degree(id) > degreeThreshold) {
	  n_hd++;
	  } else {
	  n_ld++;
	  }
	  }
	  
	  printf("n_hd: %d, n_ld: %d, sum: %d, order: %d\n", n_hd, n_ld,
	  (n_hd + n_ld), ord);
	  
	  if (n_hd > 0) {
	  hd = new int[n_hd];
	  }
	  
	  if (n_ld > 0) {
	  ld = new int[n_ld];
	  }
	  
	  int hd_iter = 0, ld_iter = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  if (ga.get_degree(id) > degreeThreshold) {
	  hd[int_fetch_add(&hd_iter, 1)] = id;
	  } else {
	  ld[int_fetch_add(&ld_iter, 1)] = id;
	  }
	  }
	  
	  printf("hd_iter: %d(%d), ld_iter: %d(%d), sum: %d, order: %d\n",
	  hd_iter, n_hd, ld_iter, n_ld, (hd_iter + ld_iter), ord);
	  }
	  
	  
	  
	  void get_in_high_low(bidirectional_graph_adapter& ga, int& n_hd,
	  int& n_ld, int*& hd, int*& ld, const int degreeThreshold) {
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_descriptor
	  vertex_t;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_iterator
	  vertex_iter_t;
	  
	  int ord = ga.get_order();
	  vertex_id_map<bidirectional_graph_adapter> vid_map =
	  get(_vertex_id_map, ga);
	  vertex_iter_t viter, viter_end;
	  tie(viter,viter_end) = vertices(ga);
	  
	  
	  n_hd = 0;
	  n_ld = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  if (ga.get_in_degree(id) > degreeThreshold) {
	  n_hd++;
	  } else {
	  n_ld++;
	  }
	  }
	  
	  printf("in_n_hd: %d, in_n_ld: %d, sum: %d, order: %d\n", n_hd,
	  n_ld, (n_hd + n_ld), ord);
	  
	  if (n_hd > 0) {
	  hd = new int[n_hd];
	  }
	  
	  if (n_ld > 0) {
	  ld = new int[n_ld];
	  }
	  
	  int hd_iter = 0, ld_iter = 0;
	  #pragma mta assert parallel
	  for (int i=0; i<ord; i++) {
	  vertex_t v = ga.get_vertex(i);
	  int id = get(vid_map, v);
	  
	  if (ga.get_in_degree(id) > degreeThreshold) {
	  hd[int_fetch_add(&hd_iter, 1)] = id;
	  } else {
	  ld[int_fetch_add(&ld_iter, 1)] = id;
	  }
	  }
	  
	  printf("in_hd_iter: %d(%d), in_ld_iter: %d(%d), sum: %d, order:
	  %d\n", hd_iter, n_hd, ld_iter, n_ld, (hd_iter + ld_iter), ord);
	  
	  }
	  
	  
	  template <>
	  void run_with_high_low<bidirectional_graph_adapter>
	  (bidirectional_graph_adapter*& bga) {
	  bidirectional_graph_adapter& ga = *bga;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_descriptor
	  vertex_descriptor;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::vertex_iterator
	  vertex_iterator;
	  typedef
	  graph_traits<bidirectional_graph_adapter>::incident_edge_iterator
	  incident_edge_iterator;
	  int n = ga.get_order();
	  int m = ga.get_size();
	  
	  // int threshold = 100;
	  
	  double *acc = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<m; i++) {
	  acc[i] = 0;
	  }
	  
	  vertex_id_map<bidirectional_graph_adapter> vipm =
	  get(_vertex_id_map, ga);
	  edge_id_map<bidirectional_graph_adapter> eipm =
	  get(_edge_id_map,ga);
	  vertex_type_map<bidirectional_graph_adapter> vtpm =
	  get(_vertex_type_map,ga);
	  
	  
	  int n_hd = 0, n_ld = 0;
	  int in_n_hd = 0, in_n_ld = 0;
	  int *hd = NULL, *ld = NULL;
	  int *in_hd = NULL, *in_ld = NULL;
	  
	  get_high_low<bidirectional_graph_adapter>(ga, n_hd, n_ld, hd, ld,
	  threshold);
	  get_in_high_low(ga, in_n_hd, in_n_ld, in_hd, in_ld, threshold);
	  
	  for (int i = 0; i < n_hd; i++) {
	  vertex_descriptor v = ga.get_vertex(hd[i]);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  int ind = ga.get_cross_index(eid);
	  double incr = vid*0.2;
	  double& atrg = acc[ind];
	  atrg += incr;
	  }
	  }
	  
	  #pragma mta assert parallel
	  for (int i = 0; i < n_ld; i++) {
	  vertex_descriptor v = ga.get_vertex(ld[i]);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  int ind = ga.get_cross_index(eid);
	  double incr = vid*0.2;
	  double& atrg = acc[ind];
	  atrg += incr;
	  }
	  }
	  
	  double *accum = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<m; i++) {
	  accum[i] = 0;
	  }
	  
	  printf("spot 3\n");
	  for (int i=0; i<in_n_hd; i++) {
	  vertex_descriptor v = ga.get_vertex(in_hd[i]);
	  double tmp_accum = 0.0;
	  int vid = get(vipm,v);
	  int deg = in_degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = in_incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  tmp_accum += acc[eid];
	  }
	  accum[vid] = tmp_accum;
	  }
	  
	  #pragma mta assert parallel
	  for (int i=0; i<in_n_ld; i++) {
	  vertex_descriptor v = ga.get_vertex(in_ld[i]);
	  double tmp_accum = 0.0;
	  int vid = get(vipm,v);
	  int deg = in_degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = in_incident_edges(v,ga);
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  tmp_accum += acc[eid];
	  }
	  accum[vid] = tmp_accum;
	  }
	  
	  if (ga.get_order() < 50) {
	  for (int i=0; i<ga.get_order(); i++) {
	  printf("accum[%d]: %lf\n", i, accum[i]);
	  }
	  }
	  }
	  
	  template <typename graph_adapter>
	  void run_with_high_low(graph_adapter*& bga) {
	  graph_adapter& ga = *bga;
	  typedef typename graph_traits<graph_adapter>::vertex_descriptor
	  vertex_descriptor;
	  typedef typename graph_traits<graph_adapter>::vertex_iterator
	  vertex_iterator;
	  typedef typename
	  graph_traits<graph_adapter>::incident_edge_iterator
	  incident_edge_iterator;
	  int n = ga.get_order();
	  int m = ga.get_size();
	  
	  int n_hd = 0, n_ld = 0;
	  int *hd = NULL, *ld = NULL;
	  
	  get_high_low<graph_adapter>(ga, n_hd, n_ld, hd, ld, threshold);
	  
	  double *accum = new double[m];
	  #pragma mta assert nodep
	  for (int i=0; i<n; i++) {
	  accum[i] = 0;
	  }
	  
	  vertex_id_map<graph_adapter> vipm = get(_vertex_id_map, ga);
	  edge_id_map<graph_adapter> eipm = get(_edge_id_map,ga);
	  vertex_type_map<graph_adapter> vtpm = get(_vertex_type_map,ga);
	  
	  
	  
	  for (int i = 0; i < n_hd; i++) {
	  vertex_descriptor v = ga.get_vertex(hd[i]);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  #pragma mta assert parallel
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  double incr = vid*0.2;
	  double& atrg = accum[tid];
	  atrg += incr;
	  }
	  }
	  
	  #pragma mta assert parallel
	  for (int i = 0; i < n_ld; i++) {
	  vertex_descriptor v = ga.get_vertex(ld[i]);
	  int vid = get(vipm,v);
	  int deg = degree(v,ga);
	  incident_edge_iterator inc_edgs, end_inc_edgs;
	  tie(inc_edgs,end_inc_edgs) = incident_edges(v,ga);
	  for (int j=0; j<deg; j++) {
	  inc_edgs.set_position(j);
	  int eid = get(eipm, *inc_edgs);
	  vertex_descriptor src = source(*inc_edgs,ga);
	  vertex_descriptor trg = target(*inc_edgs,ga);
	  int sid = get(vipm,src);
	  int tid = get(vipm,trg);
	  double incr = vid*0.2;
	  double& atrg = accum[tid];
	  atrg += incr;
	  }
	  }
	  
	  if (ga.get_order() < 50) {
	  for (int i=0; i<ga.get_order(); i++) {
	  printf("accum[%d]: %lf\n", i, accum[i]);
	  }
	  }
	  }
	  
	  
	  template <typename graph_adapter>
	  void run_algorithm/*<bidirectional_graph_adapter>*/
	  (kernel_test_info& kti, graph_adapter*& bga)
	  {
	  
	  bga = kti.gen_graph<graph_adapter>();
	  
	  
	  mt_timer timer;
	  int issues, memrefs, concur, streams, traps;
	  init_mta_counters(timer, issues, memrefs, concur, streams);
	  
	  printf("starting accumulation\n");
	  run_without_high_low<graph_adapter>(bga);
	  
	  sample_mta_counters(timer, issues, memrefs, concur, streams);
	  print_mta_counters(timer, bga->get_size(), issues,memrefs,concur,
	  streams);
	  
	  init_mta_counters(timer, issues, memrefs, concur, streams);
	  
	  printf("starting high low accumulation\n");
	  run_with_high_low<graph_adapter>(bga);
	  
	  sample_mta_counters(timer, issues, memrefs, concur, streams);
	  print_mta_counters(timer, bga->get_size(), issues,memrefs,concur,
	  streams);
	  
	  
	  }
	  /*
	  template <typename graph_adapter>
	  void run_algorithm(kernel_test_info& kti, graph_adapter*& ga)
	  {
	  typedef typename graph_traits<graph_adapter>::vertex_descriptor
	  vertex_t;
	  typedef typename graph_traits<graph_adapter>::edge_type edge_t;
	  
	  ga = kti.gen_graph<graph_adapter>();
	  int order = ga->get_order();
	  int size = ga->get_size();
	  
	  printf("Order: %d, Size: %d\n", order, size);
	  print(*ga);
	  }*/
	  
	  int main(int argc, char *argv[])
	  {
	  //mta_suspend_event_logging();
	  if (argc < 3) {
	  fprintf(stderr,"usage: %s [-debug] "
	  " [-assort] <types> "
	  " --graph_type <mmap|dimacs|cray> "
	  " --level <levels> --graph <Cray graph number> "
	  " --filename <mmap|dimacs graph filename> "
	  " [<0..15>]\n"
	  , argv[0]);
	  exit(1);
	  }
	  
	  kernel_test_info kti;
	  kti.process_args(argc, argv);
	  if (kti.graph_struct == DYN) {
	  graph_adapter *ga;
	  run_algorithm<graph_adapter>(kti,ga);
	  } else if (kti.graph_struct == STATIC) {
	  static_graph_adapter *sga;
	  run_algorithm<static_graph_adapter>(kti,sga);
	  } else if (kti.graph_struct == BIDIR) {
	  bidirectional_graph_adapter *bga;
	  run_algorithm<bidirectional_graph_adapter>(kti,bga);
	  if (bga->get_order() < 50) {
	  printf("transpose:\n");
	  print_transpose(*bga);
	  }
	  } else {
	  printf("Either you didn't enter a --graph_struct or the one you
	  entered was illegal\n");
	  }
	  return 0;
	  }

2008-03-06  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/csr_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/static_graph_adapter.hpp:
	  
	  Bug fixes to static graph adapter's edge id/source finding
	  iterator code

2008-03-05  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_cluster_coefficient.cpp:
	  
	  Updating test_find_cluster_coefficient

	* test/Makefile.am, test/mtgl_test.h,
	  test/test_find_cluster_coefficient.cpp:
	  
	  Adding test_find_cluster_coefficient.cpp

	* mtgl/metrics.hpp, test/test_find_degree_degree_correlation.h:
	  
	  Updated degree degree correlation.

2008-03-05  Jon Berry <jberry@sandia.gov>

	* test/test_bidirectional_graph.cpp, test/test_pagerank.cpp:
	  
	  MTA annotations. Doesn't scale yet.

	* test/mtgl_test.h, test/test_bidirectional_graph.cpp:
	  
	  valgrind issues -- fixed.

	* mtgl/bidirectional_graph_adapter.hpp:
	  
	  fixes to ....in_...adj iterators.

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp:
	  
	  Misc fixes, including addition of in_degree

	* test/test_bidirectional_graph.cpp:
	  
	  This test works on Linux. Separate out and in accumulation.

2008-03-05  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/test_find_degree_distribution.h:
	  
	  Updated find_degree_distribution.

2008-03-05  Brad Mancke

	* mtgl/bidirectional_graph_adapter.hpp,
	  test/test_spanning_tree.cpp:
	  
	  In bidirectional_graph_adapter.hpp, fixed bug with iterator and
	  the cross_index

2008-03-05  Jon Berry <jberry@sandia.gov>

	* mtgl/bidirectional_graph_adapter.hpp, mtgl/mtgl_adapter.hpp,
	  test/mtgl_test.h, test/test_bidirectional_graph.cpp:
	  
	  Changes to the bidirectional_graph_adapter to support iteration
	  through both
	  in_adjacencies and out_adjacencies. This is primarily an
	  experiment in
	  efficient data representation for MTA computations.
	  
	  It doesn't work yet. Example:
	  
	  [jberry@snuffles test]$ ./a.out --graph_type rmat --graph_struct
	  bidir --graph 3 --direction directed
	  graph is directed
	  16
	  Order: 8, Size: 16
	  0 : { {0}(0, 1) {1}(0, 0) {2}(0, 2) {3}(0, 1) }
	  1 : { {4}(1, 2) }
	  2 : { {5}(2, 4) {6}(2, 3) }
	  3 : { {7}(3, 4) }
	  4 : { {8}(4, 3) {9}(4, 0) {10}(4, 0) {11}(4, 5) }
	  5 : { {12}(5, 6) }
	  6 : { {13}(6, 1) {14}(6, 7) }
	  7 : { {15}(7, 0) }
	  transpose:
	  0 : { {0}(0, 0) {1}(0, 4) {2}(0, 4) {3}(0, 7) }
	  1 : { {4}(1, 0) }
	  2 : { {5}(2, 6) {6}(2, 0) }
	  3 : { {7}(3, 0) }
	  4 : { {8}(4, 1) {9}(4, 4) {10}(4, 2) {11}(4, 2) }
	  5 : { {12}(5, 3) }
	  6 : { {13}(6, 4) {14}(6, 5) }
	  7 : { {15}(7, 6) }
	  [jberry@snuffles test]$

2008-03-05  Brad Mancke

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, test/mtgl_test.h:
	  
	  Implemented the init method for the bidirectional graph adapter.
	  I also fixed mtgl_test.h to allow for directed graphs (have to
	  use --direction directed on the command line). To see the output
	  of the init method, at the beginning of the function change bool
	  debug to true (I would also suggest using the -debug option on
	  the command line). The new pointers for the graph are rev_index,
	  rev_end_points, rev_src_points and cross_index. The rev_* are the
	  same as the *, but from the point of incoming edges. The
	  cross_index is to look up that edge from end_points to
	  rev_end_points.

2008-03-04  Vitus Leung <vjleung@sandia.gov>

	* test/Makefile.am:
	  
	  Fixed Makefile.am

	* mtgl/metrics.hpp:
	  
	  Combined two loops in find_degree_distribution, and reorganized
	  loops in
	  find_degree_degree_correlation.

2008-03-04  Brad Mancke

	* mtgl/bidirectional_graph.h, mtgl/bidirectional_graph_adapter.hpp,
	  mtgl/spanning_tree.hpp, mtgl/util.h, test/Makefile.am,
	  test/mtgl_test.cpp, test/mtgl_test.h,
	  test/test_bidirectional_graph.cpp, test/test_spanning_tree.cpp:
	  
	  Started making the bidirectional graph adapter, starting to work
	  on the init in the bidirectional graph adapter

2008-03-04  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_degree_degree_correlation.h:
	  
	  Corrected output for test_find_degree_degree_correlation.

	* test/Makefile.am, test/test_find_triangles.cpp:
	  
	  Added tri_test to Makefile.am

	* mtgl/metrics.hpp:
	  
	  Added pragma before inner loop in find_degree_degree_correlation.

	* mtgl/metrics.hpp:
	  
	  Corrected head and tail in find_degree_degree_correlation.

	* mtgl/metrics.hpp, test/Makefile.am, test/mtgl_test.h,
	  test/test_find_degree_degree_correlation.cpp,
	  test/test_find_degree_degree_correlation.h:
	  
	  Added degree degree correlation.

2008-03-04  Brad Mancke

	* mtgl/spanning_tree.hpp, test/mtgl_test.h,
	  test/test_spanning_tree.cpp:
	  
	  Forgot to add the new files for the spanning tree. Also, changed
	  the -debug graph to it's default state

	* mtgl/breadth_first_search_mtgl.hpp, test/mtgl_test.h:
	  
	  Started creating a spanning tree class for the network simplex

2008-03-03  Vitus Leung <vjleung@sandia.gov>

	* mtgl/metrics.hpp, test/Makefile.am, test/mtgl_test.h,
	  test/test_find_degree_distribution.cpp,
	  test/test_find_degree_distribution.h:
	  
	  Added degree distribution.

2008-03-03  tshead

	* mtgl/mmio.hpp:
	  
	  COMP: Several of the matrix market IO routines were not declared
	  inline, causing link problems for callers.

2008-03-03  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp:
	  
	  removed sys/time.h include for compatibility on winders.

	* mtgl/sssp_deltastepping.hpp:
	  
	  removed reliance on sys/time.h in favour of calling mt_timer in
	  util.h
	  for time measurements.

2008-03-03  Jon Berry <jberry@sandia.gov>

	* configure.ac, test/Makefile.am:
	  
	  Linux compilation. AC_TRY_LINK seems to behave differently on the
	  mta vs.
	  linux. I've checked in the version that breaks the MTA but works
	  on Linux.
	  The issue seems to be what "success" means (and hence how to
	  interpret
	  the order of alternatives).

	* mtgl/util.h, test/test_pagerank.cpp:
	  
	  Pagerank running on the MTA again.

	* configure.ac, mtgl/mmio.hpp, mtgl/mtgl_adapter.hpp,
	  test/static_graph.c, test/test_dimacs_format.cpp:
	  
	  MTA configure, build, and test. The mmio library had a .cpp file
	  in the
	  mtgl/mtgl directory, so I replaced that with a .hpp file. The
	  mmio.h and
	  mmio.cpp remain, but should be svn deleted after verifying that
	  mmio.hpp is
	  satisfactory.

	* configure.ac:
	  
	  Kyle's improved mta test.

	* mtgl/mtgl_adapter.hpp, mtgl/util.h, test/Makefile.am,
	  test/test_bfs.cpp, test/test_pagerank.cpp:
	  
	  Closer to qthread-friendly version.

2008-03-02  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  calloc issue

2008-02-29  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  Fixes to recent changes to mt_timer that broke windows builds.

2008-02-29  Brad Mancke

	* mtgl/static_graph_adapter.hpp, test/test_community.cpp:
	  
	  Added the static graph struct to test_community.cpp, so snl
	  community can now take static graphs

2008-02-29  Jon Berry <jberry@sandia.gov>

	* mtgl/dynamic_array.h, mtgl/util.h:
	  
	  Qthread modifications to mtgl internals.

	* mtgl/gen_rmat_graph.hpp, mtgl/ufl.h, mtgl/util.h:
	  
	  Fix for nightly test build issue (include of <vector> is
	  disrupted by a
	  previous include of sys/times.h (?).
	  
	  Also, we're starting to merge in mtgl/qthread integration to run
	  on multi-core
	  workstations. The gen_rmat_graph of this version achieves speedup
	  on 4 cores.

	* mtgl/VolVolume.h, mtgl/gen_rmat_graph.hpp,
	  mtgl/snl_community.hpp, mtgl/triangles.hpp, mtgl/ufl.h,
	  test/VolVolume.cpp, test/mtgl_test.h, test/test_community.cpp:
	  
	  Experimenting with parcutoff in ufl.h, some changes to pragmas in
	  the VOL_dvector class. Also, triangles now uses independent_set
	  rather than maximal_independent_set.

2008-02-28  Jon Berry <jberry@sandia.gov>

	* test/Makefile.am, test/mtgl.study.xml, test/mtgl_diff_test:
	  
	  Adding study file stuff.

	* test/test_community.cpp:
	  
	  Turn off masks by default

	* mtgl/ufl.h:
	  
	  Bug fix to separate by degree: when working with sets of specific
	  indices rather than the whole vertex array, aux arrays of the
	  wrong
	  sizes were being allocated.

	* mtgl/ufl.h:
	  
	  Fixed inconsistency in logic to select 25th greatest degree.

2008-02-28  Brad Mancke

	* mtgl/SMVkernel.h, mtgl/csr_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/snl_community.hpp, mtgl/ufl.h,
	  test/test_community.cpp:
	  
	  Added parallelization scheme for the 25th highest degree vertices
	  to ufl.h to test test_community.cpp, but the gain expected did
	  not show up

2008-02-26  kddevin

	* mtgl/files, mtgl/read_matrixmarket.hpp, test/Makefile.am,
	  test/test_dimacs_format.cpp, test/test_pagerank.cpp:
	  
	  Adding matrix-market reads to test_pagerank.cpp.
	  They don't work yet, so don't try them!
	  But test_pagerank.cpp continues to work as before with r-mat
	  graphs.

2008-02-26  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/mtgl_search_edgetime.hpp, mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  Fix for bug where buckets were being assigned the value stored by
	  Gn,
	  or the G.order(), into a bucket and it was getting sent into the
	  visitor
	  which casued crashes due to segfaulting looking for a vid=n, when
	  the
	  vertices are actually numbered from 0 to n-1.
	  
	  So far, checking Tython on relatively small graphs, it looks like
	  this
	  has fixed the result.

2008-02-26  Jon Berry <jberry@sandia.gov>

	* config/CVS, config/compile, config/config.guess,
	  config/config.sub, config/depcomp, config/install-sh,
	  config/missing:
	  
	  shouldn't have been in svn

2008-02-26  kddevin

	* mtgl/mtgl_adapter.hpp:
	  
	  Added matrix-market banner write.

	* configure.ac, mtgl/files, mtgl/mmio.cpp, mtgl/mmio.h,
	  mtgl/mtgl_adapter.hpp, test/Makefile.am,
	  test/test_dimacs_format.cpp:
	  
	  Added write_matrixmarket function to mtgl_adaptive.hpp.
	  Tested it with call in test_dimacs_format.cpp.

2008-02-25  William McLendon <wcmclen@sandia.gov>

	* mtgl/visit_adj.hpp:
	  
	  added a #ifdef ASSERT test on visit_adj vertex id range to check
	  for
	  out-of-bounds errors. Only active if -DASSERT is provided to the
	  compiler.

	* test/test_sssp_deltastepping.cpp:
	  
	  commented some STATIC_GRAPH specific stuff out

2008-02-25  Jon Berry <jberry@sandia.gov>

	* mtgl/static_graph_adapter.hpp, test/static_graph.c:
	  
	  MAC compilation.

	* mtgl/mtgl_adapter.hpp, mtgl/read_dimacs_graph.hpp,
	  test/Makefile.am, test/test_dimacs_format.cpp:
	  
	  DIMACS format example

	* test/sensors.txt:
	  
	  irrelevant file

	* test/Makefile.am:
	  
	  Linux compilation.

2008-02-23  Jon Berry <jberry@sandia.gov>

	* README, configure.ac, mtgl/static_graph_adapter.hpp,
	  test/Makefile.am, test/sensors.txt:
	  
	  Updates to the autoconf'ing process. It now works with the simple
	  tests
	  on the MTA. The mta-pe 6.0.0 still experiences internal compiler
	  errors
	  when building the more advanced examples separately, then linking
	  them.
	  This latter group (community finding, sssp) still needs to be
	  compiled on
	  one command line.

2008-02-22  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/static_graph_adapter.hpp,
	  test/Makefile.am, test/mtgl_test.h, test/test_community.cpp,
	  test/test_static_graph1.cpp, test/test_static_graph2.cpp:
	  
	  Changes to the Makefile.am -- include only those tests that are
	  working now,
	  include others later. test_static_graph2.cpp compares edge
	  iteration in
	  static and dynamic graphs.

	* mtgl/components_visitor.h:
	  
	  The constructor for sv_copy_filter shows a possible compiler bug.
	  The
	  rank(r) initialization item in the initialization list doesn't
	  bind for
	  some reason. Either printing r in the constructor body, or
	  explicitly
	  saying rank =r in the body "fixes" it.

	* mtgl/gen_rmat_graph.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/rand_fill.hpp, mtgl/snl_community.hpp, test/graph.cpp,
	  test/mtgl_test.h, test/sensors.txt, test/test_csr_graph.cpp:
	  
	  Issues with graph generation: random numbers and
	  directed/undirectedness.
	  
	  The default behavior was directed; now it's undirected. Also,
	  there
	  was confusion on 64bit workstations since lrand48() returns a
	  long, but
	  only in the range 0..INT_MAX. The rmat generator now matches
	  Kamesh's
	  C rmat generator.

2008-02-21  Jon Berry <jberry@sandia.gov>

	* mtgl/connected_components.hpp:
	  
	  printf removal

	* mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/psearch.hpp:
	  
	  High_low finds the 25th largest degree.

	* test/test_static_graph1.cpp, test/test_static_graph3.cpp:
	  
	  static_graph is now in mtgl/mtgl. This conflicts with the
	  tutorial, but
	  static_graph is starting to be used. We should have a separate
	  tutorial
	  directory.

2008-02-20  Vitus Leung <vjleung@sandia.gov>

	* test/test_find_assortativity.cpp, test/test_find_assortativity.h,
	  test/test_find_modularity.cpp:
	  
	  updated to new process_args and type_mixing_matrix

2008-02-13  William McLendon <wcmclen@sandia.gov>

	* test/test_connection_subgraphs.cpp:
	  
	  updated kti.process_args() to reflect new methodology

2008-02-12  William McLendon <wcmclen@sandia.gov>

	* test/mtgl_test.h:
	  
	  

2008-02-11  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  DS

2008-02-08  keander

	* test/test_badrank.cpp:
	  
	  pub algorithm for badrank

	* test/test_badrank.cpp:
	  
	  first cut of badrank.. needs help with producing directed graph
	  that looks more realistic

2008-02-08  Jon Berry <jberry@sandia.gov>

	* mtgl/metrics.hpp:
	  
	  Initialization bug

2008-02-08  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp, test/test_sssp_deltastepping.cpp:
	  
	  

2008-02-08  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h, test/static_graph.c, test/test_pagerank.cpp:
	  
	  Printing top 20 ranks

	* test/test_pagerank.cpp:
	  
	  test degree distribution first

	* mtgl/metrics.hpp:
	  
	  degree distributions

	* test/test_pagerank.cpp:
	  
	  Manual loop through the adjacencies instead of visit_adj. This
	  version scales.

2008-02-08  William McLendon <wcmclen@sandia.gov>

	* test/test_sssp_deltastepping.cpp:
	  
	  replaced int_fetch_add() with mt_incr()

	* test/test_sssp_deltastepping.cpp:
	  
	  Testing mode for the edge-timestamp search -- sorting edgelists
	  to ensure
	  consistency between runs.

	* mtgl/mtgl_search_edgetime.hpp:
	  
	  Fixed a couple of loop issues that were causing major slow downs.
	  FFR: don't put g->get_order() inside the test of a for-loop :p

2008-02-07  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  Print timing results even on Linux.

	* mtgl/util.h:
	  
	  fix to counting sort.

2008-02-07  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp, mtgl/visit_adj.hpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/mtgl_adapter.hpp, mtgl/mtgl_search_edgetime.hpp:
	  
	  

2008-02-07  Jon Berry <jberry@sandia.gov>

	* test/test_pagerank.cpp:
	  
	  MTA version works - sort of. ~50% utilization due to hotspotting
	  in
	  updates of acc. Also, canal didn't give us a dollar sign in that
	  update
	  so I'm not sure that it's thread safe.

	* test/test_pagerank.cpp:
	  
	  Working version

2008-02-07  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/mtgl_adapter.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/static_graph_adapter.hpp:
	  
	  

2008-02-06  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp, test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/mtgl_adapter.hpp, mtgl/sssp_deltastepping.hpp,
	  mtgl/visit_adj.hpp:
	  
	  

	* mtgl/gen_rmat_graph.hpp, mtgl/static_graph_adapter.hpp:
	  
	  

2008-02-06  Jon Berry <jberry@sandia.gov>

	* mtgl/util.h:
	  
	  Counters

	* test/test_pagerank.cpp:
	  
	  One pass through the edges

	* mtgl/graph.h, mtgl/graph_adapter.hpp, mtgl/mtgl_adapter.hpp:
	  
	  Making graph_adapter amenable to subgraph_adapter.

	* test/test_dyn_graph.cpp:
	  
	  Test of subgraph_adapter over mtgl/graph_adapter.

2008-02-06  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp, test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/gen_rmat_graph.hpp, mtgl/rand_fill.hpp:
	  
	  

2008-02-05  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/rand_fill.hpp:
	  
	  

	* mtgl/rand_fill.hpp, mtgl/sssp_deltastepping.hpp,
	  test/test_sssp_deltastepping.cpp:
	  
	  changed __short32 to unsigned __short32 for random_value typedef.

2008-02-05  Jon Berry <jberry@sandia.gov>

	* mtgl/subgraph_isomorphism.hpp:
	  
	  Some comments

2008-02-05  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp, mtgl/static_graph_adapter.hpp,
	  test/test_sssp_deltastepping.cpp:
	  
	  

2008-02-04  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

2008-01-31  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/mtgl_search_edgetime.hpp, mtgl/sssp_deltastepping.hpp,
	  test/test_sssp_deltastepping.cpp:
	  
	  

2008-01-30  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  tracking traps... :/

	* mtgl/sssp_deltastepping.hpp:
	  
	  added some section-timers to try and help narrow
	  down where the inefficiency is coming from.

2008-01-29  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  adding a check for negative values in the edge-weight
	  generator.

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/SMVkernel.h, mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/mtgl_search_edgetime.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  

2008-01-28  William McLendon <wcmclen@sandia.gov>

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  fixed a malformed pragma.

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* test/mtgl_test.h, test/test_sssp_deltastepping.cpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  modification to allow disabling the option MTGL_USE_VISITADJ.
	  -- There were a couple differences between the adapter in my
	  sandbox and the adapter in the Trunk.

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  removed the USE_HACK sections -- they relied going directly to
	  the static_graph data representation and are not appropriate in
	  the MTGL sense as they won't work without a static graph.

	* mtgl/sssp_deltastepping.hpp:
	  
	  re-tabbed the deltastepping code to be more consistent with the
	  rest of MTGL,
	  using tabwidth=8 now rather than 4.

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp, mtgl/visit_adj.hpp:
	  
	  fixed visit_adj to work with single-vertex visit_adj() again.
	  
	  previous change removed the default parameter for *sp and msp
	  from NULL, and 0
	  respectively. This caused an error in the single-vertex
	  visit_adj() method
	  which does not care about subproblems. Returning the default
	  parameters fixed
	  this bug.

2008-01-28  Jon Berry <jberry@sandia.gov>

	* mtgl/visit_adj.hpp:
	  
	  visit_adj_high_low

	* test/test_static_graph3.cpp:
	  
	  Examples for 1/29/08 tutorial

2008-01-27  Jon Berry <jberry@sandia.gov>

	* test/test_static_graph2.cpp:
	  
	  Experiments

2008-01-25  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp:
	  
	  

	* test/test_sssp_deltastepping.cpp:
	  
	  

2008-01-25  Jon Berry <jberry@sandia.gov>

	* mtgl/VolVolume.h, mtgl/ufl.h, test/VolVolume.cpp, test/ufl.cpp:
	  
	  CPL header messages.

	* test/test_bfs.cpp:
	  
	  Test of newer breadth_first_search_mtgl.

2008-01-24  William McLendon <wcmclen@sandia.gov>

	* mtgl/snl_community.hpp, mtgl/triangles.hpp:
	  
	  Each file had stand-alone functions which caused
	  multiple-definition
	  errors at link time in NetView.
	  
	  In triangles.hpp, the function trip_cmp() was the culprit.
	  Solution: commented out -- I cannot find a use of this function
	  in the
	  mtgl codes. There was a use inside the test_triangles program
	  but that section is commented out currently.
	  
	  In snl_community.hpp, the function m_e_numerator() is the
	  culprit.
	  Solution: Moved this function into class m_e_vis as that is the
	  only
	  place from which this function is called. I put it in the
	  class as a protected member function and commented out the
	  original function and added a suitable message w/rt why this
	  was done.
	  
	  These two modifications have led to a successful compilation of
	  NetView on my
	  linux installation (RHEL4).

2008-01-23  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp, test/test_sssp_deltastepping.cpp:
	  
	  Added documentation comments to edgetime search.
	  Modified search, no longer returns vertices and
	  parent-vertex. We now return the vertex timestamps
	  and the edge-id of the incident edge from which that
	  timestamp was determined.

2008-01-23  Jon Berry <jberry@sandia.gov>

	* mtgl/graph_adapter.hpp:
	  
	  Seems like this fix has been made a half dozen times, but
	  evidently it
	  was only in sandboxes.

2008-01-22  William McLendon <wcmclen@sandia.gov>

	* test/mtgl_test.h, test/test_sssp_deltastepping.cpp:
	  
	  added support for --trials and --srcs options on the command
	  line.
	  
	  edge-time based search is working, haven't tested on MTA, will do
	  when it comes back up.

	* mtgl/gen_rmat_graph.hpp, mtgl/mtgl_search_edgetime.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/static_graph_adapter.hpp,
	  test/test_sssp_deltastepping.cpp:
	  
	  

2008-01-21  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_search_edgetime.hpp, mtgl/static_graph_adapter.hpp,
	  test/mtgl_test.h, test/test_sssp_deltastepping.cpp:
	  
	  adding edge-timestamp (simple search) to repo.

	* test/test_sssp_deltastepping.cpp:
	  
	  added edge weight generator function to create random edge
	  weights in
	  the range [0, 1).

	* mtgl/static_graph.h, mtgl/static_graph_adapter.hpp:
	  
	  modified static_graph to contain a new field called src_points.
	  Similarly to how end_points stores the target vertex in an
	  adjacency, src_points
	  contains the source vertices for edges.
	  
	  This makes the get_edge() function work in O(1) time and will
	  also allow the use
	  of REVERSED direction in searches without forcing a binary search
	  for EVERY edge
	  traversal. It does double the memory requirement for edge vectors
	  and might be
	  made an option (perhaps) that can be instantiated by algorithms
	  sometime?
	  Such as a src_edge_map ?

2008-01-21  tshead

	* mtgl/snl_community.hpp:
	  
	  COMP: fix a minor #include problem on MacOSX

2008-01-21  William McLendon <wcmclen@sandia.gov>

	* mtgl/static_graph_adapter.hpp:
	  
	  

2008-01-17  William McLendon <wcmclen@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, mtgl/rand_fill.hpp,
	  mtgl/sssp_deltastepping.hpp, mtgl/static_graph_adapter.hpp:
	  
	  

	* test/Makefile.am, test/mtgl_test.h, test/test_find_triangles.cpp,
	  test/test_sssp_deltastepping.cpp, test/test_st_connectivity.cpp,
	  test/test_st_search.cpp:
	  
	  

	* mtgl/static_graph.h, mtgl/static_graph_adapter.hpp:
	  
	  added a print() method for debugging. Starting to look at the
	  get_edge() method

	* test/test_sssp_deltastepping.cpp:
	  
	  some test code added

2008-01-16  William McLendon <wcmclen@sandia.gov>

	* mtgl/static_graph.h, mtgl/static_graph_adapter.hpp:
	  
	  

	* mtgl/gen_rmat_graph.hpp:
	  
	  update

	* test/test_sssp_deltastepping.cpp:
	  
	  update

	* mtgl/sssp_deltastepping.hpp:
	  
	  update

2008-01-15  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  cleaning up some debug prints -- need to determine why DS code
	  isn't
	  returning a result.
	  
	  Crashes if graph_struct == dyn is used, why is this? generic
	  should be generic, but we do run to completion ok with static
	  graphs. Will investigate.

	* test/Makefile.am, test/mtgl_test.h,
	  test/test_sssp_deltastepping.hpp:
	  
	  added -ds option to mtgl_test.h
	  removed test_sssp_deltastepping.hpp b/c it's not necessary
	  anymore.
	  updated build options for sssp_deltastep test in Makefile.am

	* test/test_sssp_deltastepping.cpp:
	  
	  updated to work with new configuration.

	* mtgl/static_graph.h:
	  
	  relocated static_graph to mtgl from test/ directory.

	* test/static_graph.h:
	  
	  relocated static_graph to mtgl/

2008-01-15  Jon Berry <jberry@sandia.gov>

	* test/mtgl_test.h:
	  
	  Static graph adapter enabled. There's an inconsistency in
	  determining directed vs. undirected when using graph_adapter
	  or static_graph_adapter. This needs to be addressed.

	* mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_rmat_graph.hpp,
	  mtgl/graph.h, mtgl/graph_adapter.hpp,
	  mtgl/static_graph_adapter.hpp, test/Makefile.am, test/graph.cpp,
	  test/mtgl_test.cpp, test/mtgl_test.h, test/sensors.txt,
	  test/test_connected_components.cpp:
	  
	  Templated graph generation with gen_rmat_graph; rework of
	  mtgl_test kernel to use this. All tests will fail now except
	  for cc_test. The others should be changed to model this
	  one.

	* test/Makefile.in:
	  
	  

2008-01-14  William McLendon <wcmclen@sandia.gov>

	* test/mtgl_test.cpp:
	  
	  

	* test/mtgl_test.h:
	  
	  spacing.

	* test/test_sssp_deltastepping.cpp,
	  test/test_sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  clean up some debug messages.

	* mtgl/util.h:
	  
	  added a STATIC type for --graph_struct option.

2008-01-11  William McLendon <wcmclen@sandia.gov>

	* mtgl/psearch.hpp:
	  
	  Modified psearch to accept a NULL pointer for the colormap
	  (which is useful for times where we use a PURE_FILTER)

2008-01-09  bnwylie

	* mtgl/rand_fill.hpp:
	  
	  COMP: Windows does not have a lrand48 function, I took a guess
	  (probably bad) and replaced it with just a rand() call on
	  windows. John may want to correct this 'fix'.

2008-01-08  kddevin

	* README:
	  
	  Notes for build environment with mac os 10.4

2008-01-08  William McLendon <wcmclen@sandia.gov>

	* mtgl/sssp_deltastepping.hpp:
	  
	  

	* mtgl/sssp_deltastepping.hpp:
	  
	  changed "B" to "Buckets" so it's easier to find in the source.
	  Code segfaults in the trunk.

	* test/test_sssp_deltastepping.hpp:
	  
	  

2008-01-07  Jon Berry <jberry@sandia.gov>

	* mtgl/rand_fill.hpp, mtgl/ufl.h:
	  
	  MTA compilation

2008-01-07  William McLendon <wcmclen@sandia.gov>

	* test/test_sssp_deltastepping.cpp:
	  
	  source for testing deltastepping code.

	* test/Makefile.in:
	  
	  changed by reconf after adding sssp_deltastep.
	  
	  should a generated file from automake really be in the source
	  repository?

	* test/Makefile.am, test/test_sssp_deltastepping.hpp:
	  
	  added test program for deltastepping.

	* mtgl/sssp_deltastepping.hpp:
	  
	  Deltastepping code.

2008-01-07  Brad Mancke

	* mtgl/VolVolume.h, mtgl/csr_graph_adapter.hpp,
	  mtgl/graph_adapter.hpp, mtgl/mask_search.hpp,
	  mtgl/snl_community.hpp, mtgl/ufl.h, test/Makefile.in,
	  test/VolVolume.cpp, test/sensors.txt, test/test_csr_graph.cpp:
	  
	  implemented mask search with ufl

2008-01-04  Jon Berry <jberry@sandia.gov>

	* test/test_static_graph.c:
	  
	  Print the graph in C.

	* test/static_graph.h:
	  
	  forgot this one.

	* mtgl/mtgl_adapter.hpp, mtgl/static_graph_adapter.hpp,
	  test/static_graph.c, test/test_static_graph1.cpp:
	  
	  More tutorial tests.

	* mtgl/mtgl_adapter.hpp, mtgl/static_graph_adapter.hpp,
	  test/static_graph.c, test/test_static_graph.cpp:
	  
	  A wrapper over Kamesh Madduri's "static_graph" structure, and the
	  beginnings
	  of a set MTGL tutorial examples that will use that wrapper.

2008-01-02  Jon Berry <jberry@sandia.gov>

	* mtgl/VolVolume.h, mtgl/connection_subgraphs.hpp,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp,
	  mtgl/induced_subgraph.h, mtgl/snl_community.hpp, mtgl/ufl.h,
	  test/VolVolume.cpp, test/sensors.txt:
	  
	  Got rid of load_balance_masks (from ufl and snl_community)
	  temporarily to
	  allow compilation with Titan app. We need more work before they
	  go into
	  the trunk.

2007-12-21  Jon Berry <jberry@sandia.gov>

	* mtgl/gen_rmat_graph.hpp, test/Makefile.in:
	  
	  Bug fix in gen_rmat_graph.hpp (documentation)

	* test/test_pagerank.cpp:
	  
	  Will become a Page Rank code.

	* doc, doc/Doxyfile, mtgl/array2d.hpp, mtgl/bfs.hpp,
	  mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/breadth_first_search_mtgl_aux.hpp, mtgl/closure.h,
	  mtgl/components_visitor.h, mtgl/connected_components.hpp,
	  mtgl/csr_graph_adapter.hpp, mtgl/gen_plod_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph_adapter.hpp,
	  mtgl/graph_traits.hpp, mtgl/independent_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_visitor.h,
	  mtgl/mask_search.hpp, mtgl/mtaqsort.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_boost_graph.hpp, mtgl/mtgl_boost_property.hpp,
	  mtgl/rand_fill.hpp, mtgl/ufl.h, mtgl/util.h, test/Makefile.am,
	  test/test_mask_search.cpp:
	  
	  Doxygen update

2007-12-20  William McLendon <wcmclen@sandia.gov>

	* mtgl/mtgl_adapter.hpp, mtgl/util.h:
	  
	  put a guard around the #pragma warning() disable command to only
	  work if we're not
	  on an mta -- just to get rid of the warning message on the MTA
	  compiler.

2007-12-20  Jon Berry <jberry@sandia.gov>

	* test/giant.f:
	  
	  Unnecessary file -- Fortran no longer supported on XMT.

2007-12-19  Jon Berry <jberry@sandia.gov>

	* README:
	  
	  

	* AUTHORS, ChangeLog, NEWS, test/Makefile.in:
	  
	  Autoconf required files.

2007-12-18  Jon Berry <jberry@sandia.gov>

	* test/Makefile.am, test/mtgl_boost_test.cpp:
	  
	  Print edges

	* configure.ac, mtgl/connected_components.hpp,
	  mtgl/depth_first_search.hpp, mtgl/gen_plod_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/random_walk.hpp,
	  mtgl/snl_community.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/topsort.hpp,
	  test/Makefile.am, test/graph.cpp, test/mtgl_test.cpp:
	  
	  Mac compilation

2007-12-14  bnwylie

	* mtgl/graph_adapter.hpp:
	  
	  COMP: g_vertex_iterator& operator= was not returning a *this
	  pointer. So putting that in. :)

2007-12-14  William McLendon <wcmclen@sandia.gov>

	* mtgl/visit_adj.hpp:
	  
	  bugfix on visit_adj(g, vid, user_vis, parcutoff=20)

2007-12-13  Brad Mancke

	* mtgl/mask_search.hpp:
	  
	  fixed mask_search

	* mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/connected_components.hpp, mtgl/mask_search.hpp,
	  mtgl/mtgl_adapter.hpp:
	  
	  fixed bfs and mask_search on mta, as well as did high_low for
	  kahan in connected_components

2007-12-12  Brad Mancke

	* test/test_mask_search.cpp:
	  
	  newNew test for load balancing.

	* mtgl/breadth_first_search_mtgl.hpp,
	  mtgl/breadth_first_search_mtgl_aux.hpp, mtgl/graph_adapter.hpp,
	  mtgl/mask_search.hpp, mtgl/queue.h, mtgl/snl_community.hpp,
	  mtgl/ufl.h, mtgl/util.h, test/Makefile.am, test/Makefile.in,
	  test/VolVolume.cpp, test/ufl.cpp:
	  
	  merged and worked on mask_search

2007-12-12  tshead

	* mtgl/SMVkernel.h, mtgl/connection_subgraphs.hpp,
	  mtgl/dynamic_array.h, mtgl/quicksort.hpp,
	  mtgl/st_connectivity.hpp:
	  
	  Don't #include <malloc.h> on OSX - it doesn't exist on that
	  platform

2007-12-05  Jon Berry <jberry@sandia.gov>

	* Makefile.am, README, config, config/CVS, config/CVS/Entries,
	  config/CVS/Repository, config/CVS/Root, config/CVS/Template,
	  config/ac_cxx_compiler_vendor.m4,
	  config/ac_cxx_cppflags_std_lang.m4, config/ac_cxx_exceptions.m4,
	  config/ac_cxx_explicit.m4, config/ac_cxx_have_sstream.m4,
	  config/ac_cxx_have_std.m4, config/ac_cxx_member_templates.m4,
	  config/ac_cxx_namespaces.m4,
	  config/ac_cxx_templates_as_template_arguments.m4,
	  config/acro_platform.m4, config/compile, config/config.guess,
	  config/config.sub, config/depcomp, config/install-sh,
	  config/ltmain.sh, config/missing, config/mtgl_compiler_flags.m4,
	  config/mtgl_compiler_option.m4, config/mtgl_compiler_options.m4,
	  config/mtgl_enable_build.m4, config/mtgl_platform_flags.m4,
	  config/mtgl_test_option.m4, configure.ac, mtgl, mtgl/RandomValue,
	  mtgl/SMVkernel.h, mtgl/VolVolume.h, mtgl/array2d.hpp,
	  mtgl/bfs.hpp, mtgl/breadth_first_search.hpp,
	  mtgl/breadth_first_search_mtgl.hpp, mtgl/closure.h,
	  mtgl/components_visitor.h, mtgl/config.h, mtgl/config.h.in,
	  mtgl/connected_components.hpp, mtgl/connection_subgraphs.hpp,
	  mtgl/connectivity_visitor.h, mtgl/copier.h, mtgl/csr_graph.h,
	  mtgl/csr_graph_adapter.hpp, mtgl/debug_utils.hpp,
	  mtgl/depth_first_search.hpp, mtgl/depth_first_search_visitor.h,
	  mtgl/dynamic_array.h, mtgl/files,
	  mtgl/gen_dimacsrandom_graph.hpp, mtgl/gen_plod_graph.hpp,
	  mtgl/gen_rmat_graph.hpp, mtgl/graph.cpp, mtgl/graph.h,
	  mtgl/graph_adapter.hpp, mtgl/graph_traits.hpp, mtgl/hash_set.h,
	  mtgl/hash_table.h, mtgl/independent_set.hpp,
	  mtgl/induced_subgraph.h, mtgl/isomorphism_visitor.h,
	  mtgl/k_distance_neighborhood.hpp, mtgl/mask_search.hpp,
	  mtgl/mask_search_visitor.h, mtgl/metrics.hpp, mtgl/mmgraph.h,
	  mtgl/mtaqsort.hpp, mtgl/mtgl_adapter.hpp,
	  mtgl/mtgl_boost_graph.hpp, mtgl/mtgl_boost_property.hpp,
	  mtgl/mtgl_boost_tuple.hpp, mtgl/psearch.hpp,
	  mtgl/psearch_aux.hpp, mtgl/queue.h, mtgl/quicksort.hpp,
	  mtgl/rand_fill.hpp, mtgl/random.h, mtgl/random_walk.hpp,
	  mtgl/random_walk_visitor.h, mtgl/read_cluster_graph.hpp,
	  mtgl/read_dimacs_graph.hpp, mtgl/scc_visitor.h,
	  mtgl/serqsort.hpp, mtgl/shiloach_vishkin.hpp,
	  mtgl/snl_community.hpp, mtgl/st_connectivity.hpp,
	  mtgl/st_search.hpp, mtgl/st_subgraph_search.hpp,
	  mtgl/strongly_connected_components.hpp,
	  mtgl/strongly_connected_components_dfs.hpp,
	  mtgl/subgraph_isomorphism.hpp, mtgl/test_graph.hpp,
	  mtgl/test_graph_adapter.hpp, mtgl/topsort.hpp,
	  mtgl/topsort_visitor.h, mtgl/triangles.hpp, mtgl/ufl.h,
	  mtgl/util.h, mtgl/visit_adj.hpp, mtgl/vtk_graph_adapter.hpp,
	  test, test/.gdbrc, test/.test_allvisit.cpp.swp, test/CPPGraph.h,
	  test/GenOntology.cpp, test/Graph.h, test/Makefile.am,
	  test/Makefile.in, test/VolVolume.cpp, test/buildmaps.c,
	  test/buildtest.cpp, test/csr_test.cpp, test/g_test.cpp,
	  test/giant.f, test/giant.inc, test/graph.cpp,
	  test/load_mmap_graph.hpp, test/loadmaps.c, test/loadtest.cpp,
	  test/mtgl_boost_test.cpp, test/mtgl_test.cpp, test/mtgl_test.h,
	  test/qalloc.c, test/qalloc.h, test/sensors.txt, test/test.cpp,
	  test/test_allvisit.cpp, test/test_connected_components.cpp,
	  test/test_connection_subgraphs.cpp,
	  test/test_connection_subgraphs.hpp, test/test_csr_graph.cpp,
	  test/test_csr_graph.cpp.bak, test/test_find_assortativity.cpp,
	  test/test_find_assortativity.h, test/test_find_modularity.cpp,
	  test/test_find_triangles.cpp, test/test_g.cpp,
	  test/test_independent_set.cpp, test/test_knn.cpp,
	  test/test_knn.hpp, test/test_st_connectivity.cpp,
	  test/test_st_connectivity.hpp, test/test_st_search.cpp,
	  test/test_st_search.hpp,
	  test/test_strongly_connected_components.cpp,
	  test/test_strongly_connected_components_dfs.cpp, test/ufl.cpp,
	  test/utilities.cpp, test/utilities.h:
	  
	  Adding mtgl

2006-12-18  Jon Berry <jberry@sandia.gov>

	* CVSROOT/modules:
	  
	  deprecated "eldorado" was already defined
	  
	  ( Eldorado-related mail archives are at
	  http://software.sandia.gov/Eldorado/ )

	* CVSROOT/modules:
	  
	  "mtgl" is the newly reorganized library; "mtgl-old" is the
	  original library
	  that had include/ and src/ directories.
	  
	  ( Eldorado-related mail archives are at
	  http://software.sandia.gov/Eldorado/ )

2006-11-08  Jon Berry <jberry@sandia.gov>

	* CVSROOT/loginfo:
	  
	  mail goes to eldorado-commits now
	  
	  ( Eldorado-related mail archives are at
	  http://software.sandia.gov/Eldorado/ )

2006-08-03  Jon Berry <jberry@sandia.gov>

	* CVSROOT/modules:
	  
	  Enable mtgl developers to check out mtgl only.
	  
	  ( Eldorado-related mail archives are at
	  http://software.sandia.gov/Eldorado/ )

2005-03-07  Jon Berry <jberry@sandia.gov>

	* CVSROOT, CVSROOT/cvsignore, CVSROOT/log.pl, CVSROOT/loginfo,
	  CVSROOT/rcsinfo:
	  
	  *** empty log message ***

2005-03-07  

	* .:
	  
	  New repository initialized by cvs2svn.

